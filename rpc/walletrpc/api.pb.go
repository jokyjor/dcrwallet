// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package walletrpc is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	VersionRequest
	VersionResponse
	TransactionDetails
	BlockDetails
	AccountBalance
	PingRequest
	PingResponse
	NetworkRequest
	NetworkResponse
	AccountNumberRequest
	AccountNumberResponse
	AccountsRequest
	AccountsResponse
	RenameAccountRequest
	RenameAccountResponse
	RescanRequest
	RescanResponse
	NextAccountRequest
	NextAccountResponse
	NextAddressRequest
	NextAddressResponse
	ImportPrivateKeyRequest
	ImportPrivateKeyResponse
	ImportScriptRequest
	ImportScriptResponse
	BalanceRequest
	BalanceResponse
	GetTransactionRequest
	GetTransactionResponse
	GetTransactionsRequest
	GetTransactionsResponse
	GetTicketsRequest
	GetTicketsResponse
	TicketPriceRequest
	TicketPriceResponse
	StakeInfoRequest
	StakeInfoResponse
	BlockInfoRequest
	BlockInfoResponse
	ChangePassphraseRequest
	ChangePassphraseResponse
	FundTransactionRequest
	FundTransactionResponse
	ConstructTransactionRequest
	ConstructTransactionResponse
	SignTransactionRequest
	SignTransactionResponse
	CreateSignatureRequest
	CreateSignatureResponse
	PublishTransactionRequest
	PublishTransactionResponse
	PurchaseTicketsRequest
	PurchaseTicketsResponse
	RevokeTicketsRequest
	RevokeTicketsResponse
	LoadActiveDataFiltersRequest
	LoadActiveDataFiltersResponse
	SignMessageRequest
	SignMessageResponse
	TransactionNotificationsRequest
	TransactionNotificationsResponse
	AccountNotificationsRequest
	AccountNotificationsResponse
	ConfirmationNotificationsRequest
	ConfirmationNotificationsResponse
	CreateWalletRequest
	CreateWalletResponse
	OpenWalletRequest
	OpenWalletResponse
	CloseWalletRequest
	CloseWalletResponse
	WalletExistsRequest
	WalletExistsResponse
	StartConsensusRpcRequest
	StartConsensusRpcResponse
	DiscoverAddressesRequest
	DiscoverAddressesResponse
	SubscribeToBlockNotificationsRequest
	SubscribeToBlockNotificationsResponse
	FetchHeadersRequest
	FetchHeadersResponse
	GenerateRandomSeedRequest
	GenerateRandomSeedResponse
	DecodeSeedRequest
	DecodeSeedResponse
	StartAutoBuyerRequest
	StartAutoBuyerResponse
	StopAutoBuyerRequest
	StopAutoBuyerResponse
	TicketBuyerConfigRequest
	TicketBuyerConfigResponse
	SetAccountRequest
	SetAccountResponse
	SetBalanceToMaintainRequest
	SetBalanceToMaintainResponse
	SetMaxFeeRequest
	SetMaxFeeResponse
	SetMaxPriceRelativeRequest
	SetMaxPriceRelativeResponse
	SetMaxPriceAbsoluteRequest
	SetMaxPriceAbsoluteResponse
	SetVotingAddressRequest
	SetVotingAddressResponse
	SetNoSplitTransactionRequest
	SetNoSplitTransactionResponse
	SetPoolAddressRequest
	SetPoolAddressResponse
	SetPoolFeesRequest
	SetPoolFeesResponse
	SetMaxPerBlockRequest
	SetMaxPerBlockResponse
	AgendasRequest
	AgendasResponse
	VoteChoicesRequest
	VoteChoicesResponse
	SetVoteChoicesRequest
	SetVoteChoicesResponse
	VerifyMessageRequest
	VerifyMessageResponse
*/
package walletrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TransactionDetails_TransactionType int32

const (
	TransactionDetails_REGULAR         TransactionDetails_TransactionType = 0
	TransactionDetails_COINBASE        TransactionDetails_TransactionType = 4
	TransactionDetails_TICKET_PURCHASE TransactionDetails_TransactionType = 1
	TransactionDetails_VOTE            TransactionDetails_TransactionType = 2
	TransactionDetails_REVOCATION      TransactionDetails_TransactionType = 3
)

var TransactionDetails_TransactionType_name = map[int32]string{
	0: "REGULAR",
	4: "COINBASE",
	1: "TICKET_PURCHASE",
	2: "VOTE",
	3: "REVOCATION",
}
var TransactionDetails_TransactionType_value = map[string]int32{
	"REGULAR":         0,
	"COINBASE":        4,
	"TICKET_PURCHASE": 1,
	"VOTE":            2,
	"REVOCATION":      3,
}

func (x TransactionDetails_TransactionType) String() string {
	return proto.EnumName(TransactionDetails_TransactionType_name, int32(x))
}
func (TransactionDetails_TransactionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 0}
}

type NextAddressRequest_Kind int32

const (
	NextAddressRequest_BIP0044_EXTERNAL NextAddressRequest_Kind = 0
	NextAddressRequest_BIP0044_INTERNAL NextAddressRequest_Kind = 1
)

var NextAddressRequest_Kind_name = map[int32]string{
	0: "BIP0044_EXTERNAL",
	1: "BIP0044_INTERNAL",
}
var NextAddressRequest_Kind_value = map[string]int32{
	"BIP0044_EXTERNAL": 0,
	"BIP0044_INTERNAL": 1,
}

func (x NextAddressRequest_Kind) String() string {
	return proto.EnumName(NextAddressRequest_Kind_name, int32(x))
}
func (NextAddressRequest_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{19, 0} }

type NextAddressRequest_GapPolicy int32

const (
	NextAddressRequest_GAP_POLICY_UNSPECIFIED NextAddressRequest_GapPolicy = 0
	NextAddressRequest_GAP_POLICY_ERROR       NextAddressRequest_GapPolicy = 1
	NextAddressRequest_GAP_POLICY_IGNORE      NextAddressRequest_GapPolicy = 2
	NextAddressRequest_GAP_POLICY_WRAP        NextAddressRequest_GapPolicy = 3
)

var NextAddressRequest_GapPolicy_name = map[int32]string{
	0: "GAP_POLICY_UNSPECIFIED",
	1: "GAP_POLICY_ERROR",
	2: "GAP_POLICY_IGNORE",
	3: "GAP_POLICY_WRAP",
}
var NextAddressRequest_GapPolicy_value = map[string]int32{
	"GAP_POLICY_UNSPECIFIED": 0,
	"GAP_POLICY_ERROR":       1,
	"GAP_POLICY_IGNORE":      2,
	"GAP_POLICY_WRAP":        3,
}

func (x NextAddressRequest_GapPolicy) String() string {
	return proto.EnumName(NextAddressRequest_GapPolicy_name, int32(x))
}
func (NextAddressRequest_GapPolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{19, 1}
}

type GetTicketsResponse_TicketDetails_TicketStatus int32

const (
	GetTicketsResponse_TicketDetails_UNKNOWN  GetTicketsResponse_TicketDetails_TicketStatus = 0
	GetTicketsResponse_TicketDetails_UNMINED  GetTicketsResponse_TicketDetails_TicketStatus = 1
	GetTicketsResponse_TicketDetails_IMMATURE GetTicketsResponse_TicketDetails_TicketStatus = 2
	GetTicketsResponse_TicketDetails_LIVE     GetTicketsResponse_TicketDetails_TicketStatus = 3
	GetTicketsResponse_TicketDetails_VOTED    GetTicketsResponse_TicketDetails_TicketStatus = 4
	GetTicketsResponse_TicketDetails_MISSED   GetTicketsResponse_TicketDetails_TicketStatus = 5
	GetTicketsResponse_TicketDetails_EXPIRED  GetTicketsResponse_TicketDetails_TicketStatus = 6
	GetTicketsResponse_TicketDetails_REVOKED  GetTicketsResponse_TicketDetails_TicketStatus = 7
)

var GetTicketsResponse_TicketDetails_TicketStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "UNMINED",
	2: "IMMATURE",
	3: "LIVE",
	4: "VOTED",
	5: "MISSED",
	6: "EXPIRED",
	7: "REVOKED",
}
var GetTicketsResponse_TicketDetails_TicketStatus_value = map[string]int32{
	"UNKNOWN":  0,
	"UNMINED":  1,
	"IMMATURE": 2,
	"LIVE":     3,
	"VOTED":    4,
	"MISSED":   5,
	"EXPIRED":  6,
	"REVOKED":  7,
}

func (x GetTicketsResponse_TicketDetails_TicketStatus) String() string {
	return proto.EnumName(GetTicketsResponse_TicketDetails_TicketStatus_name, int32(x))
}
func (GetTicketsResponse_TicketDetails_TicketStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{32, 0, 0}
}

type ChangePassphraseRequest_Key int32

const (
	ChangePassphraseRequest_PRIVATE ChangePassphraseRequest_Key = 0
	ChangePassphraseRequest_PUBLIC  ChangePassphraseRequest_Key = 1
)

var ChangePassphraseRequest_Key_name = map[int32]string{
	0: "PRIVATE",
	1: "PUBLIC",
}
var ChangePassphraseRequest_Key_value = map[string]int32{
	"PRIVATE": 0,
	"PUBLIC":  1,
}

func (x ChangePassphraseRequest_Key) String() string {
	return proto.EnumName(ChangePassphraseRequest_Key_name, int32(x))
}
func (ChangePassphraseRequest_Key) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{39, 0}
}

type ConstructTransactionRequest_OutputSelectionAlgorithm int32

const (
	ConstructTransactionRequest_UNSPECIFIED ConstructTransactionRequest_OutputSelectionAlgorithm = 0
	ConstructTransactionRequest_ALL         ConstructTransactionRequest_OutputSelectionAlgorithm = 1
)

var ConstructTransactionRequest_OutputSelectionAlgorithm_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "ALL",
}
var ConstructTransactionRequest_OutputSelectionAlgorithm_value = map[string]int32{
	"UNSPECIFIED": 0,
	"ALL":         1,
}

func (x ConstructTransactionRequest_OutputSelectionAlgorithm) String() string {
	return proto.EnumName(ConstructTransactionRequest_OutputSelectionAlgorithm_name, int32(x))
}
func (ConstructTransactionRequest_OutputSelectionAlgorithm) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{43, 0}
}

type CreateSignatureRequest_SigHashType int32

const (
	CreateSignatureRequest_SIGHASH_OLD          CreateSignatureRequest_SigHashType = 0
	CreateSignatureRequest_SIGHASH_ALL          CreateSignatureRequest_SigHashType = 1
	CreateSignatureRequest_SIGHASH_NONE         CreateSignatureRequest_SigHashType = 2
	CreateSignatureRequest_SIGHASH_SINGLE       CreateSignatureRequest_SigHashType = 3
	CreateSignatureRequest_SIGHASH_ALLVALUE     CreateSignatureRequest_SigHashType = 4
	CreateSignatureRequest_SIGHASH_ANYONECANPAY CreateSignatureRequest_SigHashType = 128
)

var CreateSignatureRequest_SigHashType_name = map[int32]string{
	0:   "SIGHASH_OLD",
	1:   "SIGHASH_ALL",
	2:   "SIGHASH_NONE",
	3:   "SIGHASH_SINGLE",
	4:   "SIGHASH_ALLVALUE",
	128: "SIGHASH_ANYONECANPAY",
}
var CreateSignatureRequest_SigHashType_value = map[string]int32{
	"SIGHASH_OLD":          0,
	"SIGHASH_ALL":          1,
	"SIGHASH_NONE":         2,
	"SIGHASH_SINGLE":       3,
	"SIGHASH_ALLVALUE":     4,
	"SIGHASH_ANYONECANPAY": 128,
}

func (x CreateSignatureRequest_SigHashType) String() string {
	return proto.EnumName(CreateSignatureRequest_SigHashType_name, int32(x))
}
func (CreateSignatureRequest_SigHashType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{47, 0}
}

type VersionRequest struct {
}

func (m *VersionRequest) Reset()                    { *m = VersionRequest{} }
func (m *VersionRequest) String() string            { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()               {}
func (*VersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type VersionResponse struct {
	VersionString string `protobuf:"bytes,1,opt,name=version_string,json=versionString" json:"version_string,omitempty"`
	Major         uint32 `protobuf:"varint,2,opt,name=major" json:"major,omitempty"`
	Minor         uint32 `protobuf:"varint,3,opt,name=minor" json:"minor,omitempty"`
	Patch         uint32 `protobuf:"varint,4,opt,name=patch" json:"patch,omitempty"`
	Prerelease    string `protobuf:"bytes,5,opt,name=prerelease" json:"prerelease,omitempty"`
	BuildMetadata string `protobuf:"bytes,6,opt,name=build_metadata,json=buildMetadata" json:"build_metadata,omitempty"`
}

func (m *VersionResponse) Reset()                    { *m = VersionResponse{} }
func (m *VersionResponse) String() string            { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()               {}
func (*VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VersionResponse) GetVersionString() string {
	if m != nil {
		return m.VersionString
	}
	return ""
}

func (m *VersionResponse) GetMajor() uint32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *VersionResponse) GetMinor() uint32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *VersionResponse) GetPatch() uint32 {
	if m != nil {
		return m.Patch
	}
	return 0
}

func (m *VersionResponse) GetPrerelease() string {
	if m != nil {
		return m.Prerelease
	}
	return ""
}

func (m *VersionResponse) GetBuildMetadata() string {
	if m != nil {
		return m.BuildMetadata
	}
	return ""
}

type TransactionDetails struct {
	Hash            []byte                             `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Transaction     []byte                             `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Debits          []*TransactionDetails_Input        `protobuf:"bytes,3,rep,name=debits" json:"debits,omitempty"`
	Credits         []*TransactionDetails_Output       `protobuf:"bytes,4,rep,name=credits" json:"credits,omitempty"`
	Fee             int64                              `protobuf:"varint,5,opt,name=fee" json:"fee,omitempty"`
	Timestamp       int64                              `protobuf:"varint,6,opt,name=timestamp" json:"timestamp,omitempty"`
	TransactionType TransactionDetails_TransactionType `protobuf:"varint,7,opt,name=transaction_type,json=transactionType,enum=walletrpc.TransactionDetails_TransactionType" json:"transaction_type,omitempty"`
}

func (m *TransactionDetails) Reset()                    { *m = TransactionDetails{} }
func (m *TransactionDetails) String() string            { return proto.CompactTextString(m) }
func (*TransactionDetails) ProtoMessage()               {}
func (*TransactionDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TransactionDetails) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *TransactionDetails) GetTransaction() []byte {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *TransactionDetails) GetDebits() []*TransactionDetails_Input {
	if m != nil {
		return m.Debits
	}
	return nil
}

func (m *TransactionDetails) GetCredits() []*TransactionDetails_Output {
	if m != nil {
		return m.Credits
	}
	return nil
}

func (m *TransactionDetails) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *TransactionDetails) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TransactionDetails) GetTransactionType() TransactionDetails_TransactionType {
	if m != nil {
		return m.TransactionType
	}
	return TransactionDetails_REGULAR
}

type TransactionDetails_Input struct {
	Index           uint32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	PreviousAccount uint32 `protobuf:"varint,2,opt,name=previous_account,json=previousAccount" json:"previous_account,omitempty"`
	PreviousAmount  int64  `protobuf:"varint,3,opt,name=previous_amount,json=previousAmount" json:"previous_amount,omitempty"`
}

func (m *TransactionDetails_Input) Reset()                    { *m = TransactionDetails_Input{} }
func (m *TransactionDetails_Input) String() string            { return proto.CompactTextString(m) }
func (*TransactionDetails_Input) ProtoMessage()               {}
func (*TransactionDetails_Input) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *TransactionDetails_Input) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TransactionDetails_Input) GetPreviousAccount() uint32 {
	if m != nil {
		return m.PreviousAccount
	}
	return 0
}

func (m *TransactionDetails_Input) GetPreviousAmount() int64 {
	if m != nil {
		return m.PreviousAmount
	}
	return 0
}

type TransactionDetails_Output struct {
	Index        uint32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Account      uint32 `protobuf:"varint,2,opt,name=account" json:"account,omitempty"`
	Internal     bool   `protobuf:"varint,3,opt,name=internal" json:"internal,omitempty"`
	Amount       int64  `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
	Address      string `protobuf:"bytes,5,opt,name=address" json:"address,omitempty"`
	OutputScript []byte `protobuf:"bytes,6,opt,name=output_script,json=outputScript,proto3" json:"output_script,omitempty"`
}

func (m *TransactionDetails_Output) Reset()                    { *m = TransactionDetails_Output{} }
func (m *TransactionDetails_Output) String() string            { return proto.CompactTextString(m) }
func (*TransactionDetails_Output) ProtoMessage()               {}
func (*TransactionDetails_Output) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

func (m *TransactionDetails_Output) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TransactionDetails_Output) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *TransactionDetails_Output) GetInternal() bool {
	if m != nil {
		return m.Internal
	}
	return false
}

func (m *TransactionDetails_Output) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransactionDetails_Output) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TransactionDetails_Output) GetOutputScript() []byte {
	if m != nil {
		return m.OutputScript
	}
	return nil
}

type BlockDetails struct {
	Hash         []byte                `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height       int32                 `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Timestamp    int64                 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Transactions []*TransactionDetails `protobuf:"bytes,4,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *BlockDetails) Reset()                    { *m = BlockDetails{} }
func (m *BlockDetails) String() string            { return proto.CompactTextString(m) }
func (*BlockDetails) ProtoMessage()               {}
func (*BlockDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BlockDetails) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockDetails) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockDetails) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockDetails) GetTransactions() []*TransactionDetails {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type AccountBalance struct {
	Account      uint32 `protobuf:"varint,1,opt,name=account" json:"account,omitempty"`
	TotalBalance int64  `protobuf:"varint,2,opt,name=total_balance,json=totalBalance" json:"total_balance,omitempty"`
}

func (m *AccountBalance) Reset()                    { *m = AccountBalance{} }
func (m *AccountBalance) String() string            { return proto.CompactTextString(m) }
func (*AccountBalance) ProtoMessage()               {}
func (*AccountBalance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AccountBalance) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *AccountBalance) GetTotalBalance() int64 {
	if m != nil {
		return m.TotalBalance
	}
	return 0
}

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type PingResponse struct {
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type NetworkRequest struct {
}

func (m *NetworkRequest) Reset()                    { *m = NetworkRequest{} }
func (m *NetworkRequest) String() string            { return proto.CompactTextString(m) }
func (*NetworkRequest) ProtoMessage()               {}
func (*NetworkRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type NetworkResponse struct {
	ActiveNetwork uint32 `protobuf:"varint,1,opt,name=active_network,json=activeNetwork" json:"active_network,omitempty"`
}

func (m *NetworkResponse) Reset()                    { *m = NetworkResponse{} }
func (m *NetworkResponse) String() string            { return proto.CompactTextString(m) }
func (*NetworkResponse) ProtoMessage()               {}
func (*NetworkResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *NetworkResponse) GetActiveNetwork() uint32 {
	if m != nil {
		return m.ActiveNetwork
	}
	return 0
}

type AccountNumberRequest struct {
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
}

func (m *AccountNumberRequest) Reset()                    { *m = AccountNumberRequest{} }
func (m *AccountNumberRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountNumberRequest) ProtoMessage()               {}
func (*AccountNumberRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AccountNumberRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

type AccountNumberResponse struct {
	AccountNumber uint32 `protobuf:"varint,1,opt,name=account_number,json=accountNumber" json:"account_number,omitempty"`
}

func (m *AccountNumberResponse) Reset()                    { *m = AccountNumberResponse{} }
func (m *AccountNumberResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountNumberResponse) ProtoMessage()               {}
func (*AccountNumberResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *AccountNumberResponse) GetAccountNumber() uint32 {
	if m != nil {
		return m.AccountNumber
	}
	return 0
}

type AccountsRequest struct {
}

func (m *AccountsRequest) Reset()                    { *m = AccountsRequest{} }
func (m *AccountsRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountsRequest) ProtoMessage()               {}
func (*AccountsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type AccountsResponse struct {
	Accounts           []*AccountsResponse_Account `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
	CurrentBlockHash   []byte                      `protobuf:"bytes,2,opt,name=current_block_hash,json=currentBlockHash,proto3" json:"current_block_hash,omitempty"`
	CurrentBlockHeight int32                       `protobuf:"varint,3,opt,name=current_block_height,json=currentBlockHeight" json:"current_block_height,omitempty"`
}

func (m *AccountsResponse) Reset()                    { *m = AccountsResponse{} }
func (m *AccountsResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountsResponse) ProtoMessage()               {}
func (*AccountsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AccountsResponse) GetAccounts() []*AccountsResponse_Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *AccountsResponse) GetCurrentBlockHash() []byte {
	if m != nil {
		return m.CurrentBlockHash
	}
	return nil
}

func (m *AccountsResponse) GetCurrentBlockHeight() int32 {
	if m != nil {
		return m.CurrentBlockHeight
	}
	return 0
}

type AccountsResponse_Account struct {
	AccountNumber    uint32 `protobuf:"varint,1,opt,name=account_number,json=accountNumber" json:"account_number,omitempty"`
	AccountName      string `protobuf:"bytes,2,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	TotalBalance     int64  `protobuf:"varint,3,opt,name=total_balance,json=totalBalance" json:"total_balance,omitempty"`
	ExternalKeyCount uint32 `protobuf:"varint,4,opt,name=external_key_count,json=externalKeyCount" json:"external_key_count,omitempty"`
	InternalKeyCount uint32 `protobuf:"varint,5,opt,name=internal_key_count,json=internalKeyCount" json:"internal_key_count,omitempty"`
	ImportedKeyCount uint32 `protobuf:"varint,6,opt,name=imported_key_count,json=importedKeyCount" json:"imported_key_count,omitempty"`
}

func (m *AccountsResponse_Account) Reset()                    { *m = AccountsResponse_Account{} }
func (m *AccountsResponse_Account) String() string            { return proto.CompactTextString(m) }
func (*AccountsResponse_Account) ProtoMessage()               {}
func (*AccountsResponse_Account) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12, 0} }

func (m *AccountsResponse_Account) GetAccountNumber() uint32 {
	if m != nil {
		return m.AccountNumber
	}
	return 0
}

func (m *AccountsResponse_Account) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *AccountsResponse_Account) GetTotalBalance() int64 {
	if m != nil {
		return m.TotalBalance
	}
	return 0
}

func (m *AccountsResponse_Account) GetExternalKeyCount() uint32 {
	if m != nil {
		return m.ExternalKeyCount
	}
	return 0
}

func (m *AccountsResponse_Account) GetInternalKeyCount() uint32 {
	if m != nil {
		return m.InternalKeyCount
	}
	return 0
}

func (m *AccountsResponse_Account) GetImportedKeyCount() uint32 {
	if m != nil {
		return m.ImportedKeyCount
	}
	return 0
}

type RenameAccountRequest struct {
	AccountNumber uint32 `protobuf:"varint,1,opt,name=account_number,json=accountNumber" json:"account_number,omitempty"`
	NewName       string `protobuf:"bytes,2,opt,name=new_name,json=newName" json:"new_name,omitempty"`
}

func (m *RenameAccountRequest) Reset()                    { *m = RenameAccountRequest{} }
func (m *RenameAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*RenameAccountRequest) ProtoMessage()               {}
func (*RenameAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *RenameAccountRequest) GetAccountNumber() uint32 {
	if m != nil {
		return m.AccountNumber
	}
	return 0
}

func (m *RenameAccountRequest) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

type RenameAccountResponse struct {
}

func (m *RenameAccountResponse) Reset()                    { *m = RenameAccountResponse{} }
func (m *RenameAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*RenameAccountResponse) ProtoMessage()               {}
func (*RenameAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type RescanRequest struct {
	BeginHeight int32 `protobuf:"varint,1,opt,name=begin_height,json=beginHeight" json:"begin_height,omitempty"`
}

func (m *RescanRequest) Reset()                    { *m = RescanRequest{} }
func (m *RescanRequest) String() string            { return proto.CompactTextString(m) }
func (*RescanRequest) ProtoMessage()               {}
func (*RescanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *RescanRequest) GetBeginHeight() int32 {
	if m != nil {
		return m.BeginHeight
	}
	return 0
}

type RescanResponse struct {
	RescannedThrough int32 `protobuf:"varint,1,opt,name=rescanned_through,json=rescannedThrough" json:"rescanned_through,omitempty"`
}

func (m *RescanResponse) Reset()                    { *m = RescanResponse{} }
func (m *RescanResponse) String() string            { return proto.CompactTextString(m) }
func (*RescanResponse) ProtoMessage()               {}
func (*RescanResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *RescanResponse) GetRescannedThrough() int32 {
	if m != nil {
		return m.RescannedThrough
	}
	return 0
}

type NextAccountRequest struct {
	Passphrase  []byte `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	AccountName string `protobuf:"bytes,2,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
}

func (m *NextAccountRequest) Reset()                    { *m = NextAccountRequest{} }
func (m *NextAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*NextAccountRequest) ProtoMessage()               {}
func (*NextAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *NextAccountRequest) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

func (m *NextAccountRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

type NextAccountResponse struct {
	AccountNumber uint32 `protobuf:"varint,1,opt,name=account_number,json=accountNumber" json:"account_number,omitempty"`
}

func (m *NextAccountResponse) Reset()                    { *m = NextAccountResponse{} }
func (m *NextAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*NextAccountResponse) ProtoMessage()               {}
func (*NextAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *NextAccountResponse) GetAccountNumber() uint32 {
	if m != nil {
		return m.AccountNumber
	}
	return 0
}

type NextAddressRequest struct {
	Account   uint32                       `protobuf:"varint,1,opt,name=account" json:"account,omitempty"`
	Kind      NextAddressRequest_Kind      `protobuf:"varint,2,opt,name=kind,enum=walletrpc.NextAddressRequest_Kind" json:"kind,omitempty"`
	GapPolicy NextAddressRequest_GapPolicy `protobuf:"varint,3,opt,name=gap_policy,json=gapPolicy,enum=walletrpc.NextAddressRequest_GapPolicy" json:"gap_policy,omitempty"`
}

func (m *NextAddressRequest) Reset()                    { *m = NextAddressRequest{} }
func (m *NextAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*NextAddressRequest) ProtoMessage()               {}
func (*NextAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *NextAddressRequest) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *NextAddressRequest) GetKind() NextAddressRequest_Kind {
	if m != nil {
		return m.Kind
	}
	return NextAddressRequest_BIP0044_EXTERNAL
}

func (m *NextAddressRequest) GetGapPolicy() NextAddressRequest_GapPolicy {
	if m != nil {
		return m.GapPolicy
	}
	return NextAddressRequest_GAP_POLICY_UNSPECIFIED
}

type NextAddressResponse struct {
	Address   string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	PublicKey string `protobuf:"bytes,2,opt,name=public_key,json=publicKey" json:"public_key,omitempty"`
}

func (m *NextAddressResponse) Reset()                    { *m = NextAddressResponse{} }
func (m *NextAddressResponse) String() string            { return proto.CompactTextString(m) }
func (*NextAddressResponse) ProtoMessage()               {}
func (*NextAddressResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *NextAddressResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NextAddressResponse) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

type ImportPrivateKeyRequest struct {
	Passphrase    []byte `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	Account       uint32 `protobuf:"varint,2,opt,name=account" json:"account,omitempty"`
	PrivateKeyWif string `protobuf:"bytes,3,opt,name=private_key_wif,json=privateKeyWif" json:"private_key_wif,omitempty"`
	Rescan        bool   `protobuf:"varint,4,opt,name=rescan" json:"rescan,omitempty"`
	ScanFrom      int32  `protobuf:"varint,5,opt,name=scan_from,json=scanFrom" json:"scan_from,omitempty"`
}

func (m *ImportPrivateKeyRequest) Reset()                    { *m = ImportPrivateKeyRequest{} }
func (m *ImportPrivateKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*ImportPrivateKeyRequest) ProtoMessage()               {}
func (*ImportPrivateKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ImportPrivateKeyRequest) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

func (m *ImportPrivateKeyRequest) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *ImportPrivateKeyRequest) GetPrivateKeyWif() string {
	if m != nil {
		return m.PrivateKeyWif
	}
	return ""
}

func (m *ImportPrivateKeyRequest) GetRescan() bool {
	if m != nil {
		return m.Rescan
	}
	return false
}

func (m *ImportPrivateKeyRequest) GetScanFrom() int32 {
	if m != nil {
		return m.ScanFrom
	}
	return 0
}

type ImportPrivateKeyResponse struct {
}

func (m *ImportPrivateKeyResponse) Reset()                    { *m = ImportPrivateKeyResponse{} }
func (m *ImportPrivateKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*ImportPrivateKeyResponse) ProtoMessage()               {}
func (*ImportPrivateKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type ImportScriptRequest struct {
	Passphrase        []byte `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	Script            []byte `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	Rescan            bool   `protobuf:"varint,3,opt,name=rescan" json:"rescan,omitempty"`
	ScanFrom          int32  `protobuf:"varint,4,opt,name=scan_from,json=scanFrom" json:"scan_from,omitempty"`
	RequireRedeemable bool   `protobuf:"varint,5,opt,name=require_redeemable,json=requireRedeemable" json:"require_redeemable,omitempty"`
}

func (m *ImportScriptRequest) Reset()                    { *m = ImportScriptRequest{} }
func (m *ImportScriptRequest) String() string            { return proto.CompactTextString(m) }
func (*ImportScriptRequest) ProtoMessage()               {}
func (*ImportScriptRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ImportScriptRequest) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

func (m *ImportScriptRequest) GetScript() []byte {
	if m != nil {
		return m.Script
	}
	return nil
}

func (m *ImportScriptRequest) GetRescan() bool {
	if m != nil {
		return m.Rescan
	}
	return false
}

func (m *ImportScriptRequest) GetScanFrom() int32 {
	if m != nil {
		return m.ScanFrom
	}
	return 0
}

func (m *ImportScriptRequest) GetRequireRedeemable() bool {
	if m != nil {
		return m.RequireRedeemable
	}
	return false
}

type ImportScriptResponse struct {
	P2ShAddress string `protobuf:"bytes,1,opt,name=p2sh_address,json=p2shAddress" json:"p2sh_address,omitempty"`
	Redeemable  bool   `protobuf:"varint,2,opt,name=redeemable" json:"redeemable,omitempty"`
}

func (m *ImportScriptResponse) Reset()                    { *m = ImportScriptResponse{} }
func (m *ImportScriptResponse) String() string            { return proto.CompactTextString(m) }
func (*ImportScriptResponse) ProtoMessage()               {}
func (*ImportScriptResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ImportScriptResponse) GetP2ShAddress() string {
	if m != nil {
		return m.P2ShAddress
	}
	return ""
}

func (m *ImportScriptResponse) GetRedeemable() bool {
	if m != nil {
		return m.Redeemable
	}
	return false
}

type BalanceRequest struct {
	AccountNumber         uint32 `protobuf:"varint,1,opt,name=account_number,json=accountNumber" json:"account_number,omitempty"`
	RequiredConfirmations int32  `protobuf:"varint,2,opt,name=required_confirmations,json=requiredConfirmations" json:"required_confirmations,omitempty"`
}

func (m *BalanceRequest) Reset()                    { *m = BalanceRequest{} }
func (m *BalanceRequest) String() string            { return proto.CompactTextString(m) }
func (*BalanceRequest) ProtoMessage()               {}
func (*BalanceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *BalanceRequest) GetAccountNumber() uint32 {
	if m != nil {
		return m.AccountNumber
	}
	return 0
}

func (m *BalanceRequest) GetRequiredConfirmations() int32 {
	if m != nil {
		return m.RequiredConfirmations
	}
	return 0
}

type BalanceResponse struct {
	Total                   int64 `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Spendable               int64 `protobuf:"varint,2,opt,name=spendable" json:"spendable,omitempty"`
	ImmatureReward          int64 `protobuf:"varint,3,opt,name=immature_reward,json=immatureReward" json:"immature_reward,omitempty"`
	ImmatureStakeGeneration int64 `protobuf:"varint,4,opt,name=immature_stake_generation,json=immatureStakeGeneration" json:"immature_stake_generation,omitempty"`
	LockedByTickets         int64 `protobuf:"varint,5,opt,name=locked_by_tickets,json=lockedByTickets" json:"locked_by_tickets,omitempty"`
	VotingAuthority         int64 `protobuf:"varint,6,opt,name=voting_authority,json=votingAuthority" json:"voting_authority,omitempty"`
	Unconfirmed             int64 `protobuf:"varint,7,opt,name=unconfirmed" json:"unconfirmed,omitempty"`
}

func (m *BalanceResponse) Reset()                    { *m = BalanceResponse{} }
func (m *BalanceResponse) String() string            { return proto.CompactTextString(m) }
func (*BalanceResponse) ProtoMessage()               {}
func (*BalanceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *BalanceResponse) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *BalanceResponse) GetSpendable() int64 {
	if m != nil {
		return m.Spendable
	}
	return 0
}

func (m *BalanceResponse) GetImmatureReward() int64 {
	if m != nil {
		return m.ImmatureReward
	}
	return 0
}

func (m *BalanceResponse) GetImmatureStakeGeneration() int64 {
	if m != nil {
		return m.ImmatureStakeGeneration
	}
	return 0
}

func (m *BalanceResponse) GetLockedByTickets() int64 {
	if m != nil {
		return m.LockedByTickets
	}
	return 0
}

func (m *BalanceResponse) GetVotingAuthority() int64 {
	if m != nil {
		return m.VotingAuthority
	}
	return 0
}

func (m *BalanceResponse) GetUnconfirmed() int64 {
	if m != nil {
		return m.Unconfirmed
	}
	return 0
}

type GetTransactionRequest struct {
	TransactionHash []byte `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
}

func (m *GetTransactionRequest) Reset()                    { *m = GetTransactionRequest{} }
func (m *GetTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionRequest) ProtoMessage()               {}
func (*GetTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *GetTransactionRequest) GetTransactionHash() []byte {
	if m != nil {
		return m.TransactionHash
	}
	return nil
}

type GetTransactionResponse struct {
	Transaction *TransactionDetails `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
}

func (m *GetTransactionResponse) Reset()                    { *m = GetTransactionResponse{} }
func (m *GetTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionResponse) ProtoMessage()               {}
func (*GetTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *GetTransactionResponse) GetTransaction() *TransactionDetails {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type GetTransactionsRequest struct {
	// Optionally specify the starting block from which to begin including all transactions.
	// Either the starting block hash or height may be specified, but not both.
	// If a block height is specified and is negative, the absolute value becomes the number of
	// last blocks to include.  That is, given a current chain height of 1000 and a starting block
	// height of -3, transaction notifications will be created for blocks 998, 999, and 1000.
	// If both options are excluded, transaction results are created for transactions since the
	// genesis block.
	StartingBlockHash   []byte `protobuf:"bytes,1,opt,name=starting_block_hash,json=startingBlockHash,proto3" json:"starting_block_hash,omitempty"`
	StartingBlockHeight int32  `protobuf:"zigzag32,2,opt,name=starting_block_height,json=startingBlockHeight" json:"starting_block_height,omitempty"`
	// Optionally specify the last block that transaction results may appear in.
	// Either the ending block hash or height may be specified, but not both.
	// If both are excluded, transaction results are created for all transactions
	// through the best block, and include all unmined transactions.
	EndingBlockHash   []byte `protobuf:"bytes,3,opt,name=ending_block_hash,json=endingBlockHash,proto3" json:"ending_block_hash,omitempty"`
	EndingBlockHeight int32  `protobuf:"varint,4,opt,name=ending_block_height,json=endingBlockHeight" json:"ending_block_height,omitempty"`
	// Include at least this many of the newest transactions if they exist.
	// Cannot be used when the ending block hash is specified.
	//
	// TODO: remove until spec adds it back in some way.
	MinimumRecentTransactions int32 `protobuf:"varint,5,opt,name=minimum_recent_transactions,json=minimumRecentTransactions" json:"minimum_recent_transactions,omitempty"`
}

func (m *GetTransactionsRequest) Reset()                    { *m = GetTransactionsRequest{} }
func (m *GetTransactionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionsRequest) ProtoMessage()               {}
func (*GetTransactionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *GetTransactionsRequest) GetStartingBlockHash() []byte {
	if m != nil {
		return m.StartingBlockHash
	}
	return nil
}

func (m *GetTransactionsRequest) GetStartingBlockHeight() int32 {
	if m != nil {
		return m.StartingBlockHeight
	}
	return 0
}

func (m *GetTransactionsRequest) GetEndingBlockHash() []byte {
	if m != nil {
		return m.EndingBlockHash
	}
	return nil
}

func (m *GetTransactionsRequest) GetEndingBlockHeight() int32 {
	if m != nil {
		return m.EndingBlockHeight
	}
	return 0
}

func (m *GetTransactionsRequest) GetMinimumRecentTransactions() int32 {
	if m != nil {
		return m.MinimumRecentTransactions
	}
	return 0
}

type GetTransactionsResponse struct {
	MinedTransactions   *BlockDetails         `protobuf:"bytes,1,opt,name=mined_transactions,json=minedTransactions" json:"mined_transactions,omitempty"`
	UnminedTransactions []*TransactionDetails `protobuf:"bytes,2,rep,name=unmined_transactions,json=unminedTransactions" json:"unmined_transactions,omitempty"`
}

func (m *GetTransactionsResponse) Reset()                    { *m = GetTransactionsResponse{} }
func (m *GetTransactionsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionsResponse) ProtoMessage()               {}
func (*GetTransactionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *GetTransactionsResponse) GetMinedTransactions() *BlockDetails {
	if m != nil {
		return m.MinedTransactions
	}
	return nil
}

func (m *GetTransactionsResponse) GetUnminedTransactions() []*TransactionDetails {
	if m != nil {
		return m.UnminedTransactions
	}
	return nil
}

type GetTicketsRequest struct {
	StartingBlockHash   []byte `protobuf:"bytes,1,opt,name=starting_block_hash,json=startingBlockHash,proto3" json:"starting_block_hash,omitempty"`
	StartingBlockHeight int32  `protobuf:"zigzag32,2,opt,name=starting_block_height,json=startingBlockHeight" json:"starting_block_height,omitempty"`
	EndingBlockHash     []byte `protobuf:"bytes,3,opt,name=ending_block_hash,json=endingBlockHash,proto3" json:"ending_block_hash,omitempty"`
	EndingBlockHeight   int32  `protobuf:"varint,4,opt,name=ending_block_height,json=endingBlockHeight" json:"ending_block_height,omitempty"`
}

func (m *GetTicketsRequest) Reset()                    { *m = GetTicketsRequest{} }
func (m *GetTicketsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTicketsRequest) ProtoMessage()               {}
func (*GetTicketsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *GetTicketsRequest) GetStartingBlockHash() []byte {
	if m != nil {
		return m.StartingBlockHash
	}
	return nil
}

func (m *GetTicketsRequest) GetStartingBlockHeight() int32 {
	if m != nil {
		return m.StartingBlockHeight
	}
	return 0
}

func (m *GetTicketsRequest) GetEndingBlockHash() []byte {
	if m != nil {
		return m.EndingBlockHash
	}
	return nil
}

func (m *GetTicketsRequest) GetEndingBlockHeight() int32 {
	if m != nil {
		return m.EndingBlockHeight
	}
	return 0
}

type GetTicketsResponse struct {
	Ticket *GetTicketsResponse_TicketDetails `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
}

func (m *GetTicketsResponse) Reset()                    { *m = GetTicketsResponse{} }
func (m *GetTicketsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTicketsResponse) ProtoMessage()               {}
func (*GetTicketsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *GetTicketsResponse) GetTicket() *GetTicketsResponse_TicketDetails {
	if m != nil {
		return m.Ticket
	}
	return nil
}

type GetTicketsResponse_TicketDetails struct {
	Ticket       *TransactionDetails                           `protobuf:"bytes,1,opt,name=ticket" json:"ticket,omitempty"`
	Spender      *TransactionDetails                           `protobuf:"bytes,2,opt,name=spender" json:"spender,omitempty"`
	TicketStatus GetTicketsResponse_TicketDetails_TicketStatus `protobuf:"varint,3,opt,name=ticket_status,json=ticketStatus,enum=walletrpc.GetTicketsResponse_TicketDetails_TicketStatus" json:"ticket_status,omitempty"`
}

func (m *GetTicketsResponse_TicketDetails) Reset()         { *m = GetTicketsResponse_TicketDetails{} }
func (m *GetTicketsResponse_TicketDetails) String() string { return proto.CompactTextString(m) }
func (*GetTicketsResponse_TicketDetails) ProtoMessage()    {}
func (*GetTicketsResponse_TicketDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{32, 0}
}

func (m *GetTicketsResponse_TicketDetails) GetTicket() *TransactionDetails {
	if m != nil {
		return m.Ticket
	}
	return nil
}

func (m *GetTicketsResponse_TicketDetails) GetSpender() *TransactionDetails {
	if m != nil {
		return m.Spender
	}
	return nil
}

func (m *GetTicketsResponse_TicketDetails) GetTicketStatus() GetTicketsResponse_TicketDetails_TicketStatus {
	if m != nil {
		return m.TicketStatus
	}
	return GetTicketsResponse_TicketDetails_UNKNOWN
}

type TicketPriceRequest struct {
}

func (m *TicketPriceRequest) Reset()                    { *m = TicketPriceRequest{} }
func (m *TicketPriceRequest) String() string            { return proto.CompactTextString(m) }
func (*TicketPriceRequest) ProtoMessage()               {}
func (*TicketPriceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

type TicketPriceResponse struct {
	TicketPrice int64 `protobuf:"varint,1,opt,name=ticket_price,json=ticketPrice" json:"ticket_price,omitempty"`
	Height      int32 `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
}

func (m *TicketPriceResponse) Reset()                    { *m = TicketPriceResponse{} }
func (m *TicketPriceResponse) String() string            { return proto.CompactTextString(m) }
func (*TicketPriceResponse) ProtoMessage()               {}
func (*TicketPriceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *TicketPriceResponse) GetTicketPrice() int64 {
	if m != nil {
		return m.TicketPrice
	}
	return 0
}

func (m *TicketPriceResponse) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type StakeInfoRequest struct {
}

func (m *StakeInfoRequest) Reset()                    { *m = StakeInfoRequest{} }
func (m *StakeInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*StakeInfoRequest) ProtoMessage()               {}
func (*StakeInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

type StakeInfoResponse struct {
	PoolSize      uint32 `protobuf:"varint,1,opt,name=pool_size,json=poolSize" json:"pool_size,omitempty"`
	AllMempoolTix uint32 `protobuf:"varint,2,opt,name=all_mempool_tix,json=allMempoolTix" json:"all_mempool_tix,omitempty"`
	OwnMempoolTix uint32 `protobuf:"varint,3,opt,name=own_mempool_tix,json=ownMempoolTix" json:"own_mempool_tix,omitempty"`
	Immature      uint32 `protobuf:"varint,4,opt,name=immature" json:"immature,omitempty"`
	Live          uint32 `protobuf:"varint,5,opt,name=live" json:"live,omitempty"`
	Voted         uint32 `protobuf:"varint,6,opt,name=voted" json:"voted,omitempty"`
	Missed        uint32 `protobuf:"varint,7,opt,name=missed" json:"missed,omitempty"`
	Revoked       uint32 `protobuf:"varint,8,opt,name=revoked" json:"revoked,omitempty"`
	Expired       uint32 `protobuf:"varint,9,opt,name=expired" json:"expired,omitempty"`
	TotalSubsidy  int64  `protobuf:"varint,10,opt,name=total_subsidy,json=totalSubsidy" json:"total_subsidy,omitempty"`
}

func (m *StakeInfoResponse) Reset()                    { *m = StakeInfoResponse{} }
func (m *StakeInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*StakeInfoResponse) ProtoMessage()               {}
func (*StakeInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *StakeInfoResponse) GetPoolSize() uint32 {
	if m != nil {
		return m.PoolSize
	}
	return 0
}

func (m *StakeInfoResponse) GetAllMempoolTix() uint32 {
	if m != nil {
		return m.AllMempoolTix
	}
	return 0
}

func (m *StakeInfoResponse) GetOwnMempoolTix() uint32 {
	if m != nil {
		return m.OwnMempoolTix
	}
	return 0
}

func (m *StakeInfoResponse) GetImmature() uint32 {
	if m != nil {
		return m.Immature
	}
	return 0
}

func (m *StakeInfoResponse) GetLive() uint32 {
	if m != nil {
		return m.Live
	}
	return 0
}

func (m *StakeInfoResponse) GetVoted() uint32 {
	if m != nil {
		return m.Voted
	}
	return 0
}

func (m *StakeInfoResponse) GetMissed() uint32 {
	if m != nil {
		return m.Missed
	}
	return 0
}

func (m *StakeInfoResponse) GetRevoked() uint32 {
	if m != nil {
		return m.Revoked
	}
	return 0
}

func (m *StakeInfoResponse) GetExpired() uint32 {
	if m != nil {
		return m.Expired
	}
	return 0
}

func (m *StakeInfoResponse) GetTotalSubsidy() int64 {
	if m != nil {
		return m.TotalSubsidy
	}
	return 0
}

type BlockInfoRequest struct {
	BlockHash   []byte `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockHeight int32  `protobuf:"varint,2,opt,name=block_height,json=blockHeight" json:"block_height,omitempty"`
}

func (m *BlockInfoRequest) Reset()                    { *m = BlockInfoRequest{} }
func (m *BlockInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*BlockInfoRequest) ProtoMessage()               {}
func (*BlockInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *BlockInfoRequest) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *BlockInfoRequest) GetBlockHeight() int32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type BlockInfoResponse struct {
	BlockHash        []byte `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockHeight      int32  `protobuf:"varint,2,opt,name=block_height,json=blockHeight" json:"block_height,omitempty"`
	Confirmations    int32  `protobuf:"varint,3,opt,name=confirmations" json:"confirmations,omitempty"`
	Timestamp        int64  `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	BlockHeader      []byte `protobuf:"bytes,5,opt,name=block_header,json=blockHeader,proto3" json:"block_header,omitempty"`
	StakeInvalidated bool   `protobuf:"varint,6,opt,name=stake_invalidated,json=stakeInvalidated" json:"stake_invalidated,omitempty"`
}

func (m *BlockInfoResponse) Reset()                    { *m = BlockInfoResponse{} }
func (m *BlockInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*BlockInfoResponse) ProtoMessage()               {}
func (*BlockInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *BlockInfoResponse) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *BlockInfoResponse) GetBlockHeight() int32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *BlockInfoResponse) GetConfirmations() int32 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *BlockInfoResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockInfoResponse) GetBlockHeader() []byte {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

func (m *BlockInfoResponse) GetStakeInvalidated() bool {
	if m != nil {
		return m.StakeInvalidated
	}
	return false
}

type ChangePassphraseRequest struct {
	Key           ChangePassphraseRequest_Key `protobuf:"varint,1,opt,name=key,enum=walletrpc.ChangePassphraseRequest_Key" json:"key,omitempty"`
	OldPassphrase []byte                      `protobuf:"bytes,2,opt,name=old_passphrase,json=oldPassphrase,proto3" json:"old_passphrase,omitempty"`
	NewPassphrase []byte                      `protobuf:"bytes,3,opt,name=new_passphrase,json=newPassphrase,proto3" json:"new_passphrase,omitempty"`
}

func (m *ChangePassphraseRequest) Reset()                    { *m = ChangePassphraseRequest{} }
func (m *ChangePassphraseRequest) String() string            { return proto.CompactTextString(m) }
func (*ChangePassphraseRequest) ProtoMessage()               {}
func (*ChangePassphraseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *ChangePassphraseRequest) GetKey() ChangePassphraseRequest_Key {
	if m != nil {
		return m.Key
	}
	return ChangePassphraseRequest_PRIVATE
}

func (m *ChangePassphraseRequest) GetOldPassphrase() []byte {
	if m != nil {
		return m.OldPassphrase
	}
	return nil
}

func (m *ChangePassphraseRequest) GetNewPassphrase() []byte {
	if m != nil {
		return m.NewPassphrase
	}
	return nil
}

type ChangePassphraseResponse struct {
}

func (m *ChangePassphraseResponse) Reset()                    { *m = ChangePassphraseResponse{} }
func (m *ChangePassphraseResponse) String() string            { return proto.CompactTextString(m) }
func (*ChangePassphraseResponse) ProtoMessage()               {}
func (*ChangePassphraseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

type FundTransactionRequest struct {
	Account                  uint32 `protobuf:"varint,1,opt,name=account" json:"account,omitempty"`
	TargetAmount             int64  `protobuf:"varint,2,opt,name=target_amount,json=targetAmount" json:"target_amount,omitempty"`
	RequiredConfirmations    int32  `protobuf:"varint,3,opt,name=required_confirmations,json=requiredConfirmations" json:"required_confirmations,omitempty"`
	IncludeImmatureCoinbases bool   `protobuf:"varint,4,opt,name=include_immature_coinbases,json=includeImmatureCoinbases" json:"include_immature_coinbases,omitempty"`
	IncludeChangeScript      bool   `protobuf:"varint,5,opt,name=include_change_script,json=includeChangeScript" json:"include_change_script,omitempty"`
}

func (m *FundTransactionRequest) Reset()                    { *m = FundTransactionRequest{} }
func (m *FundTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*FundTransactionRequest) ProtoMessage()               {}
func (*FundTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *FundTransactionRequest) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *FundTransactionRequest) GetTargetAmount() int64 {
	if m != nil {
		return m.TargetAmount
	}
	return 0
}

func (m *FundTransactionRequest) GetRequiredConfirmations() int32 {
	if m != nil {
		return m.RequiredConfirmations
	}
	return 0
}

func (m *FundTransactionRequest) GetIncludeImmatureCoinbases() bool {
	if m != nil {
		return m.IncludeImmatureCoinbases
	}
	return false
}

func (m *FundTransactionRequest) GetIncludeChangeScript() bool {
	if m != nil {
		return m.IncludeChangeScript
	}
	return false
}

type FundTransactionResponse struct {
	SelectedOutputs []*FundTransactionResponse_PreviousOutput `protobuf:"bytes,1,rep,name=selected_outputs,json=selectedOutputs" json:"selected_outputs,omitempty"`
	TotalAmount     int64                                     `protobuf:"varint,2,opt,name=total_amount,json=totalAmount" json:"total_amount,omitempty"`
	ChangePkScript  []byte                                    `protobuf:"bytes,3,opt,name=change_pk_script,json=changePkScript,proto3" json:"change_pk_script,omitempty"`
}

func (m *FundTransactionResponse) Reset()                    { *m = FundTransactionResponse{} }
func (m *FundTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*FundTransactionResponse) ProtoMessage()               {}
func (*FundTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *FundTransactionResponse) GetSelectedOutputs() []*FundTransactionResponse_PreviousOutput {
	if m != nil {
		return m.SelectedOutputs
	}
	return nil
}

func (m *FundTransactionResponse) GetTotalAmount() int64 {
	if m != nil {
		return m.TotalAmount
	}
	return 0
}

func (m *FundTransactionResponse) GetChangePkScript() []byte {
	if m != nil {
		return m.ChangePkScript
	}
	return nil
}

type FundTransactionResponse_PreviousOutput struct {
	TransactionHash []byte `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	OutputIndex     uint32 `protobuf:"varint,2,opt,name=output_index,json=outputIndex" json:"output_index,omitempty"`
	Amount          int64  `protobuf:"varint,3,opt,name=amount" json:"amount,omitempty"`
	PkScript        []byte `protobuf:"bytes,4,opt,name=pk_script,json=pkScript,proto3" json:"pk_script,omitempty"`
	ReceiveTime     int64  `protobuf:"varint,5,opt,name=receive_time,json=receiveTime" json:"receive_time,omitempty"`
	FromCoinbase    bool   `protobuf:"varint,6,opt,name=from_coinbase,json=fromCoinbase" json:"from_coinbase,omitempty"`
	Tree            int32  `protobuf:"varint,7,opt,name=tree" json:"tree,omitempty"`
}

func (m *FundTransactionResponse_PreviousOutput) Reset() {
	*m = FundTransactionResponse_PreviousOutput{}
}
func (m *FundTransactionResponse_PreviousOutput) String() string { return proto.CompactTextString(m) }
func (*FundTransactionResponse_PreviousOutput) ProtoMessage()    {}
func (*FundTransactionResponse_PreviousOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{42, 0}
}

func (m *FundTransactionResponse_PreviousOutput) GetTransactionHash() []byte {
	if m != nil {
		return m.TransactionHash
	}
	return nil
}

func (m *FundTransactionResponse_PreviousOutput) GetOutputIndex() uint32 {
	if m != nil {
		return m.OutputIndex
	}
	return 0
}

func (m *FundTransactionResponse_PreviousOutput) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *FundTransactionResponse_PreviousOutput) GetPkScript() []byte {
	if m != nil {
		return m.PkScript
	}
	return nil
}

func (m *FundTransactionResponse_PreviousOutput) GetReceiveTime() int64 {
	if m != nil {
		return m.ReceiveTime
	}
	return 0
}

func (m *FundTransactionResponse_PreviousOutput) GetFromCoinbase() bool {
	if m != nil {
		return m.FromCoinbase
	}
	return false
}

func (m *FundTransactionResponse_PreviousOutput) GetTree() int32 {
	if m != nil {
		return m.Tree
	}
	return 0
}

type ConstructTransactionRequest struct {
	SourceAccount            uint32                                               `protobuf:"varint,1,opt,name=source_account,json=sourceAccount" json:"source_account,omitempty"`
	RequiredConfirmations    int32                                                `protobuf:"varint,2,opt,name=required_confirmations,json=requiredConfirmations" json:"required_confirmations,omitempty"`
	FeePerKb                 int32                                                `protobuf:"varint,3,opt,name=fee_per_kb,json=feePerKb" json:"fee_per_kb,omitempty"`
	OutputSelectionAlgorithm ConstructTransactionRequest_OutputSelectionAlgorithm `protobuf:"varint,4,opt,name=output_selection_algorithm,json=outputSelectionAlgorithm,enum=walletrpc.ConstructTransactionRequest_OutputSelectionAlgorithm" json:"output_selection_algorithm,omitempty"`
	NonChangeOutputs         []*ConstructTransactionRequest_Output                `protobuf:"bytes,5,rep,name=non_change_outputs,json=nonChangeOutputs" json:"non_change_outputs,omitempty"`
	ChangeDestination        *ConstructTransactionRequest_OutputDestination       `protobuf:"bytes,6,opt,name=change_destination,json=changeDestination" json:"change_destination,omitempty"`
}

func (m *ConstructTransactionRequest) Reset()                    { *m = ConstructTransactionRequest{} }
func (m *ConstructTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*ConstructTransactionRequest) ProtoMessage()               {}
func (*ConstructTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *ConstructTransactionRequest) GetSourceAccount() uint32 {
	if m != nil {
		return m.SourceAccount
	}
	return 0
}

func (m *ConstructTransactionRequest) GetRequiredConfirmations() int32 {
	if m != nil {
		return m.RequiredConfirmations
	}
	return 0
}

func (m *ConstructTransactionRequest) GetFeePerKb() int32 {
	if m != nil {
		return m.FeePerKb
	}
	return 0
}

func (m *ConstructTransactionRequest) GetOutputSelectionAlgorithm() ConstructTransactionRequest_OutputSelectionAlgorithm {
	if m != nil {
		return m.OutputSelectionAlgorithm
	}
	return ConstructTransactionRequest_UNSPECIFIED
}

func (m *ConstructTransactionRequest) GetNonChangeOutputs() []*ConstructTransactionRequest_Output {
	if m != nil {
		return m.NonChangeOutputs
	}
	return nil
}

func (m *ConstructTransactionRequest) GetChangeDestination() *ConstructTransactionRequest_OutputDestination {
	if m != nil {
		return m.ChangeDestination
	}
	return nil
}

type ConstructTransactionRequest_OutputDestination struct {
	Address       string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Script        []byte `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	ScriptVersion uint32 `protobuf:"varint,3,opt,name=script_version,json=scriptVersion" json:"script_version,omitempty"`
}

func (m *ConstructTransactionRequest_OutputDestination) Reset() {
	*m = ConstructTransactionRequest_OutputDestination{}
}
func (m *ConstructTransactionRequest_OutputDestination) String() string {
	return proto.CompactTextString(m)
}
func (*ConstructTransactionRequest_OutputDestination) ProtoMessage() {}
func (*ConstructTransactionRequest_OutputDestination) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{43, 0}
}

func (m *ConstructTransactionRequest_OutputDestination) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ConstructTransactionRequest_OutputDestination) GetScript() []byte {
	if m != nil {
		return m.Script
	}
	return nil
}

func (m *ConstructTransactionRequest_OutputDestination) GetScriptVersion() uint32 {
	if m != nil {
		return m.ScriptVersion
	}
	return 0
}

type ConstructTransactionRequest_Output struct {
	Destination *ConstructTransactionRequest_OutputDestination `protobuf:"bytes,1,opt,name=destination" json:"destination,omitempty"`
	Amount      int64                                          `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *ConstructTransactionRequest_Output) Reset()         { *m = ConstructTransactionRequest_Output{} }
func (m *ConstructTransactionRequest_Output) String() string { return proto.CompactTextString(m) }
func (*ConstructTransactionRequest_Output) ProtoMessage()    {}
func (*ConstructTransactionRequest_Output) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{43, 1}
}

func (m *ConstructTransactionRequest_Output) GetDestination() *ConstructTransactionRequest_OutputDestination {
	if m != nil {
		return m.Destination
	}
	return nil
}

func (m *ConstructTransactionRequest_Output) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type ConstructTransactionResponse struct {
	UnsignedTransaction       []byte `protobuf:"bytes,1,opt,name=unsigned_transaction,json=unsignedTransaction,proto3" json:"unsigned_transaction,omitempty"`
	TotalPreviousOutputAmount int64  `protobuf:"varint,2,opt,name=total_previous_output_amount,json=totalPreviousOutputAmount" json:"total_previous_output_amount,omitempty"`
	TotalOutputAmount         int64  `protobuf:"varint,3,opt,name=total_output_amount,json=totalOutputAmount" json:"total_output_amount,omitempty"`
	EstimatedSignedSize       uint32 `protobuf:"varint,4,opt,name=estimated_signed_size,json=estimatedSignedSize" json:"estimated_signed_size,omitempty"`
}

func (m *ConstructTransactionResponse) Reset()                    { *m = ConstructTransactionResponse{} }
func (m *ConstructTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*ConstructTransactionResponse) ProtoMessage()               {}
func (*ConstructTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *ConstructTransactionResponse) GetUnsignedTransaction() []byte {
	if m != nil {
		return m.UnsignedTransaction
	}
	return nil
}

func (m *ConstructTransactionResponse) GetTotalPreviousOutputAmount() int64 {
	if m != nil {
		return m.TotalPreviousOutputAmount
	}
	return 0
}

func (m *ConstructTransactionResponse) GetTotalOutputAmount() int64 {
	if m != nil {
		return m.TotalOutputAmount
	}
	return 0
}

func (m *ConstructTransactionResponse) GetEstimatedSignedSize() uint32 {
	if m != nil {
		return m.EstimatedSignedSize
	}
	return 0
}

type SignTransactionRequest struct {
	Passphrase            []byte `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	SerializedTransaction []byte `protobuf:"bytes,2,opt,name=serialized_transaction,json=serializedTransaction,proto3" json:"serialized_transaction,omitempty"`
	// If no indexes are specified, signatures scripts will be added for
	// every input. If any input indexes are specified, only those inputs
	// will be signed.  Rather than returning an incompletely signed
	// transaction if any of the inputs to be signed can not be, the RPC
	// immediately errors.
	InputIndexes      []uint32                                   `protobuf:"varint,3,rep,packed,name=input_indexes,json=inputIndexes" json:"input_indexes,omitempty"`
	AdditionalScripts []*SignTransactionRequest_AdditionalScript `protobuf:"bytes,4,rep,name=additional_scripts,json=additionalScripts" json:"additional_scripts,omitempty"`
}

func (m *SignTransactionRequest) Reset()                    { *m = SignTransactionRequest{} }
func (m *SignTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*SignTransactionRequest) ProtoMessage()               {}
func (*SignTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *SignTransactionRequest) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

func (m *SignTransactionRequest) GetSerializedTransaction() []byte {
	if m != nil {
		return m.SerializedTransaction
	}
	return nil
}

func (m *SignTransactionRequest) GetInputIndexes() []uint32 {
	if m != nil {
		return m.InputIndexes
	}
	return nil
}

func (m *SignTransactionRequest) GetAdditionalScripts() []*SignTransactionRequest_AdditionalScript {
	if m != nil {
		return m.AdditionalScripts
	}
	return nil
}

type SignTransactionRequest_AdditionalScript struct {
	TransactionHash []byte `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	OutputIndex     uint32 `protobuf:"varint,2,opt,name=output_index,json=outputIndex" json:"output_index,omitempty"`
	Tree            int32  `protobuf:"varint,3,opt,name=tree" json:"tree,omitempty"`
	PkScript        []byte `protobuf:"bytes,4,opt,name=pk_script,json=pkScript,proto3" json:"pk_script,omitempty"`
}

func (m *SignTransactionRequest_AdditionalScript) Reset() {
	*m = SignTransactionRequest_AdditionalScript{}
}
func (m *SignTransactionRequest_AdditionalScript) String() string { return proto.CompactTextString(m) }
func (*SignTransactionRequest_AdditionalScript) ProtoMessage()    {}
func (*SignTransactionRequest_AdditionalScript) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{45, 0}
}

func (m *SignTransactionRequest_AdditionalScript) GetTransactionHash() []byte {
	if m != nil {
		return m.TransactionHash
	}
	return nil
}

func (m *SignTransactionRequest_AdditionalScript) GetOutputIndex() uint32 {
	if m != nil {
		return m.OutputIndex
	}
	return 0
}

func (m *SignTransactionRequest_AdditionalScript) GetTree() int32 {
	if m != nil {
		return m.Tree
	}
	return 0
}

func (m *SignTransactionRequest_AdditionalScript) GetPkScript() []byte {
	if m != nil {
		return m.PkScript
	}
	return nil
}

type SignTransactionResponse struct {
	Transaction          []byte   `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	UnsignedInputIndexes []uint32 `protobuf:"varint,2,rep,packed,name=unsigned_input_indexes,json=unsignedInputIndexes" json:"unsigned_input_indexes,omitempty"`
}

func (m *SignTransactionResponse) Reset()                    { *m = SignTransactionResponse{} }
func (m *SignTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*SignTransactionResponse) ProtoMessage()               {}
func (*SignTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *SignTransactionResponse) GetTransaction() []byte {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *SignTransactionResponse) GetUnsignedInputIndexes() []uint32 {
	if m != nil {
		return m.UnsignedInputIndexes
	}
	return nil
}

type CreateSignatureRequest struct {
	Passphrase            []byte                             `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	Address               string                             `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	SerializedTransaction []byte                             `protobuf:"bytes,3,opt,name=serialized_transaction,json=serializedTransaction,proto3" json:"serialized_transaction,omitempty"`
	InputIndex            uint32                             `protobuf:"varint,4,opt,name=input_index,json=inputIndex" json:"input_index,omitempty"`
	HashType              CreateSignatureRequest_SigHashType `protobuf:"varint,5,opt,name=hash_type,json=hashType,enum=walletrpc.CreateSignatureRequest_SigHashType" json:"hash_type,omitempty"`
	PreviousPkScript      []byte                             `protobuf:"bytes,6,opt,name=previous_pk_script,json=previousPkScript,proto3" json:"previous_pk_script,omitempty"`
}

func (m *CreateSignatureRequest) Reset()                    { *m = CreateSignatureRequest{} }
func (m *CreateSignatureRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSignatureRequest) ProtoMessage()               {}
func (*CreateSignatureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *CreateSignatureRequest) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

func (m *CreateSignatureRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CreateSignatureRequest) GetSerializedTransaction() []byte {
	if m != nil {
		return m.SerializedTransaction
	}
	return nil
}

func (m *CreateSignatureRequest) GetInputIndex() uint32 {
	if m != nil {
		return m.InputIndex
	}
	return 0
}

func (m *CreateSignatureRequest) GetHashType() CreateSignatureRequest_SigHashType {
	if m != nil {
		return m.HashType
	}
	return CreateSignatureRequest_SIGHASH_OLD
}

func (m *CreateSignatureRequest) GetPreviousPkScript() []byte {
	if m != nil {
		return m.PreviousPkScript
	}
	return nil
}

type CreateSignatureResponse struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	PublicKey []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *CreateSignatureResponse) Reset()                    { *m = CreateSignatureResponse{} }
func (m *CreateSignatureResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateSignatureResponse) ProtoMessage()               {}
func (*CreateSignatureResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *CreateSignatureResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *CreateSignatureResponse) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type PublishTransactionRequest struct {
	SignedTransaction []byte `protobuf:"bytes,1,opt,name=signed_transaction,json=signedTransaction,proto3" json:"signed_transaction,omitempty"`
}

func (m *PublishTransactionRequest) Reset()                    { *m = PublishTransactionRequest{} }
func (m *PublishTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishTransactionRequest) ProtoMessage()               {}
func (*PublishTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *PublishTransactionRequest) GetSignedTransaction() []byte {
	if m != nil {
		return m.SignedTransaction
	}
	return nil
}

type PublishTransactionResponse struct {
	TransactionHash []byte `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
}

func (m *PublishTransactionResponse) Reset()                    { *m = PublishTransactionResponse{} }
func (m *PublishTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishTransactionResponse) ProtoMessage()               {}
func (*PublishTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *PublishTransactionResponse) GetTransactionHash() []byte {
	if m != nil {
		return m.TransactionHash
	}
	return nil
}

type PurchaseTicketsRequest struct {
	Passphrase            []byte  `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	Account               uint32  `protobuf:"varint,2,opt,name=account" json:"account,omitempty"`
	SpendLimit            int64   `protobuf:"varint,3,opt,name=spend_limit,json=spendLimit" json:"spend_limit,omitempty"`
	RequiredConfirmations uint32  `protobuf:"varint,4,opt,name=required_confirmations,json=requiredConfirmations" json:"required_confirmations,omitempty"`
	TicketAddress         string  `protobuf:"bytes,5,opt,name=ticket_address,json=ticketAddress" json:"ticket_address,omitempty"`
	NumTickets            uint32  `protobuf:"varint,6,opt,name=num_tickets,json=numTickets" json:"num_tickets,omitempty"`
	PoolAddress           string  `protobuf:"bytes,7,opt,name=pool_address,json=poolAddress" json:"pool_address,omitempty"`
	PoolFees              float64 `protobuf:"fixed64,8,opt,name=pool_fees,json=poolFees" json:"pool_fees,omitempty"`
	Expiry                uint32  `protobuf:"varint,9,opt,name=expiry" json:"expiry,omitempty"`
	TxFee                 int64   `protobuf:"varint,10,opt,name=tx_fee,json=txFee" json:"tx_fee,omitempty"`
	TicketFee             int64   `protobuf:"varint,11,opt,name=ticket_fee,json=ticketFee" json:"ticket_fee,omitempty"`
	NoSplitTransaction    bool    `protobuf:"varint,12,opt,name=no_split_transaction,json=noSplitTransaction" json:"no_split_transaction,omitempty"`
}

func (m *PurchaseTicketsRequest) Reset()                    { *m = PurchaseTicketsRequest{} }
func (m *PurchaseTicketsRequest) String() string            { return proto.CompactTextString(m) }
func (*PurchaseTicketsRequest) ProtoMessage()               {}
func (*PurchaseTicketsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *PurchaseTicketsRequest) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

func (m *PurchaseTicketsRequest) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *PurchaseTicketsRequest) GetSpendLimit() int64 {
	if m != nil {
		return m.SpendLimit
	}
	return 0
}

func (m *PurchaseTicketsRequest) GetRequiredConfirmations() uint32 {
	if m != nil {
		return m.RequiredConfirmations
	}
	return 0
}

func (m *PurchaseTicketsRequest) GetTicketAddress() string {
	if m != nil {
		return m.TicketAddress
	}
	return ""
}

func (m *PurchaseTicketsRequest) GetNumTickets() uint32 {
	if m != nil {
		return m.NumTickets
	}
	return 0
}

func (m *PurchaseTicketsRequest) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

func (m *PurchaseTicketsRequest) GetPoolFees() float64 {
	if m != nil {
		return m.PoolFees
	}
	return 0
}

func (m *PurchaseTicketsRequest) GetExpiry() uint32 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *PurchaseTicketsRequest) GetTxFee() int64 {
	if m != nil {
		return m.TxFee
	}
	return 0
}

func (m *PurchaseTicketsRequest) GetTicketFee() int64 {
	if m != nil {
		return m.TicketFee
	}
	return 0
}

func (m *PurchaseTicketsRequest) GetNoSplitTransaction() bool {
	if m != nil {
		return m.NoSplitTransaction
	}
	return false
}

type PurchaseTicketsResponse struct {
	TicketHashes [][]byte `protobuf:"bytes,1,rep,name=ticket_hashes,json=ticketHashes,proto3" json:"ticket_hashes,omitempty"`
}

func (m *PurchaseTicketsResponse) Reset()                    { *m = PurchaseTicketsResponse{} }
func (m *PurchaseTicketsResponse) String() string            { return proto.CompactTextString(m) }
func (*PurchaseTicketsResponse) ProtoMessage()               {}
func (*PurchaseTicketsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *PurchaseTicketsResponse) GetTicketHashes() [][]byte {
	if m != nil {
		return m.TicketHashes
	}
	return nil
}

type RevokeTicketsRequest struct {
	Passphrase []byte `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (m *RevokeTicketsRequest) Reset()                    { *m = RevokeTicketsRequest{} }
func (m *RevokeTicketsRequest) String() string            { return proto.CompactTextString(m) }
func (*RevokeTicketsRequest) ProtoMessage()               {}
func (*RevokeTicketsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *RevokeTicketsRequest) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

type RevokeTicketsResponse struct {
}

func (m *RevokeTicketsResponse) Reset()                    { *m = RevokeTicketsResponse{} }
func (m *RevokeTicketsResponse) String() string            { return proto.CompactTextString(m) }
func (*RevokeTicketsResponse) ProtoMessage()               {}
func (*RevokeTicketsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

type LoadActiveDataFiltersRequest struct {
}

func (m *LoadActiveDataFiltersRequest) Reset()                    { *m = LoadActiveDataFiltersRequest{} }
func (m *LoadActiveDataFiltersRequest) String() string            { return proto.CompactTextString(m) }
func (*LoadActiveDataFiltersRequest) ProtoMessage()               {}
func (*LoadActiveDataFiltersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

type LoadActiveDataFiltersResponse struct {
}

func (m *LoadActiveDataFiltersResponse) Reset()                    { *m = LoadActiveDataFiltersResponse{} }
func (m *LoadActiveDataFiltersResponse) String() string            { return proto.CompactTextString(m) }
func (*LoadActiveDataFiltersResponse) ProtoMessage()               {}
func (*LoadActiveDataFiltersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

type SignMessageRequest struct {
	Address    string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Passphrase []byte `protobuf:"bytes,3,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (m *SignMessageRequest) Reset()                    { *m = SignMessageRequest{} }
func (m *SignMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*SignMessageRequest) ProtoMessage()               {}
func (*SignMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *SignMessageRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SignMessageRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SignMessageRequest) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

type SignMessageResponse struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SignMessageResponse) Reset()                    { *m = SignMessageResponse{} }
func (m *SignMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*SignMessageResponse) ProtoMessage()               {}
func (*SignMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *SignMessageResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type TransactionNotificationsRequest struct {
}

func (m *TransactionNotificationsRequest) Reset()         { *m = TransactionNotificationsRequest{} }
func (m *TransactionNotificationsRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionNotificationsRequest) ProtoMessage()    {}
func (*TransactionNotificationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{59}
}

type TransactionNotificationsResponse struct {
	// Sorted by increasing height.  This is a repeated field so many new blocks
	// in a new best chain can be notified at once during a reorganize.
	AttachedBlocks []*BlockDetails `protobuf:"bytes,1,rep,name=attached_blocks,json=attachedBlocks" json:"attached_blocks,omitempty"`
	// If there was a chain reorganize, there may have been blocks with wallet
	// transactions that are no longer in the best chain.  These are those
	// block's hashes.
	DetachedBlocks [][]byte `protobuf:"bytes,2,rep,name=detached_blocks,json=detachedBlocks,proto3" json:"detached_blocks,omitempty"`
	// Any new unmined transactions are included here.  These unmined transactions
	// refer to the current best chain, so transactions from detached blocks may
	// be moved to mempool and included here if they are not mined or double spent
	// in the new chain.  Additonally, if no new blocks were attached but a relevant
	// unmined transaction is seen by the wallet, it will be reported here.
	UnminedTransactions []*TransactionDetails `protobuf:"bytes,3,rep,name=unmined_transactions,json=unminedTransactions" json:"unmined_transactions,omitempty"`
	// Instead of notifying all of the removed unmined transactions,
	// just send all of the current hashes.
	UnminedTransactionHashes [][]byte `protobuf:"bytes,4,rep,name=unmined_transaction_hashes,json=unminedTransactionHashes,proto3" json:"unmined_transaction_hashes,omitempty"`
}

func (m *TransactionNotificationsResponse) Reset()         { *m = TransactionNotificationsResponse{} }
func (m *TransactionNotificationsResponse) String() string { return proto.CompactTextString(m) }
func (*TransactionNotificationsResponse) ProtoMessage()    {}
func (*TransactionNotificationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{60}
}

func (m *TransactionNotificationsResponse) GetAttachedBlocks() []*BlockDetails {
	if m != nil {
		return m.AttachedBlocks
	}
	return nil
}

func (m *TransactionNotificationsResponse) GetDetachedBlocks() [][]byte {
	if m != nil {
		return m.DetachedBlocks
	}
	return nil
}

func (m *TransactionNotificationsResponse) GetUnminedTransactions() []*TransactionDetails {
	if m != nil {
		return m.UnminedTransactions
	}
	return nil
}

func (m *TransactionNotificationsResponse) GetUnminedTransactionHashes() [][]byte {
	if m != nil {
		return m.UnminedTransactionHashes
	}
	return nil
}

type AccountNotificationsRequest struct {
}

func (m *AccountNotificationsRequest) Reset()                    { *m = AccountNotificationsRequest{} }
func (m *AccountNotificationsRequest) String() string            { return proto.CompactTextString(m) }
func (*AccountNotificationsRequest) ProtoMessage()               {}
func (*AccountNotificationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

type AccountNotificationsResponse struct {
	AccountNumber    uint32 `protobuf:"varint,1,opt,name=account_number,json=accountNumber" json:"account_number,omitempty"`
	AccountName      string `protobuf:"bytes,2,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	ExternalKeyCount uint32 `protobuf:"varint,3,opt,name=external_key_count,json=externalKeyCount" json:"external_key_count,omitempty"`
	InternalKeyCount uint32 `protobuf:"varint,4,opt,name=internal_key_count,json=internalKeyCount" json:"internal_key_count,omitempty"`
	ImportedKeyCount uint32 `protobuf:"varint,5,opt,name=imported_key_count,json=importedKeyCount" json:"imported_key_count,omitempty"`
}

func (m *AccountNotificationsResponse) Reset()                    { *m = AccountNotificationsResponse{} }
func (m *AccountNotificationsResponse) String() string            { return proto.CompactTextString(m) }
func (*AccountNotificationsResponse) ProtoMessage()               {}
func (*AccountNotificationsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *AccountNotificationsResponse) GetAccountNumber() uint32 {
	if m != nil {
		return m.AccountNumber
	}
	return 0
}

func (m *AccountNotificationsResponse) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *AccountNotificationsResponse) GetExternalKeyCount() uint32 {
	if m != nil {
		return m.ExternalKeyCount
	}
	return 0
}

func (m *AccountNotificationsResponse) GetInternalKeyCount() uint32 {
	if m != nil {
		return m.InternalKeyCount
	}
	return 0
}

func (m *AccountNotificationsResponse) GetImportedKeyCount() uint32 {
	if m != nil {
		return m.ImportedKeyCount
	}
	return 0
}

type ConfirmationNotificationsRequest struct {
	TxHashes  [][]byte `protobuf:"bytes,1,rep,name=tx_hashes,json=txHashes,proto3" json:"tx_hashes,omitempty"`
	StopAfter int32    `protobuf:"varint,2,opt,name=stop_after,json=stopAfter" json:"stop_after,omitempty"`
}

func (m *ConfirmationNotificationsRequest) Reset()         { *m = ConfirmationNotificationsRequest{} }
func (m *ConfirmationNotificationsRequest) String() string { return proto.CompactTextString(m) }
func (*ConfirmationNotificationsRequest) ProtoMessage()    {}
func (*ConfirmationNotificationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{63}
}

func (m *ConfirmationNotificationsRequest) GetTxHashes() [][]byte {
	if m != nil {
		return m.TxHashes
	}
	return nil
}

func (m *ConfirmationNotificationsRequest) GetStopAfter() int32 {
	if m != nil {
		return m.StopAfter
	}
	return 0
}

type ConfirmationNotificationsResponse struct {
	Confirmations []*ConfirmationNotificationsResponse_TransactionConfirmations `protobuf:"bytes,1,rep,name=confirmations" json:"confirmations,omitempty"`
}

func (m *ConfirmationNotificationsResponse) Reset()         { *m = ConfirmationNotificationsResponse{} }
func (m *ConfirmationNotificationsResponse) String() string { return proto.CompactTextString(m) }
func (*ConfirmationNotificationsResponse) ProtoMessage()    {}
func (*ConfirmationNotificationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{64}
}

func (m *ConfirmationNotificationsResponse) GetConfirmations() []*ConfirmationNotificationsResponse_TransactionConfirmations {
	if m != nil {
		return m.Confirmations
	}
	return nil
}

type ConfirmationNotificationsResponse_TransactionConfirmations struct {
	TxHash        []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Confirmations int32  `protobuf:"varint,2,opt,name=confirmations" json:"confirmations,omitempty"`
	BlockHash     []byte `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockHeight   int32  `protobuf:"varint,4,opt,name=block_height,json=blockHeight" json:"block_height,omitempty"`
}

func (m *ConfirmationNotificationsResponse_TransactionConfirmations) Reset() {
	*m = ConfirmationNotificationsResponse_TransactionConfirmations{}
}
func (m *ConfirmationNotificationsResponse_TransactionConfirmations) String() string {
	return proto.CompactTextString(m)
}
func (*ConfirmationNotificationsResponse_TransactionConfirmations) ProtoMessage() {}
func (*ConfirmationNotificationsResponse_TransactionConfirmations) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{64, 0}
}

func (m *ConfirmationNotificationsResponse_TransactionConfirmations) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *ConfirmationNotificationsResponse_TransactionConfirmations) GetConfirmations() int32 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *ConfirmationNotificationsResponse_TransactionConfirmations) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *ConfirmationNotificationsResponse_TransactionConfirmations) GetBlockHeight() int32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type CreateWalletRequest struct {
	PublicPassphrase  []byte `protobuf:"bytes,1,opt,name=public_passphrase,json=publicPassphrase,proto3" json:"public_passphrase,omitempty"`
	PrivatePassphrase []byte `protobuf:"bytes,2,opt,name=private_passphrase,json=privatePassphrase,proto3" json:"private_passphrase,omitempty"`
	Seed              []byte `protobuf:"bytes,3,opt,name=seed,proto3" json:"seed,omitempty"`
}

func (m *CreateWalletRequest) Reset()                    { *m = CreateWalletRequest{} }
func (m *CreateWalletRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateWalletRequest) ProtoMessage()               {}
func (*CreateWalletRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *CreateWalletRequest) GetPublicPassphrase() []byte {
	if m != nil {
		return m.PublicPassphrase
	}
	return nil
}

func (m *CreateWalletRequest) GetPrivatePassphrase() []byte {
	if m != nil {
		return m.PrivatePassphrase
	}
	return nil
}

func (m *CreateWalletRequest) GetSeed() []byte {
	if m != nil {
		return m.Seed
	}
	return nil
}

type CreateWalletResponse struct {
}

func (m *CreateWalletResponse) Reset()                    { *m = CreateWalletResponse{} }
func (m *CreateWalletResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateWalletResponse) ProtoMessage()               {}
func (*CreateWalletResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

type OpenWalletRequest struct {
	PublicPassphrase []byte `protobuf:"bytes,1,opt,name=public_passphrase,json=publicPassphrase,proto3" json:"public_passphrase,omitempty"`
}

func (m *OpenWalletRequest) Reset()                    { *m = OpenWalletRequest{} }
func (m *OpenWalletRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenWalletRequest) ProtoMessage()               {}
func (*OpenWalletRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *OpenWalletRequest) GetPublicPassphrase() []byte {
	if m != nil {
		return m.PublicPassphrase
	}
	return nil
}

type OpenWalletResponse struct {
}

func (m *OpenWalletResponse) Reset()                    { *m = OpenWalletResponse{} }
func (m *OpenWalletResponse) String() string            { return proto.CompactTextString(m) }
func (*OpenWalletResponse) ProtoMessage()               {}
func (*OpenWalletResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

type CloseWalletRequest struct {
}

func (m *CloseWalletRequest) Reset()                    { *m = CloseWalletRequest{} }
func (m *CloseWalletRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseWalletRequest) ProtoMessage()               {}
func (*CloseWalletRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

type CloseWalletResponse struct {
}

func (m *CloseWalletResponse) Reset()                    { *m = CloseWalletResponse{} }
func (m *CloseWalletResponse) String() string            { return proto.CompactTextString(m) }
func (*CloseWalletResponse) ProtoMessage()               {}
func (*CloseWalletResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

type WalletExistsRequest struct {
}

func (m *WalletExistsRequest) Reset()                    { *m = WalletExistsRequest{} }
func (m *WalletExistsRequest) String() string            { return proto.CompactTextString(m) }
func (*WalletExistsRequest) ProtoMessage()               {}
func (*WalletExistsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

type WalletExistsResponse struct {
	Exists bool `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
}

func (m *WalletExistsResponse) Reset()                    { *m = WalletExistsResponse{} }
func (m *WalletExistsResponse) String() string            { return proto.CompactTextString(m) }
func (*WalletExistsResponse) ProtoMessage()               {}
func (*WalletExistsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *WalletExistsResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

type StartConsensusRpcRequest struct {
	NetworkAddress string `protobuf:"bytes,1,opt,name=network_address,json=networkAddress" json:"network_address,omitempty"`
	Username       string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password       []byte `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Certificate    []byte `protobuf:"bytes,4,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (m *StartConsensusRpcRequest) Reset()                    { *m = StartConsensusRpcRequest{} }
func (m *StartConsensusRpcRequest) String() string            { return proto.CompactTextString(m) }
func (*StartConsensusRpcRequest) ProtoMessage()               {}
func (*StartConsensusRpcRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *StartConsensusRpcRequest) GetNetworkAddress() string {
	if m != nil {
		return m.NetworkAddress
	}
	return ""
}

func (m *StartConsensusRpcRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *StartConsensusRpcRequest) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *StartConsensusRpcRequest) GetCertificate() []byte {
	if m != nil {
		return m.Certificate
	}
	return nil
}

type StartConsensusRpcResponse struct {
}

func (m *StartConsensusRpcResponse) Reset()                    { *m = StartConsensusRpcResponse{} }
func (m *StartConsensusRpcResponse) String() string            { return proto.CompactTextString(m) }
func (*StartConsensusRpcResponse) ProtoMessage()               {}
func (*StartConsensusRpcResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

type DiscoverAddressesRequest struct {
	DiscoverAccounts  bool   `protobuf:"varint,1,opt,name=discover_accounts,json=discoverAccounts" json:"discover_accounts,omitempty"`
	PrivatePassphrase []byte `protobuf:"bytes,2,opt,name=private_passphrase,json=privatePassphrase,proto3" json:"private_passphrase,omitempty"`
}

func (m *DiscoverAddressesRequest) Reset()                    { *m = DiscoverAddressesRequest{} }
func (m *DiscoverAddressesRequest) String() string            { return proto.CompactTextString(m) }
func (*DiscoverAddressesRequest) ProtoMessage()               {}
func (*DiscoverAddressesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

func (m *DiscoverAddressesRequest) GetDiscoverAccounts() bool {
	if m != nil {
		return m.DiscoverAccounts
	}
	return false
}

func (m *DiscoverAddressesRequest) GetPrivatePassphrase() []byte {
	if m != nil {
		return m.PrivatePassphrase
	}
	return nil
}

type DiscoverAddressesResponse struct {
}

func (m *DiscoverAddressesResponse) Reset()                    { *m = DiscoverAddressesResponse{} }
func (m *DiscoverAddressesResponse) String() string            { return proto.CompactTextString(m) }
func (*DiscoverAddressesResponse) ProtoMessage()               {}
func (*DiscoverAddressesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

type SubscribeToBlockNotificationsRequest struct {
}

func (m *SubscribeToBlockNotificationsRequest) Reset()         { *m = SubscribeToBlockNotificationsRequest{} }
func (m *SubscribeToBlockNotificationsRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeToBlockNotificationsRequest) ProtoMessage()    {}
func (*SubscribeToBlockNotificationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{77}
}

type SubscribeToBlockNotificationsResponse struct {
}

func (m *SubscribeToBlockNotificationsResponse) Reset()         { *m = SubscribeToBlockNotificationsResponse{} }
func (m *SubscribeToBlockNotificationsResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeToBlockNotificationsResponse) ProtoMessage()    {}
func (*SubscribeToBlockNotificationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{78}
}

type FetchHeadersRequest struct {
}

func (m *FetchHeadersRequest) Reset()                    { *m = FetchHeadersRequest{} }
func (m *FetchHeadersRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchHeadersRequest) ProtoMessage()               {}
func (*FetchHeadersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

type FetchHeadersResponse struct {
	FetchedHeadersCount     uint32 `protobuf:"varint,1,opt,name=fetched_headers_count,json=fetchedHeadersCount" json:"fetched_headers_count,omitempty"`
	FirstNewBlockHash       []byte `protobuf:"bytes,2,opt,name=first_new_block_hash,json=firstNewBlockHash,proto3" json:"first_new_block_hash,omitempty"`
	FirstNewBlockHeight     int32  `protobuf:"varint,3,opt,name=first_new_block_height,json=firstNewBlockHeight" json:"first_new_block_height,omitempty"`
	MainChainTipBlockHash   []byte `protobuf:"bytes,4,opt,name=main_chain_tip_block_hash,json=mainChainTipBlockHash,proto3" json:"main_chain_tip_block_hash,omitempty"`
	MainChainTipBlockHeight int32  `protobuf:"varint,5,opt,name=main_chain_tip_block_height,json=mainChainTipBlockHeight" json:"main_chain_tip_block_height,omitempty"`
}

func (m *FetchHeadersResponse) Reset()                    { *m = FetchHeadersResponse{} }
func (m *FetchHeadersResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchHeadersResponse) ProtoMessage()               {}
func (*FetchHeadersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

func (m *FetchHeadersResponse) GetFetchedHeadersCount() uint32 {
	if m != nil {
		return m.FetchedHeadersCount
	}
	return 0
}

func (m *FetchHeadersResponse) GetFirstNewBlockHash() []byte {
	if m != nil {
		return m.FirstNewBlockHash
	}
	return nil
}

func (m *FetchHeadersResponse) GetFirstNewBlockHeight() int32 {
	if m != nil {
		return m.FirstNewBlockHeight
	}
	return 0
}

func (m *FetchHeadersResponse) GetMainChainTipBlockHash() []byte {
	if m != nil {
		return m.MainChainTipBlockHash
	}
	return nil
}

func (m *FetchHeadersResponse) GetMainChainTipBlockHeight() int32 {
	if m != nil {
		return m.MainChainTipBlockHeight
	}
	return 0
}

type GenerateRandomSeedRequest struct {
	SeedLength uint32 `protobuf:"varint,1,opt,name=seed_length,json=seedLength" json:"seed_length,omitempty"`
}

func (m *GenerateRandomSeedRequest) Reset()                    { *m = GenerateRandomSeedRequest{} }
func (m *GenerateRandomSeedRequest) String() string            { return proto.CompactTextString(m) }
func (*GenerateRandomSeedRequest) ProtoMessage()               {}
func (*GenerateRandomSeedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

func (m *GenerateRandomSeedRequest) GetSeedLength() uint32 {
	if m != nil {
		return m.SeedLength
	}
	return 0
}

type GenerateRandomSeedResponse struct {
	SeedBytes    []byte `protobuf:"bytes,1,opt,name=seed_bytes,json=seedBytes,proto3" json:"seed_bytes,omitempty"`
	SeedHex      string `protobuf:"bytes,2,opt,name=seed_hex,json=seedHex" json:"seed_hex,omitempty"`
	SeedMnemonic string `protobuf:"bytes,3,opt,name=seed_mnemonic,json=seedMnemonic" json:"seed_mnemonic,omitempty"`
}

func (m *GenerateRandomSeedResponse) Reset()                    { *m = GenerateRandomSeedResponse{} }
func (m *GenerateRandomSeedResponse) String() string            { return proto.CompactTextString(m) }
func (*GenerateRandomSeedResponse) ProtoMessage()               {}
func (*GenerateRandomSeedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

func (m *GenerateRandomSeedResponse) GetSeedBytes() []byte {
	if m != nil {
		return m.SeedBytes
	}
	return nil
}

func (m *GenerateRandomSeedResponse) GetSeedHex() string {
	if m != nil {
		return m.SeedHex
	}
	return ""
}

func (m *GenerateRandomSeedResponse) GetSeedMnemonic() string {
	if m != nil {
		return m.SeedMnemonic
	}
	return ""
}

type DecodeSeedRequest struct {
	UserInput string `protobuf:"bytes,1,opt,name=user_input,json=userInput" json:"user_input,omitempty"`
}

func (m *DecodeSeedRequest) Reset()                    { *m = DecodeSeedRequest{} }
func (m *DecodeSeedRequest) String() string            { return proto.CompactTextString(m) }
func (*DecodeSeedRequest) ProtoMessage()               {}
func (*DecodeSeedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

func (m *DecodeSeedRequest) GetUserInput() string {
	if m != nil {
		return m.UserInput
	}
	return ""
}

type DecodeSeedResponse struct {
	DecodedSeed []byte `protobuf:"bytes,1,opt,name=decoded_seed,json=decodedSeed,proto3" json:"decoded_seed,omitempty"`
}

func (m *DecodeSeedResponse) Reset()                    { *m = DecodeSeedResponse{} }
func (m *DecodeSeedResponse) String() string            { return proto.CompactTextString(m) }
func (*DecodeSeedResponse) ProtoMessage()               {}
func (*DecodeSeedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{84} }

func (m *DecodeSeedResponse) GetDecodedSeed() []byte {
	if m != nil {
		return m.DecodedSeed
	}
	return nil
}

type StartAutoBuyerRequest struct {
	Passphrase        []byte  `protobuf:"bytes,1,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	Account           uint32  `protobuf:"varint,2,opt,name=account" json:"account,omitempty"`
	BalanceToMaintain int64   `protobuf:"varint,3,opt,name=balance_to_maintain,json=balanceToMaintain" json:"balance_to_maintain,omitempty"`
	MaxFeePerKb       int64   `protobuf:"varint,4,opt,name=max_fee_per_kb,json=maxFeePerKb" json:"max_fee_per_kb,omitempty"`
	MaxPriceRelative  float64 `protobuf:"fixed64,5,opt,name=max_price_relative,json=maxPriceRelative" json:"max_price_relative,omitempty"`
	MaxPriceAbsolute  int64   `protobuf:"varint,6,opt,name=max_price_absolute,json=maxPriceAbsolute" json:"max_price_absolute,omitempty"`
	VotingAddress     string  `protobuf:"bytes,7,opt,name=voting_address,json=votingAddress" json:"voting_address,omitempty"`
	PoolAddress       string  `protobuf:"bytes,8,opt,name=pool_address,json=poolAddress" json:"pool_address,omitempty"`
	PoolFees          float64 `protobuf:"fixed64,9,opt,name=pool_fees,json=poolFees" json:"pool_fees,omitempty"`
	MaxPerBlock       int64   `protobuf:"varint,10,opt,name=max_per_block,json=maxPerBlock" json:"max_per_block,omitempty"`
}

func (m *StartAutoBuyerRequest) Reset()                    { *m = StartAutoBuyerRequest{} }
func (m *StartAutoBuyerRequest) String() string            { return proto.CompactTextString(m) }
func (*StartAutoBuyerRequest) ProtoMessage()               {}
func (*StartAutoBuyerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{85} }

func (m *StartAutoBuyerRequest) GetPassphrase() []byte {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

func (m *StartAutoBuyerRequest) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *StartAutoBuyerRequest) GetBalanceToMaintain() int64 {
	if m != nil {
		return m.BalanceToMaintain
	}
	return 0
}

func (m *StartAutoBuyerRequest) GetMaxFeePerKb() int64 {
	if m != nil {
		return m.MaxFeePerKb
	}
	return 0
}

func (m *StartAutoBuyerRequest) GetMaxPriceRelative() float64 {
	if m != nil {
		return m.MaxPriceRelative
	}
	return 0
}

func (m *StartAutoBuyerRequest) GetMaxPriceAbsolute() int64 {
	if m != nil {
		return m.MaxPriceAbsolute
	}
	return 0
}

func (m *StartAutoBuyerRequest) GetVotingAddress() string {
	if m != nil {
		return m.VotingAddress
	}
	return ""
}

func (m *StartAutoBuyerRequest) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

func (m *StartAutoBuyerRequest) GetPoolFees() float64 {
	if m != nil {
		return m.PoolFees
	}
	return 0
}

func (m *StartAutoBuyerRequest) GetMaxPerBlock() int64 {
	if m != nil {
		return m.MaxPerBlock
	}
	return 0
}

type StartAutoBuyerResponse struct {
}

func (m *StartAutoBuyerResponse) Reset()                    { *m = StartAutoBuyerResponse{} }
func (m *StartAutoBuyerResponse) String() string            { return proto.CompactTextString(m) }
func (*StartAutoBuyerResponse) ProtoMessage()               {}
func (*StartAutoBuyerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{86} }

type StopAutoBuyerRequest struct {
}

func (m *StopAutoBuyerRequest) Reset()                    { *m = StopAutoBuyerRequest{} }
func (m *StopAutoBuyerRequest) String() string            { return proto.CompactTextString(m) }
func (*StopAutoBuyerRequest) ProtoMessage()               {}
func (*StopAutoBuyerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{87} }

type StopAutoBuyerResponse struct {
}

func (m *StopAutoBuyerResponse) Reset()                    { *m = StopAutoBuyerResponse{} }
func (m *StopAutoBuyerResponse) String() string            { return proto.CompactTextString(m) }
func (*StopAutoBuyerResponse) ProtoMessage()               {}
func (*StopAutoBuyerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{88} }

type TicketBuyerConfigRequest struct {
}

func (m *TicketBuyerConfigRequest) Reset()                    { *m = TicketBuyerConfigRequest{} }
func (m *TicketBuyerConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*TicketBuyerConfigRequest) ProtoMessage()               {}
func (*TicketBuyerConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{89} }

type TicketBuyerConfigResponse struct {
	Account               uint32  `protobuf:"varint,1,opt,name=account" json:"account,omitempty"`
	AvgPriceMode          string  `protobuf:"bytes,2,opt,name=avg_price_mode,json=avgPriceMode" json:"avg_price_mode,omitempty"`
	AvgPriceVWAPDelta     int64   `protobuf:"varint,3,opt,name=avg_priceVWAP_delta,json=avgPriceVWAPDelta" json:"avg_priceVWAP_delta,omitempty"`
	BalanceToMaintain     int64   `protobuf:"varint,4,opt,name=balance_to_maintain,json=balanceToMaintain" json:"balance_to_maintain,omitempty"`
	BlocksToAvg           int64   `protobuf:"varint,5,opt,name=blocks_to_avg,json=blocksToAvg" json:"blocks_to_avg,omitempty"`
	DontWaitForTickets    bool    `protobuf:"varint,6,opt,name=dont_wait_for_tickets,json=dontWaitForTickets" json:"dont_wait_for_tickets,omitempty"`
	ExpiryDelta           int64   `protobuf:"varint,7,opt,name=expiry_delta,json=expiryDelta" json:"expiry_delta,omitempty"`
	FeeSource             string  `protobuf:"bytes,8,opt,name=fee_source,json=feeSource" json:"fee_source,omitempty"`
	FeeTargetScaling      float64 `protobuf:"fixed64,9,opt,name=fee_target_scaling,json=feeTargetScaling" json:"fee_target_scaling,omitempty"`
	MinFee                int64   `protobuf:"varint,10,opt,name=min_fee,json=minFee" json:"min_fee,omitempty"`
	MaxFee                int64   `protobuf:"varint,12,opt,name=max_fee,json=maxFee" json:"max_fee,omitempty"`
	MaxPerBlock           int64   `protobuf:"varint,13,opt,name=max_per_block,json=maxPerBlock" json:"max_per_block,omitempty"`
	MaxPriceAbsolute      int64   `protobuf:"varint,14,opt,name=max_price_absolute,json=maxPriceAbsolute" json:"max_price_absolute,omitempty"`
	MaxPriceRelative      float64 `protobuf:"fixed64,15,opt,name=max_price_relative,json=maxPriceRelative" json:"max_price_relative,omitempty"`
	MaxInMempool          int64   `protobuf:"varint,17,opt,name=max_in_mempool,json=maxInMempool" json:"max_in_mempool,omitempty"`
	PoolAddress           string  `protobuf:"bytes,18,opt,name=pool_address,json=poolAddress" json:"pool_address,omitempty"`
	PoolFees              float64 `protobuf:"fixed64,19,opt,name=pool_fees,json=poolFees" json:"pool_fees,omitempty"`
	SpreadTicketPurchases bool    `protobuf:"varint,20,opt,name=spread_ticket_purchases,json=spreadTicketPurchases" json:"spread_ticket_purchases,omitempty"`
	VotingAddress         string  `protobuf:"bytes,21,opt,name=voting_address,json=votingAddress" json:"voting_address,omitempty"`
	TxFee                 int64   `protobuf:"varint,22,opt,name=tx_fee,json=txFee" json:"tx_fee,omitempty"`
	NoSplitTransaction    bool    `protobuf:"varint,23,opt,name=no_split_transaction,json=noSplitTransaction" json:"no_split_transaction,omitempty"`
}

func (m *TicketBuyerConfigResponse) Reset()                    { *m = TicketBuyerConfigResponse{} }
func (m *TicketBuyerConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*TicketBuyerConfigResponse) ProtoMessage()               {}
func (*TicketBuyerConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{90} }

func (m *TicketBuyerConfigResponse) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetAvgPriceMode() string {
	if m != nil {
		return m.AvgPriceMode
	}
	return ""
}

func (m *TicketBuyerConfigResponse) GetAvgPriceVWAPDelta() int64 {
	if m != nil {
		return m.AvgPriceVWAPDelta
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetBalanceToMaintain() int64 {
	if m != nil {
		return m.BalanceToMaintain
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetBlocksToAvg() int64 {
	if m != nil {
		return m.BlocksToAvg
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetDontWaitForTickets() bool {
	if m != nil {
		return m.DontWaitForTickets
	}
	return false
}

func (m *TicketBuyerConfigResponse) GetExpiryDelta() int64 {
	if m != nil {
		return m.ExpiryDelta
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetFeeSource() string {
	if m != nil {
		return m.FeeSource
	}
	return ""
}

func (m *TicketBuyerConfigResponse) GetFeeTargetScaling() float64 {
	if m != nil {
		return m.FeeTargetScaling
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetMinFee() int64 {
	if m != nil {
		return m.MinFee
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetMaxFee() int64 {
	if m != nil {
		return m.MaxFee
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetMaxPerBlock() int64 {
	if m != nil {
		return m.MaxPerBlock
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetMaxPriceAbsolute() int64 {
	if m != nil {
		return m.MaxPriceAbsolute
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetMaxPriceRelative() float64 {
	if m != nil {
		return m.MaxPriceRelative
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetMaxInMempool() int64 {
	if m != nil {
		return m.MaxInMempool
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

func (m *TicketBuyerConfigResponse) GetPoolFees() float64 {
	if m != nil {
		return m.PoolFees
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetSpreadTicketPurchases() bool {
	if m != nil {
		return m.SpreadTicketPurchases
	}
	return false
}

func (m *TicketBuyerConfigResponse) GetVotingAddress() string {
	if m != nil {
		return m.VotingAddress
	}
	return ""
}

func (m *TicketBuyerConfigResponse) GetTxFee() int64 {
	if m != nil {
		return m.TxFee
	}
	return 0
}

func (m *TicketBuyerConfigResponse) GetNoSplitTransaction() bool {
	if m != nil {
		return m.NoSplitTransaction
	}
	return false
}

type SetAccountRequest struct {
	Account uint32 `protobuf:"varint,1,opt,name=account" json:"account,omitempty"`
}

func (m *SetAccountRequest) Reset()                    { *m = SetAccountRequest{} }
func (m *SetAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*SetAccountRequest) ProtoMessage()               {}
func (*SetAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{91} }

func (m *SetAccountRequest) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

type SetAccountResponse struct {
}

func (m *SetAccountResponse) Reset()                    { *m = SetAccountResponse{} }
func (m *SetAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*SetAccountResponse) ProtoMessage()               {}
func (*SetAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{92} }

type SetBalanceToMaintainRequest struct {
	BalanceToMaintain int64 `protobuf:"varint,1,opt,name=balance_to_maintain,json=balanceToMaintain" json:"balance_to_maintain,omitempty"`
}

func (m *SetBalanceToMaintainRequest) Reset()                    { *m = SetBalanceToMaintainRequest{} }
func (m *SetBalanceToMaintainRequest) String() string            { return proto.CompactTextString(m) }
func (*SetBalanceToMaintainRequest) ProtoMessage()               {}
func (*SetBalanceToMaintainRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93} }

func (m *SetBalanceToMaintainRequest) GetBalanceToMaintain() int64 {
	if m != nil {
		return m.BalanceToMaintain
	}
	return 0
}

type SetBalanceToMaintainResponse struct {
}

func (m *SetBalanceToMaintainResponse) Reset()                    { *m = SetBalanceToMaintainResponse{} }
func (m *SetBalanceToMaintainResponse) String() string            { return proto.CompactTextString(m) }
func (*SetBalanceToMaintainResponse) ProtoMessage()               {}
func (*SetBalanceToMaintainResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{94} }

type SetMaxFeeRequest struct {
	MaxFeePerKb int64 `protobuf:"varint,1,opt,name=max_fee_per_kb,json=maxFeePerKb" json:"max_fee_per_kb,omitempty"`
}

func (m *SetMaxFeeRequest) Reset()                    { *m = SetMaxFeeRequest{} }
func (m *SetMaxFeeRequest) String() string            { return proto.CompactTextString(m) }
func (*SetMaxFeeRequest) ProtoMessage()               {}
func (*SetMaxFeeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{95} }

func (m *SetMaxFeeRequest) GetMaxFeePerKb() int64 {
	if m != nil {
		return m.MaxFeePerKb
	}
	return 0
}

type SetMaxFeeResponse struct {
}

func (m *SetMaxFeeResponse) Reset()                    { *m = SetMaxFeeResponse{} }
func (m *SetMaxFeeResponse) String() string            { return proto.CompactTextString(m) }
func (*SetMaxFeeResponse) ProtoMessage()               {}
func (*SetMaxFeeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{96} }

type SetMaxPriceRelativeRequest struct {
	MaxPriceRelative float64 `protobuf:"fixed64,1,opt,name=max_price_relative,json=maxPriceRelative" json:"max_price_relative,omitempty"`
}

func (m *SetMaxPriceRelativeRequest) Reset()                    { *m = SetMaxPriceRelativeRequest{} }
func (m *SetMaxPriceRelativeRequest) String() string            { return proto.CompactTextString(m) }
func (*SetMaxPriceRelativeRequest) ProtoMessage()               {}
func (*SetMaxPriceRelativeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{97} }

func (m *SetMaxPriceRelativeRequest) GetMaxPriceRelative() float64 {
	if m != nil {
		return m.MaxPriceRelative
	}
	return 0
}

type SetMaxPriceRelativeResponse struct {
}

func (m *SetMaxPriceRelativeResponse) Reset()                    { *m = SetMaxPriceRelativeResponse{} }
func (m *SetMaxPriceRelativeResponse) String() string            { return proto.CompactTextString(m) }
func (*SetMaxPriceRelativeResponse) ProtoMessage()               {}
func (*SetMaxPriceRelativeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{98} }

type SetMaxPriceAbsoluteRequest struct {
	MaxPriceAbsolute int64 `protobuf:"varint,1,opt,name=max_price_absolute,json=maxPriceAbsolute" json:"max_price_absolute,omitempty"`
}

func (m *SetMaxPriceAbsoluteRequest) Reset()                    { *m = SetMaxPriceAbsoluteRequest{} }
func (m *SetMaxPriceAbsoluteRequest) String() string            { return proto.CompactTextString(m) }
func (*SetMaxPriceAbsoluteRequest) ProtoMessage()               {}
func (*SetMaxPriceAbsoluteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{99} }

func (m *SetMaxPriceAbsoluteRequest) GetMaxPriceAbsolute() int64 {
	if m != nil {
		return m.MaxPriceAbsolute
	}
	return 0
}

type SetMaxPriceAbsoluteResponse struct {
}

func (m *SetMaxPriceAbsoluteResponse) Reset()                    { *m = SetMaxPriceAbsoluteResponse{} }
func (m *SetMaxPriceAbsoluteResponse) String() string            { return proto.CompactTextString(m) }
func (*SetMaxPriceAbsoluteResponse) ProtoMessage()               {}
func (*SetMaxPriceAbsoluteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{100} }

type SetVotingAddressRequest struct {
	VotingAddress string `protobuf:"bytes,1,opt,name=voting_address,json=votingAddress" json:"voting_address,omitempty"`
}

func (m *SetVotingAddressRequest) Reset()                    { *m = SetVotingAddressRequest{} }
func (m *SetVotingAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*SetVotingAddressRequest) ProtoMessage()               {}
func (*SetVotingAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{101} }

func (m *SetVotingAddressRequest) GetVotingAddress() string {
	if m != nil {
		return m.VotingAddress
	}
	return ""
}

type SetVotingAddressResponse struct {
}

func (m *SetVotingAddressResponse) Reset()                    { *m = SetVotingAddressResponse{} }
func (m *SetVotingAddressResponse) String() string            { return proto.CompactTextString(m) }
func (*SetVotingAddressResponse) ProtoMessage()               {}
func (*SetVotingAddressResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{102} }

type SetNoSplitTransactionRequest struct {
	NoSplitTransaction bool `protobuf:"varint,1,opt,name=no_split_transaction,json=noSplitTransaction" json:"no_split_transaction,omitempty"`
}

func (m *SetNoSplitTransactionRequest) Reset()                    { *m = SetNoSplitTransactionRequest{} }
func (m *SetNoSplitTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*SetNoSplitTransactionRequest) ProtoMessage()               {}
func (*SetNoSplitTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{103} }

func (m *SetNoSplitTransactionRequest) GetNoSplitTransaction() bool {
	if m != nil {
		return m.NoSplitTransaction
	}
	return false
}

type SetNoSplitTransactionResponse struct {
}

func (m *SetNoSplitTransactionResponse) Reset()                    { *m = SetNoSplitTransactionResponse{} }
func (m *SetNoSplitTransactionResponse) String() string            { return proto.CompactTextString(m) }
func (*SetNoSplitTransactionResponse) ProtoMessage()               {}
func (*SetNoSplitTransactionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{104} }

type SetPoolAddressRequest struct {
	PoolAddress string `protobuf:"bytes,1,opt,name=pool_address,json=poolAddress" json:"pool_address,omitempty"`
}

func (m *SetPoolAddressRequest) Reset()                    { *m = SetPoolAddressRequest{} }
func (m *SetPoolAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPoolAddressRequest) ProtoMessage()               {}
func (*SetPoolAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{105} }

func (m *SetPoolAddressRequest) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

type SetPoolAddressResponse struct {
}

func (m *SetPoolAddressResponse) Reset()                    { *m = SetPoolAddressResponse{} }
func (m *SetPoolAddressResponse) String() string            { return proto.CompactTextString(m) }
func (*SetPoolAddressResponse) ProtoMessage()               {}
func (*SetPoolAddressResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{106} }

type SetPoolFeesRequest struct {
	PoolFees float64 `protobuf:"fixed64,1,opt,name=pool_fees,json=poolFees" json:"pool_fees,omitempty"`
}

func (m *SetPoolFeesRequest) Reset()                    { *m = SetPoolFeesRequest{} }
func (m *SetPoolFeesRequest) String() string            { return proto.CompactTextString(m) }
func (*SetPoolFeesRequest) ProtoMessage()               {}
func (*SetPoolFeesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{107} }

func (m *SetPoolFeesRequest) GetPoolFees() float64 {
	if m != nil {
		return m.PoolFees
	}
	return 0
}

type SetPoolFeesResponse struct {
}

func (m *SetPoolFeesResponse) Reset()                    { *m = SetPoolFeesResponse{} }
func (m *SetPoolFeesResponse) String() string            { return proto.CompactTextString(m) }
func (*SetPoolFeesResponse) ProtoMessage()               {}
func (*SetPoolFeesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{108} }

type SetMaxPerBlockRequest struct {
	MaxPerBlock int64 `protobuf:"varint,1,opt,name=max_per_block,json=maxPerBlock" json:"max_per_block,omitempty"`
}

func (m *SetMaxPerBlockRequest) Reset()                    { *m = SetMaxPerBlockRequest{} }
func (m *SetMaxPerBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*SetMaxPerBlockRequest) ProtoMessage()               {}
func (*SetMaxPerBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{109} }

func (m *SetMaxPerBlockRequest) GetMaxPerBlock() int64 {
	if m != nil {
		return m.MaxPerBlock
	}
	return 0
}

type SetMaxPerBlockResponse struct {
}

func (m *SetMaxPerBlockResponse) Reset()                    { *m = SetMaxPerBlockResponse{} }
func (m *SetMaxPerBlockResponse) String() string            { return proto.CompactTextString(m) }
func (*SetMaxPerBlockResponse) ProtoMessage()               {}
func (*SetMaxPerBlockResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{110} }

type AgendasRequest struct {
}

func (m *AgendasRequest) Reset()                    { *m = AgendasRequest{} }
func (m *AgendasRequest) String() string            { return proto.CompactTextString(m) }
func (*AgendasRequest) ProtoMessage()               {}
func (*AgendasRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{111} }

type AgendasResponse struct {
	Version uint32                    `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Agendas []*AgendasResponse_Agenda `protobuf:"bytes,2,rep,name=agendas" json:"agendas,omitempty"`
}

func (m *AgendasResponse) Reset()                    { *m = AgendasResponse{} }
func (m *AgendasResponse) String() string            { return proto.CompactTextString(m) }
func (*AgendasResponse) ProtoMessage()               {}
func (*AgendasResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{112} }

func (m *AgendasResponse) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *AgendasResponse) GetAgendas() []*AgendasResponse_Agenda {
	if m != nil {
		return m.Agendas
	}
	return nil
}

type AgendasResponse_Agenda struct {
	Id          string                    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Description string                    `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Mask        uint32                    `protobuf:"varint,3,opt,name=mask" json:"mask,omitempty"`
	Choices     []*AgendasResponse_Choice `protobuf:"bytes,4,rep,name=choices" json:"choices,omitempty"`
	StartTime   int64                     `protobuf:"varint,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	ExpireTime  int64                     `protobuf:"varint,6,opt,name=expire_time,json=expireTime" json:"expire_time,omitempty"`
}

func (m *AgendasResponse_Agenda) Reset()                    { *m = AgendasResponse_Agenda{} }
func (m *AgendasResponse_Agenda) String() string            { return proto.CompactTextString(m) }
func (*AgendasResponse_Agenda) ProtoMessage()               {}
func (*AgendasResponse_Agenda) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{112, 0} }

func (m *AgendasResponse_Agenda) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AgendasResponse_Agenda) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AgendasResponse_Agenda) GetMask() uint32 {
	if m != nil {
		return m.Mask
	}
	return 0
}

func (m *AgendasResponse_Agenda) GetChoices() []*AgendasResponse_Choice {
	if m != nil {
		return m.Choices
	}
	return nil
}

func (m *AgendasResponse_Agenda) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *AgendasResponse_Agenda) GetExpireTime() int64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

type AgendasResponse_Choice struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Bits        uint32 `protobuf:"varint,3,opt,name=bits" json:"bits,omitempty"`
	IsAbstain   bool   `protobuf:"varint,4,opt,name=is_abstain,json=isAbstain" json:"is_abstain,omitempty"`
	IsNo        bool   `protobuf:"varint,5,opt,name=is_no,json=isNo" json:"is_no,omitempty"`
}

func (m *AgendasResponse_Choice) Reset()                    { *m = AgendasResponse_Choice{} }
func (m *AgendasResponse_Choice) String() string            { return proto.CompactTextString(m) }
func (*AgendasResponse_Choice) ProtoMessage()               {}
func (*AgendasResponse_Choice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{112, 1} }

func (m *AgendasResponse_Choice) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AgendasResponse_Choice) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AgendasResponse_Choice) GetBits() uint32 {
	if m != nil {
		return m.Bits
	}
	return 0
}

func (m *AgendasResponse_Choice) GetIsAbstain() bool {
	if m != nil {
		return m.IsAbstain
	}
	return false
}

func (m *AgendasResponse_Choice) GetIsNo() bool {
	if m != nil {
		return m.IsNo
	}
	return false
}

type VoteChoicesRequest struct {
}

func (m *VoteChoicesRequest) Reset()                    { *m = VoteChoicesRequest{} }
func (m *VoteChoicesRequest) String() string            { return proto.CompactTextString(m) }
func (*VoteChoicesRequest) ProtoMessage()               {}
func (*VoteChoicesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{113} }

type VoteChoicesResponse struct {
	Version  uint32                        `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Choices  []*VoteChoicesResponse_Choice `protobuf:"bytes,2,rep,name=choices" json:"choices,omitempty"`
	Votebits uint32                        `protobuf:"varint,3,opt,name=votebits" json:"votebits,omitempty"`
}

func (m *VoteChoicesResponse) Reset()                    { *m = VoteChoicesResponse{} }
func (m *VoteChoicesResponse) String() string            { return proto.CompactTextString(m) }
func (*VoteChoicesResponse) ProtoMessage()               {}
func (*VoteChoicesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{114} }

func (m *VoteChoicesResponse) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *VoteChoicesResponse) GetChoices() []*VoteChoicesResponse_Choice {
	if m != nil {
		return m.Choices
	}
	return nil
}

func (m *VoteChoicesResponse) GetVotebits() uint32 {
	if m != nil {
		return m.Votebits
	}
	return 0
}

type VoteChoicesResponse_Choice struct {
	AgendaId          string `protobuf:"bytes,1,opt,name=agenda_id,json=agendaId" json:"agenda_id,omitempty"`
	AgendaDescription string `protobuf:"bytes,2,opt,name=agenda_description,json=agendaDescription" json:"agenda_description,omitempty"`
	ChoiceId          string `protobuf:"bytes,3,opt,name=choice_id,json=choiceId" json:"choice_id,omitempty"`
	ChoiceDescription string `protobuf:"bytes,4,opt,name=choice_description,json=choiceDescription" json:"choice_description,omitempty"`
}

func (m *VoteChoicesResponse_Choice) Reset()                    { *m = VoteChoicesResponse_Choice{} }
func (m *VoteChoicesResponse_Choice) String() string            { return proto.CompactTextString(m) }
func (*VoteChoicesResponse_Choice) ProtoMessage()               {}
func (*VoteChoicesResponse_Choice) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{114, 0} }

func (m *VoteChoicesResponse_Choice) GetAgendaId() string {
	if m != nil {
		return m.AgendaId
	}
	return ""
}

func (m *VoteChoicesResponse_Choice) GetAgendaDescription() string {
	if m != nil {
		return m.AgendaDescription
	}
	return ""
}

func (m *VoteChoicesResponse_Choice) GetChoiceId() string {
	if m != nil {
		return m.ChoiceId
	}
	return ""
}

func (m *VoteChoicesResponse_Choice) GetChoiceDescription() string {
	if m != nil {
		return m.ChoiceDescription
	}
	return ""
}

type SetVoteChoicesRequest struct {
	Choices []*SetVoteChoicesRequest_Choice `protobuf:"bytes,1,rep,name=choices" json:"choices,omitempty"`
}

func (m *SetVoteChoicesRequest) Reset()                    { *m = SetVoteChoicesRequest{} }
func (m *SetVoteChoicesRequest) String() string            { return proto.CompactTextString(m) }
func (*SetVoteChoicesRequest) ProtoMessage()               {}
func (*SetVoteChoicesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{115} }

func (m *SetVoteChoicesRequest) GetChoices() []*SetVoteChoicesRequest_Choice {
	if m != nil {
		return m.Choices
	}
	return nil
}

type SetVoteChoicesRequest_Choice struct {
	AgendaId string `protobuf:"bytes,1,opt,name=agenda_id,json=agendaId" json:"agenda_id,omitempty"`
	ChoiceId string `protobuf:"bytes,2,opt,name=choice_id,json=choiceId" json:"choice_id,omitempty"`
}

func (m *SetVoteChoicesRequest_Choice) Reset()         { *m = SetVoteChoicesRequest_Choice{} }
func (m *SetVoteChoicesRequest_Choice) String() string { return proto.CompactTextString(m) }
func (*SetVoteChoicesRequest_Choice) ProtoMessage()    {}
func (*SetVoteChoicesRequest_Choice) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{115, 0}
}

func (m *SetVoteChoicesRequest_Choice) GetAgendaId() string {
	if m != nil {
		return m.AgendaId
	}
	return ""
}

func (m *SetVoteChoicesRequest_Choice) GetChoiceId() string {
	if m != nil {
		return m.ChoiceId
	}
	return ""
}

type SetVoteChoicesResponse struct {
	Votebits uint32 `protobuf:"varint,1,opt,name=votebits" json:"votebits,omitempty"`
}

func (m *SetVoteChoicesResponse) Reset()                    { *m = SetVoteChoicesResponse{} }
func (m *SetVoteChoicesResponse) String() string            { return proto.CompactTextString(m) }
func (*SetVoteChoicesResponse) ProtoMessage()               {}
func (*SetVoteChoicesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{116} }

func (m *SetVoteChoicesResponse) GetVotebits() uint32 {
	if m != nil {
		return m.Votebits
	}
	return 0
}

type VerifyMessageRequest struct {
	Address   string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Message   string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *VerifyMessageRequest) Reset()                    { *m = VerifyMessageRequest{} }
func (m *VerifyMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*VerifyMessageRequest) ProtoMessage()               {}
func (*VerifyMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{117} }

func (m *VerifyMessageRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *VerifyMessageRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *VerifyMessageRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type VerifyMessageResponse struct {
	Valid bool `protobuf:"varint,1,opt,name=valid" json:"valid,omitempty"`
}

func (m *VerifyMessageResponse) Reset()                    { *m = VerifyMessageResponse{} }
func (m *VerifyMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*VerifyMessageResponse) ProtoMessage()               {}
func (*VerifyMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{118} }

func (m *VerifyMessageResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func init() {
	proto.RegisterType((*VersionRequest)(nil), "walletrpc.VersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "walletrpc.VersionResponse")
	proto.RegisterType((*TransactionDetails)(nil), "walletrpc.TransactionDetails")
	proto.RegisterType((*TransactionDetails_Input)(nil), "walletrpc.TransactionDetails.Input")
	proto.RegisterType((*TransactionDetails_Output)(nil), "walletrpc.TransactionDetails.Output")
	proto.RegisterType((*BlockDetails)(nil), "walletrpc.BlockDetails")
	proto.RegisterType((*AccountBalance)(nil), "walletrpc.AccountBalance")
	proto.RegisterType((*PingRequest)(nil), "walletrpc.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "walletrpc.PingResponse")
	proto.RegisterType((*NetworkRequest)(nil), "walletrpc.NetworkRequest")
	proto.RegisterType((*NetworkResponse)(nil), "walletrpc.NetworkResponse")
	proto.RegisterType((*AccountNumberRequest)(nil), "walletrpc.AccountNumberRequest")
	proto.RegisterType((*AccountNumberResponse)(nil), "walletrpc.AccountNumberResponse")
	proto.RegisterType((*AccountsRequest)(nil), "walletrpc.AccountsRequest")
	proto.RegisterType((*AccountsResponse)(nil), "walletrpc.AccountsResponse")
	proto.RegisterType((*AccountsResponse_Account)(nil), "walletrpc.AccountsResponse.Account")
	proto.RegisterType((*RenameAccountRequest)(nil), "walletrpc.RenameAccountRequest")
	proto.RegisterType((*RenameAccountResponse)(nil), "walletrpc.RenameAccountResponse")
	proto.RegisterType((*RescanRequest)(nil), "walletrpc.RescanRequest")
	proto.RegisterType((*RescanResponse)(nil), "walletrpc.RescanResponse")
	proto.RegisterType((*NextAccountRequest)(nil), "walletrpc.NextAccountRequest")
	proto.RegisterType((*NextAccountResponse)(nil), "walletrpc.NextAccountResponse")
	proto.RegisterType((*NextAddressRequest)(nil), "walletrpc.NextAddressRequest")
	proto.RegisterType((*NextAddressResponse)(nil), "walletrpc.NextAddressResponse")
	proto.RegisterType((*ImportPrivateKeyRequest)(nil), "walletrpc.ImportPrivateKeyRequest")
	proto.RegisterType((*ImportPrivateKeyResponse)(nil), "walletrpc.ImportPrivateKeyResponse")
	proto.RegisterType((*ImportScriptRequest)(nil), "walletrpc.ImportScriptRequest")
	proto.RegisterType((*ImportScriptResponse)(nil), "walletrpc.ImportScriptResponse")
	proto.RegisterType((*BalanceRequest)(nil), "walletrpc.BalanceRequest")
	proto.RegisterType((*BalanceResponse)(nil), "walletrpc.BalanceResponse")
	proto.RegisterType((*GetTransactionRequest)(nil), "walletrpc.GetTransactionRequest")
	proto.RegisterType((*GetTransactionResponse)(nil), "walletrpc.GetTransactionResponse")
	proto.RegisterType((*GetTransactionsRequest)(nil), "walletrpc.GetTransactionsRequest")
	proto.RegisterType((*GetTransactionsResponse)(nil), "walletrpc.GetTransactionsResponse")
	proto.RegisterType((*GetTicketsRequest)(nil), "walletrpc.GetTicketsRequest")
	proto.RegisterType((*GetTicketsResponse)(nil), "walletrpc.GetTicketsResponse")
	proto.RegisterType((*GetTicketsResponse_TicketDetails)(nil), "walletrpc.GetTicketsResponse.TicketDetails")
	proto.RegisterType((*TicketPriceRequest)(nil), "walletrpc.TicketPriceRequest")
	proto.RegisterType((*TicketPriceResponse)(nil), "walletrpc.TicketPriceResponse")
	proto.RegisterType((*StakeInfoRequest)(nil), "walletrpc.StakeInfoRequest")
	proto.RegisterType((*StakeInfoResponse)(nil), "walletrpc.StakeInfoResponse")
	proto.RegisterType((*BlockInfoRequest)(nil), "walletrpc.BlockInfoRequest")
	proto.RegisterType((*BlockInfoResponse)(nil), "walletrpc.BlockInfoResponse")
	proto.RegisterType((*ChangePassphraseRequest)(nil), "walletrpc.ChangePassphraseRequest")
	proto.RegisterType((*ChangePassphraseResponse)(nil), "walletrpc.ChangePassphraseResponse")
	proto.RegisterType((*FundTransactionRequest)(nil), "walletrpc.FundTransactionRequest")
	proto.RegisterType((*FundTransactionResponse)(nil), "walletrpc.FundTransactionResponse")
	proto.RegisterType((*FundTransactionResponse_PreviousOutput)(nil), "walletrpc.FundTransactionResponse.PreviousOutput")
	proto.RegisterType((*ConstructTransactionRequest)(nil), "walletrpc.ConstructTransactionRequest")
	proto.RegisterType((*ConstructTransactionRequest_OutputDestination)(nil), "walletrpc.ConstructTransactionRequest.OutputDestination")
	proto.RegisterType((*ConstructTransactionRequest_Output)(nil), "walletrpc.ConstructTransactionRequest.Output")
	proto.RegisterType((*ConstructTransactionResponse)(nil), "walletrpc.ConstructTransactionResponse")
	proto.RegisterType((*SignTransactionRequest)(nil), "walletrpc.SignTransactionRequest")
	proto.RegisterType((*SignTransactionRequest_AdditionalScript)(nil), "walletrpc.SignTransactionRequest.AdditionalScript")
	proto.RegisterType((*SignTransactionResponse)(nil), "walletrpc.SignTransactionResponse")
	proto.RegisterType((*CreateSignatureRequest)(nil), "walletrpc.CreateSignatureRequest")
	proto.RegisterType((*CreateSignatureResponse)(nil), "walletrpc.CreateSignatureResponse")
	proto.RegisterType((*PublishTransactionRequest)(nil), "walletrpc.PublishTransactionRequest")
	proto.RegisterType((*PublishTransactionResponse)(nil), "walletrpc.PublishTransactionResponse")
	proto.RegisterType((*PurchaseTicketsRequest)(nil), "walletrpc.PurchaseTicketsRequest")
	proto.RegisterType((*PurchaseTicketsResponse)(nil), "walletrpc.PurchaseTicketsResponse")
	proto.RegisterType((*RevokeTicketsRequest)(nil), "walletrpc.RevokeTicketsRequest")
	proto.RegisterType((*RevokeTicketsResponse)(nil), "walletrpc.RevokeTicketsResponse")
	proto.RegisterType((*LoadActiveDataFiltersRequest)(nil), "walletrpc.LoadActiveDataFiltersRequest")
	proto.RegisterType((*LoadActiveDataFiltersResponse)(nil), "walletrpc.LoadActiveDataFiltersResponse")
	proto.RegisterType((*SignMessageRequest)(nil), "walletrpc.SignMessageRequest")
	proto.RegisterType((*SignMessageResponse)(nil), "walletrpc.SignMessageResponse")
	proto.RegisterType((*TransactionNotificationsRequest)(nil), "walletrpc.TransactionNotificationsRequest")
	proto.RegisterType((*TransactionNotificationsResponse)(nil), "walletrpc.TransactionNotificationsResponse")
	proto.RegisterType((*AccountNotificationsRequest)(nil), "walletrpc.AccountNotificationsRequest")
	proto.RegisterType((*AccountNotificationsResponse)(nil), "walletrpc.AccountNotificationsResponse")
	proto.RegisterType((*ConfirmationNotificationsRequest)(nil), "walletrpc.ConfirmationNotificationsRequest")
	proto.RegisterType((*ConfirmationNotificationsResponse)(nil), "walletrpc.ConfirmationNotificationsResponse")
	proto.RegisterType((*ConfirmationNotificationsResponse_TransactionConfirmations)(nil), "walletrpc.ConfirmationNotificationsResponse.TransactionConfirmations")
	proto.RegisterType((*CreateWalletRequest)(nil), "walletrpc.CreateWalletRequest")
	proto.RegisterType((*CreateWalletResponse)(nil), "walletrpc.CreateWalletResponse")
	proto.RegisterType((*OpenWalletRequest)(nil), "walletrpc.OpenWalletRequest")
	proto.RegisterType((*OpenWalletResponse)(nil), "walletrpc.OpenWalletResponse")
	proto.RegisterType((*CloseWalletRequest)(nil), "walletrpc.CloseWalletRequest")
	proto.RegisterType((*CloseWalletResponse)(nil), "walletrpc.CloseWalletResponse")
	proto.RegisterType((*WalletExistsRequest)(nil), "walletrpc.WalletExistsRequest")
	proto.RegisterType((*WalletExistsResponse)(nil), "walletrpc.WalletExistsResponse")
	proto.RegisterType((*StartConsensusRpcRequest)(nil), "walletrpc.StartConsensusRpcRequest")
	proto.RegisterType((*StartConsensusRpcResponse)(nil), "walletrpc.StartConsensusRpcResponse")
	proto.RegisterType((*DiscoverAddressesRequest)(nil), "walletrpc.DiscoverAddressesRequest")
	proto.RegisterType((*DiscoverAddressesResponse)(nil), "walletrpc.DiscoverAddressesResponse")
	proto.RegisterType((*SubscribeToBlockNotificationsRequest)(nil), "walletrpc.SubscribeToBlockNotificationsRequest")
	proto.RegisterType((*SubscribeToBlockNotificationsResponse)(nil), "walletrpc.SubscribeToBlockNotificationsResponse")
	proto.RegisterType((*FetchHeadersRequest)(nil), "walletrpc.FetchHeadersRequest")
	proto.RegisterType((*FetchHeadersResponse)(nil), "walletrpc.FetchHeadersResponse")
	proto.RegisterType((*GenerateRandomSeedRequest)(nil), "walletrpc.GenerateRandomSeedRequest")
	proto.RegisterType((*GenerateRandomSeedResponse)(nil), "walletrpc.GenerateRandomSeedResponse")
	proto.RegisterType((*DecodeSeedRequest)(nil), "walletrpc.DecodeSeedRequest")
	proto.RegisterType((*DecodeSeedResponse)(nil), "walletrpc.DecodeSeedResponse")
	proto.RegisterType((*StartAutoBuyerRequest)(nil), "walletrpc.StartAutoBuyerRequest")
	proto.RegisterType((*StartAutoBuyerResponse)(nil), "walletrpc.StartAutoBuyerResponse")
	proto.RegisterType((*StopAutoBuyerRequest)(nil), "walletrpc.StopAutoBuyerRequest")
	proto.RegisterType((*StopAutoBuyerResponse)(nil), "walletrpc.StopAutoBuyerResponse")
	proto.RegisterType((*TicketBuyerConfigRequest)(nil), "walletrpc.TicketBuyerConfigRequest")
	proto.RegisterType((*TicketBuyerConfigResponse)(nil), "walletrpc.TicketBuyerConfigResponse")
	proto.RegisterType((*SetAccountRequest)(nil), "walletrpc.SetAccountRequest")
	proto.RegisterType((*SetAccountResponse)(nil), "walletrpc.SetAccountResponse")
	proto.RegisterType((*SetBalanceToMaintainRequest)(nil), "walletrpc.SetBalanceToMaintainRequest")
	proto.RegisterType((*SetBalanceToMaintainResponse)(nil), "walletrpc.SetBalanceToMaintainResponse")
	proto.RegisterType((*SetMaxFeeRequest)(nil), "walletrpc.SetMaxFeeRequest")
	proto.RegisterType((*SetMaxFeeResponse)(nil), "walletrpc.SetMaxFeeResponse")
	proto.RegisterType((*SetMaxPriceRelativeRequest)(nil), "walletrpc.SetMaxPriceRelativeRequest")
	proto.RegisterType((*SetMaxPriceRelativeResponse)(nil), "walletrpc.SetMaxPriceRelativeResponse")
	proto.RegisterType((*SetMaxPriceAbsoluteRequest)(nil), "walletrpc.SetMaxPriceAbsoluteRequest")
	proto.RegisterType((*SetMaxPriceAbsoluteResponse)(nil), "walletrpc.SetMaxPriceAbsoluteResponse")
	proto.RegisterType((*SetVotingAddressRequest)(nil), "walletrpc.SetVotingAddressRequest")
	proto.RegisterType((*SetVotingAddressResponse)(nil), "walletrpc.SetVotingAddressResponse")
	proto.RegisterType((*SetNoSplitTransactionRequest)(nil), "walletrpc.SetNoSplitTransactionRequest")
	proto.RegisterType((*SetNoSplitTransactionResponse)(nil), "walletrpc.SetNoSplitTransactionResponse")
	proto.RegisterType((*SetPoolAddressRequest)(nil), "walletrpc.SetPoolAddressRequest")
	proto.RegisterType((*SetPoolAddressResponse)(nil), "walletrpc.SetPoolAddressResponse")
	proto.RegisterType((*SetPoolFeesRequest)(nil), "walletrpc.SetPoolFeesRequest")
	proto.RegisterType((*SetPoolFeesResponse)(nil), "walletrpc.SetPoolFeesResponse")
	proto.RegisterType((*SetMaxPerBlockRequest)(nil), "walletrpc.SetMaxPerBlockRequest")
	proto.RegisterType((*SetMaxPerBlockResponse)(nil), "walletrpc.SetMaxPerBlockResponse")
	proto.RegisterType((*AgendasRequest)(nil), "walletrpc.AgendasRequest")
	proto.RegisterType((*AgendasResponse)(nil), "walletrpc.AgendasResponse")
	proto.RegisterType((*AgendasResponse_Agenda)(nil), "walletrpc.AgendasResponse.Agenda")
	proto.RegisterType((*AgendasResponse_Choice)(nil), "walletrpc.AgendasResponse.Choice")
	proto.RegisterType((*VoteChoicesRequest)(nil), "walletrpc.VoteChoicesRequest")
	proto.RegisterType((*VoteChoicesResponse)(nil), "walletrpc.VoteChoicesResponse")
	proto.RegisterType((*VoteChoicesResponse_Choice)(nil), "walletrpc.VoteChoicesResponse.Choice")
	proto.RegisterType((*SetVoteChoicesRequest)(nil), "walletrpc.SetVoteChoicesRequest")
	proto.RegisterType((*SetVoteChoicesRequest_Choice)(nil), "walletrpc.SetVoteChoicesRequest.Choice")
	proto.RegisterType((*SetVoteChoicesResponse)(nil), "walletrpc.SetVoteChoicesResponse")
	proto.RegisterType((*VerifyMessageRequest)(nil), "walletrpc.VerifyMessageRequest")
	proto.RegisterType((*VerifyMessageResponse)(nil), "walletrpc.VerifyMessageResponse")
	proto.RegisterEnum("walletrpc.TransactionDetails_TransactionType", TransactionDetails_TransactionType_name, TransactionDetails_TransactionType_value)
	proto.RegisterEnum("walletrpc.NextAddressRequest_Kind", NextAddressRequest_Kind_name, NextAddressRequest_Kind_value)
	proto.RegisterEnum("walletrpc.NextAddressRequest_GapPolicy", NextAddressRequest_GapPolicy_name, NextAddressRequest_GapPolicy_value)
	proto.RegisterEnum("walletrpc.GetTicketsResponse_TicketDetails_TicketStatus", GetTicketsResponse_TicketDetails_TicketStatus_name, GetTicketsResponse_TicketDetails_TicketStatus_value)
	proto.RegisterEnum("walletrpc.ChangePassphraseRequest_Key", ChangePassphraseRequest_Key_name, ChangePassphraseRequest_Key_value)
	proto.RegisterEnum("walletrpc.ConstructTransactionRequest_OutputSelectionAlgorithm", ConstructTransactionRequest_OutputSelectionAlgorithm_name, ConstructTransactionRequest_OutputSelectionAlgorithm_value)
	proto.RegisterEnum("walletrpc.CreateSignatureRequest_SigHashType", CreateSignatureRequest_SigHashType_name, CreateSignatureRequest_SigHashType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VersionService service

type VersionServiceClient interface {
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type versionServiceClient struct {
	cc *grpc.ClientConn
}

func NewVersionServiceClient(cc *grpc.ClientConn) VersionServiceClient {
	return &versionServiceClient{cc}
}

func (c *versionServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := grpc.Invoke(ctx, "/walletrpc.VersionService/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VersionService service

type VersionServiceServer interface {
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
}

func RegisterVersionServiceServer(s *grpc.Server, srv VersionServiceServer) {
	s.RegisterService(&_VersionService_serviceDesc, srv)
}

func _VersionService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.VersionService/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "walletrpc.VersionService",
	HandlerType: (*VersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _VersionService_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for WalletService service

type WalletServiceClient interface {
	// Queries
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Network(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*NetworkResponse, error)
	AccountNumber(ctx context.Context, in *AccountNumberRequest, opts ...grpc.CallOption) (*AccountNumberResponse, error)
	Accounts(ctx context.Context, in *AccountsRequest, opts ...grpc.CallOption) (*AccountsResponse, error)
	Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (WalletService_GetTransactionsClient, error)
	GetTickets(ctx context.Context, in *GetTicketsRequest, opts ...grpc.CallOption) (WalletService_GetTicketsClient, error)
	TicketPrice(ctx context.Context, in *TicketPriceRequest, opts ...grpc.CallOption) (*TicketPriceResponse, error)
	StakeInfo(ctx context.Context, in *StakeInfoRequest, opts ...grpc.CallOption) (*StakeInfoResponse, error)
	BlockInfo(ctx context.Context, in *BlockInfoRequest, opts ...grpc.CallOption) (*BlockInfoResponse, error)
	// Notifications
	TransactionNotifications(ctx context.Context, in *TransactionNotificationsRequest, opts ...grpc.CallOption) (WalletService_TransactionNotificationsClient, error)
	AccountNotifications(ctx context.Context, in *AccountNotificationsRequest, opts ...grpc.CallOption) (WalletService_AccountNotificationsClient, error)
	ConfirmationNotifications(ctx context.Context, opts ...grpc.CallOption) (WalletService_ConfirmationNotificationsClient, error)
	// Control
	ChangePassphrase(ctx context.Context, in *ChangePassphraseRequest, opts ...grpc.CallOption) (*ChangePassphraseResponse, error)
	RenameAccount(ctx context.Context, in *RenameAccountRequest, opts ...grpc.CallOption) (*RenameAccountResponse, error)
	Rescan(ctx context.Context, in *RescanRequest, opts ...grpc.CallOption) (WalletService_RescanClient, error)
	NextAccount(ctx context.Context, in *NextAccountRequest, opts ...grpc.CallOption) (*NextAccountResponse, error)
	NextAddress(ctx context.Context, in *NextAddressRequest, opts ...grpc.CallOption) (*NextAddressResponse, error)
	ImportPrivateKey(ctx context.Context, in *ImportPrivateKeyRequest, opts ...grpc.CallOption) (*ImportPrivateKeyResponse, error)
	ImportScript(ctx context.Context, in *ImportScriptRequest, opts ...grpc.CallOption) (*ImportScriptResponse, error)
	FundTransaction(ctx context.Context, in *FundTransactionRequest, opts ...grpc.CallOption) (*FundTransactionResponse, error)
	ConstructTransaction(ctx context.Context, in *ConstructTransactionRequest, opts ...grpc.CallOption) (*ConstructTransactionResponse, error)
	SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*SignTransactionResponse, error)
	CreateSignature(ctx context.Context, in *CreateSignatureRequest, opts ...grpc.CallOption) (*CreateSignatureResponse, error)
	PublishTransaction(ctx context.Context, in *PublishTransactionRequest, opts ...grpc.CallOption) (*PublishTransactionResponse, error)
	PurchaseTickets(ctx context.Context, in *PurchaseTicketsRequest, opts ...grpc.CallOption) (*PurchaseTicketsResponse, error)
	RevokeTickets(ctx context.Context, in *RevokeTicketsRequest, opts ...grpc.CallOption) (*RevokeTicketsResponse, error)
	LoadActiveDataFilters(ctx context.Context, in *LoadActiveDataFiltersRequest, opts ...grpc.CallOption) (*LoadActiveDataFiltersResponse, error)
	SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignMessageResponse, error)
}

type walletServiceClient struct {
	cc *grpc.ClientConn
}

func NewWalletServiceClient(cc *grpc.ClientConn) WalletServiceClient {
	return &walletServiceClient{cc}
}

func (c *walletServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) Network(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*NetworkResponse, error) {
	out := new(NetworkResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/Network", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) AccountNumber(ctx context.Context, in *AccountNumberRequest, opts ...grpc.CallOption) (*AccountNumberResponse, error) {
	out := new(AccountNumberResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/AccountNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) Accounts(ctx context.Context, in *AccountsRequest, opts ...grpc.CallOption) (*AccountsResponse, error) {
	out := new(AccountsResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/Accounts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	out := new(BalanceResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/Balance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	out := new(GetTransactionResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/GetTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (WalletService_GetTransactionsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WalletService_serviceDesc.Streams[0], c.cc, "/walletrpc.WalletService/GetTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &walletServiceGetTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WalletService_GetTransactionsClient interface {
	Recv() (*GetTransactionsResponse, error)
	grpc.ClientStream
}

type walletServiceGetTransactionsClient struct {
	grpc.ClientStream
}

func (x *walletServiceGetTransactionsClient) Recv() (*GetTransactionsResponse, error) {
	m := new(GetTransactionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *walletServiceClient) GetTickets(ctx context.Context, in *GetTicketsRequest, opts ...grpc.CallOption) (WalletService_GetTicketsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WalletService_serviceDesc.Streams[1], c.cc, "/walletrpc.WalletService/GetTickets", opts...)
	if err != nil {
		return nil, err
	}
	x := &walletServiceGetTicketsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WalletService_GetTicketsClient interface {
	Recv() (*GetTicketsResponse, error)
	grpc.ClientStream
}

type walletServiceGetTicketsClient struct {
	grpc.ClientStream
}

func (x *walletServiceGetTicketsClient) Recv() (*GetTicketsResponse, error) {
	m := new(GetTicketsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *walletServiceClient) TicketPrice(ctx context.Context, in *TicketPriceRequest, opts ...grpc.CallOption) (*TicketPriceResponse, error) {
	out := new(TicketPriceResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/TicketPrice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) StakeInfo(ctx context.Context, in *StakeInfoRequest, opts ...grpc.CallOption) (*StakeInfoResponse, error) {
	out := new(StakeInfoResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/StakeInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) BlockInfo(ctx context.Context, in *BlockInfoRequest, opts ...grpc.CallOption) (*BlockInfoResponse, error) {
	out := new(BlockInfoResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/BlockInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) TransactionNotifications(ctx context.Context, in *TransactionNotificationsRequest, opts ...grpc.CallOption) (WalletService_TransactionNotificationsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WalletService_serviceDesc.Streams[2], c.cc, "/walletrpc.WalletService/TransactionNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &walletServiceTransactionNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WalletService_TransactionNotificationsClient interface {
	Recv() (*TransactionNotificationsResponse, error)
	grpc.ClientStream
}

type walletServiceTransactionNotificationsClient struct {
	grpc.ClientStream
}

func (x *walletServiceTransactionNotificationsClient) Recv() (*TransactionNotificationsResponse, error) {
	m := new(TransactionNotificationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *walletServiceClient) AccountNotifications(ctx context.Context, in *AccountNotificationsRequest, opts ...grpc.CallOption) (WalletService_AccountNotificationsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WalletService_serviceDesc.Streams[3], c.cc, "/walletrpc.WalletService/AccountNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &walletServiceAccountNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WalletService_AccountNotificationsClient interface {
	Recv() (*AccountNotificationsResponse, error)
	grpc.ClientStream
}

type walletServiceAccountNotificationsClient struct {
	grpc.ClientStream
}

func (x *walletServiceAccountNotificationsClient) Recv() (*AccountNotificationsResponse, error) {
	m := new(AccountNotificationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *walletServiceClient) ConfirmationNotifications(ctx context.Context, opts ...grpc.CallOption) (WalletService_ConfirmationNotificationsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WalletService_serviceDesc.Streams[4], c.cc, "/walletrpc.WalletService/ConfirmationNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &walletServiceConfirmationNotificationsClient{stream}
	return x, nil
}

type WalletService_ConfirmationNotificationsClient interface {
	Send(*ConfirmationNotificationsRequest) error
	Recv() (*ConfirmationNotificationsResponse, error)
	grpc.ClientStream
}

type walletServiceConfirmationNotificationsClient struct {
	grpc.ClientStream
}

func (x *walletServiceConfirmationNotificationsClient) Send(m *ConfirmationNotificationsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *walletServiceConfirmationNotificationsClient) Recv() (*ConfirmationNotificationsResponse, error) {
	m := new(ConfirmationNotificationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *walletServiceClient) ChangePassphrase(ctx context.Context, in *ChangePassphraseRequest, opts ...grpc.CallOption) (*ChangePassphraseResponse, error) {
	out := new(ChangePassphraseResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/ChangePassphrase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) RenameAccount(ctx context.Context, in *RenameAccountRequest, opts ...grpc.CallOption) (*RenameAccountResponse, error) {
	out := new(RenameAccountResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/RenameAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) Rescan(ctx context.Context, in *RescanRequest, opts ...grpc.CallOption) (WalletService_RescanClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WalletService_serviceDesc.Streams[5], c.cc, "/walletrpc.WalletService/Rescan", opts...)
	if err != nil {
		return nil, err
	}
	x := &walletServiceRescanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WalletService_RescanClient interface {
	Recv() (*RescanResponse, error)
	grpc.ClientStream
}

type walletServiceRescanClient struct {
	grpc.ClientStream
}

func (x *walletServiceRescanClient) Recv() (*RescanResponse, error) {
	m := new(RescanResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *walletServiceClient) NextAccount(ctx context.Context, in *NextAccountRequest, opts ...grpc.CallOption) (*NextAccountResponse, error) {
	out := new(NextAccountResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/NextAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) NextAddress(ctx context.Context, in *NextAddressRequest, opts ...grpc.CallOption) (*NextAddressResponse, error) {
	out := new(NextAddressResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/NextAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ImportPrivateKey(ctx context.Context, in *ImportPrivateKeyRequest, opts ...grpc.CallOption) (*ImportPrivateKeyResponse, error) {
	out := new(ImportPrivateKeyResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/ImportPrivateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ImportScript(ctx context.Context, in *ImportScriptRequest, opts ...grpc.CallOption) (*ImportScriptResponse, error) {
	out := new(ImportScriptResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/ImportScript", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) FundTransaction(ctx context.Context, in *FundTransactionRequest, opts ...grpc.CallOption) (*FundTransactionResponse, error) {
	out := new(FundTransactionResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/FundTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) ConstructTransaction(ctx context.Context, in *ConstructTransactionRequest, opts ...grpc.CallOption) (*ConstructTransactionResponse, error) {
	out := new(ConstructTransactionResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/ConstructTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SignTransaction(ctx context.Context, in *SignTransactionRequest, opts ...grpc.CallOption) (*SignTransactionResponse, error) {
	out := new(SignTransactionResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/SignTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) CreateSignature(ctx context.Context, in *CreateSignatureRequest, opts ...grpc.CallOption) (*CreateSignatureResponse, error) {
	out := new(CreateSignatureResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/CreateSignature", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) PublishTransaction(ctx context.Context, in *PublishTransactionRequest, opts ...grpc.CallOption) (*PublishTransactionResponse, error) {
	out := new(PublishTransactionResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/PublishTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) PurchaseTickets(ctx context.Context, in *PurchaseTicketsRequest, opts ...grpc.CallOption) (*PurchaseTicketsResponse, error) {
	out := new(PurchaseTicketsResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/PurchaseTickets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) RevokeTickets(ctx context.Context, in *RevokeTicketsRequest, opts ...grpc.CallOption) (*RevokeTicketsResponse, error) {
	out := new(RevokeTicketsResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/RevokeTickets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) LoadActiveDataFilters(ctx context.Context, in *LoadActiveDataFiltersRequest, opts ...grpc.CallOption) (*LoadActiveDataFiltersResponse, error) {
	out := new(LoadActiveDataFiltersResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/LoadActiveDataFilters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletServiceClient) SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignMessageResponse, error) {
	out := new(SignMessageResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletService/SignMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WalletService service

type WalletServiceServer interface {
	// Queries
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Network(context.Context, *NetworkRequest) (*NetworkResponse, error)
	AccountNumber(context.Context, *AccountNumberRequest) (*AccountNumberResponse, error)
	Accounts(context.Context, *AccountsRequest) (*AccountsResponse, error)
	Balance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	GetTransactions(*GetTransactionsRequest, WalletService_GetTransactionsServer) error
	GetTickets(*GetTicketsRequest, WalletService_GetTicketsServer) error
	TicketPrice(context.Context, *TicketPriceRequest) (*TicketPriceResponse, error)
	StakeInfo(context.Context, *StakeInfoRequest) (*StakeInfoResponse, error)
	BlockInfo(context.Context, *BlockInfoRequest) (*BlockInfoResponse, error)
	// Notifications
	TransactionNotifications(*TransactionNotificationsRequest, WalletService_TransactionNotificationsServer) error
	AccountNotifications(*AccountNotificationsRequest, WalletService_AccountNotificationsServer) error
	ConfirmationNotifications(WalletService_ConfirmationNotificationsServer) error
	// Control
	ChangePassphrase(context.Context, *ChangePassphraseRequest) (*ChangePassphraseResponse, error)
	RenameAccount(context.Context, *RenameAccountRequest) (*RenameAccountResponse, error)
	Rescan(*RescanRequest, WalletService_RescanServer) error
	NextAccount(context.Context, *NextAccountRequest) (*NextAccountResponse, error)
	NextAddress(context.Context, *NextAddressRequest) (*NextAddressResponse, error)
	ImportPrivateKey(context.Context, *ImportPrivateKeyRequest) (*ImportPrivateKeyResponse, error)
	ImportScript(context.Context, *ImportScriptRequest) (*ImportScriptResponse, error)
	FundTransaction(context.Context, *FundTransactionRequest) (*FundTransactionResponse, error)
	ConstructTransaction(context.Context, *ConstructTransactionRequest) (*ConstructTransactionResponse, error)
	SignTransaction(context.Context, *SignTransactionRequest) (*SignTransactionResponse, error)
	CreateSignature(context.Context, *CreateSignatureRequest) (*CreateSignatureResponse, error)
	PublishTransaction(context.Context, *PublishTransactionRequest) (*PublishTransactionResponse, error)
	PurchaseTickets(context.Context, *PurchaseTicketsRequest) (*PurchaseTicketsResponse, error)
	RevokeTickets(context.Context, *RevokeTicketsRequest) (*RevokeTicketsResponse, error)
	LoadActiveDataFilters(context.Context, *LoadActiveDataFiltersRequest) (*LoadActiveDataFiltersResponse, error)
	SignMessage(context.Context, *SignMessageRequest) (*SignMessageResponse, error)
}

func RegisterWalletServiceServer(s *grpc.Server, srv WalletServiceServer) {
	s.RegisterService(&_WalletService_serviceDesc, srv)
}

func _WalletService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_Network_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).Network(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/Network",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).Network(ctx, req.(*NetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_AccountNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).AccountNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/AccountNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).AccountNumber(ctx, req.(*AccountNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_Accounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).Accounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/Accounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).Accounts(ctx, req.(*AccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).Balance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_GetTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalletServiceServer).GetTransactions(m, &walletServiceGetTransactionsServer{stream})
}

type WalletService_GetTransactionsServer interface {
	Send(*GetTransactionsResponse) error
	grpc.ServerStream
}

type walletServiceGetTransactionsServer struct {
	grpc.ServerStream
}

func (x *walletServiceGetTransactionsServer) Send(m *GetTransactionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WalletService_GetTickets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTicketsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalletServiceServer).GetTickets(m, &walletServiceGetTicketsServer{stream})
}

type WalletService_GetTicketsServer interface {
	Send(*GetTicketsResponse) error
	grpc.ServerStream
}

type walletServiceGetTicketsServer struct {
	grpc.ServerStream
}

func (x *walletServiceGetTicketsServer) Send(m *GetTicketsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WalletService_TicketPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).TicketPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/TicketPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).TicketPrice(ctx, req.(*TicketPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_StakeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).StakeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/StakeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).StakeInfo(ctx, req.(*StakeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_BlockInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).BlockInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/BlockInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).BlockInfo(ctx, req.(*BlockInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_TransactionNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionNotificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalletServiceServer).TransactionNotifications(m, &walletServiceTransactionNotificationsServer{stream})
}

type WalletService_TransactionNotificationsServer interface {
	Send(*TransactionNotificationsResponse) error
	grpc.ServerStream
}

type walletServiceTransactionNotificationsServer struct {
	grpc.ServerStream
}

func (x *walletServiceTransactionNotificationsServer) Send(m *TransactionNotificationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WalletService_AccountNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountNotificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalletServiceServer).AccountNotifications(m, &walletServiceAccountNotificationsServer{stream})
}

type WalletService_AccountNotificationsServer interface {
	Send(*AccountNotificationsResponse) error
	grpc.ServerStream
}

type walletServiceAccountNotificationsServer struct {
	grpc.ServerStream
}

func (x *walletServiceAccountNotificationsServer) Send(m *AccountNotificationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WalletService_ConfirmationNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WalletServiceServer).ConfirmationNotifications(&walletServiceConfirmationNotificationsServer{stream})
}

type WalletService_ConfirmationNotificationsServer interface {
	Send(*ConfirmationNotificationsResponse) error
	Recv() (*ConfirmationNotificationsRequest, error)
	grpc.ServerStream
}

type walletServiceConfirmationNotificationsServer struct {
	grpc.ServerStream
}

func (x *walletServiceConfirmationNotificationsServer) Send(m *ConfirmationNotificationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *walletServiceConfirmationNotificationsServer) Recv() (*ConfirmationNotificationsRequest, error) {
	m := new(ConfirmationNotificationsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _WalletService_ChangePassphrase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePassphraseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ChangePassphrase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/ChangePassphrase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ChangePassphrase(ctx, req.(*ChangePassphraseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_RenameAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).RenameAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/RenameAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).RenameAccount(ctx, req.(*RenameAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_Rescan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RescanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WalletServiceServer).Rescan(m, &walletServiceRescanServer{stream})
}

type WalletService_RescanServer interface {
	Send(*RescanResponse) error
	grpc.ServerStream
}

type walletServiceRescanServer struct {
	grpc.ServerStream
}

func (x *walletServiceRescanServer) Send(m *RescanResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _WalletService_NextAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).NextAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/NextAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).NextAccount(ctx, req.(*NextAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_NextAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).NextAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/NextAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).NextAddress(ctx, req.(*NextAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ImportPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportPrivateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ImportPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/ImportPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ImportPrivateKey(ctx, req.(*ImportPrivateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ImportScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ImportScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/ImportScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ImportScript(ctx, req.(*ImportScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_FundTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).FundTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/FundTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).FundTransaction(ctx, req.(*FundTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_ConstructTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConstructTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).ConstructTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/ConstructTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).ConstructTransaction(ctx, req.(*ConstructTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SignTransaction(ctx, req.(*SignTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_CreateSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).CreateSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/CreateSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).CreateSignature(ctx, req.(*CreateSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_PublishTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).PublishTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/PublishTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).PublishTransaction(ctx, req.(*PublishTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_PurchaseTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).PurchaseTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/PurchaseTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).PurchaseTickets(ctx, req.(*PurchaseTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_RevokeTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).RevokeTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/RevokeTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).RevokeTickets(ctx, req.(*RevokeTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_LoadActiveDataFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadActiveDataFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).LoadActiveDataFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/LoadActiveDataFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).LoadActiveDataFilters(ctx, req.(*LoadActiveDataFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletService_SignMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServiceServer).SignMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletService/SignMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServiceServer).SignMessage(ctx, req.(*SignMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalletService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "walletrpc.WalletService",
	HandlerType: (*WalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _WalletService_Ping_Handler,
		},
		{
			MethodName: "Network",
			Handler:    _WalletService_Network_Handler,
		},
		{
			MethodName: "AccountNumber",
			Handler:    _WalletService_AccountNumber_Handler,
		},
		{
			MethodName: "Accounts",
			Handler:    _WalletService_Accounts_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _WalletService_Balance_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _WalletService_GetTransaction_Handler,
		},
		{
			MethodName: "TicketPrice",
			Handler:    _WalletService_TicketPrice_Handler,
		},
		{
			MethodName: "StakeInfo",
			Handler:    _WalletService_StakeInfo_Handler,
		},
		{
			MethodName: "BlockInfo",
			Handler:    _WalletService_BlockInfo_Handler,
		},
		{
			MethodName: "ChangePassphrase",
			Handler:    _WalletService_ChangePassphrase_Handler,
		},
		{
			MethodName: "RenameAccount",
			Handler:    _WalletService_RenameAccount_Handler,
		},
		{
			MethodName: "NextAccount",
			Handler:    _WalletService_NextAccount_Handler,
		},
		{
			MethodName: "NextAddress",
			Handler:    _WalletService_NextAddress_Handler,
		},
		{
			MethodName: "ImportPrivateKey",
			Handler:    _WalletService_ImportPrivateKey_Handler,
		},
		{
			MethodName: "ImportScript",
			Handler:    _WalletService_ImportScript_Handler,
		},
		{
			MethodName: "FundTransaction",
			Handler:    _WalletService_FundTransaction_Handler,
		},
		{
			MethodName: "ConstructTransaction",
			Handler:    _WalletService_ConstructTransaction_Handler,
		},
		{
			MethodName: "SignTransaction",
			Handler:    _WalletService_SignTransaction_Handler,
		},
		{
			MethodName: "CreateSignature",
			Handler:    _WalletService_CreateSignature_Handler,
		},
		{
			MethodName: "PublishTransaction",
			Handler:    _WalletService_PublishTransaction_Handler,
		},
		{
			MethodName: "PurchaseTickets",
			Handler:    _WalletService_PurchaseTickets_Handler,
		},
		{
			MethodName: "RevokeTickets",
			Handler:    _WalletService_RevokeTickets_Handler,
		},
		{
			MethodName: "LoadActiveDataFilters",
			Handler:    _WalletService_LoadActiveDataFilters_Handler,
		},
		{
			MethodName: "SignMessage",
			Handler:    _WalletService_SignMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTransactions",
			Handler:       _WalletService_GetTransactions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTickets",
			Handler:       _WalletService_GetTickets_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TransactionNotifications",
			Handler:       _WalletService_TransactionNotifications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AccountNotifications",
			Handler:       _WalletService_AccountNotifications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConfirmationNotifications",
			Handler:       _WalletService_ConfirmationNotifications_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Rescan",
			Handler:       _WalletService_Rescan_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}

// Client API for WalletLoaderService service

type WalletLoaderServiceClient interface {
	WalletExists(ctx context.Context, in *WalletExistsRequest, opts ...grpc.CallOption) (*WalletExistsResponse, error)
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error)
	OpenWallet(ctx context.Context, in *OpenWalletRequest, opts ...grpc.CallOption) (*OpenWalletResponse, error)
	CloseWallet(ctx context.Context, in *CloseWalletRequest, opts ...grpc.CallOption) (*CloseWalletResponse, error)
	StartConsensusRpc(ctx context.Context, in *StartConsensusRpcRequest, opts ...grpc.CallOption) (*StartConsensusRpcResponse, error)
	DiscoverAddresses(ctx context.Context, in *DiscoverAddressesRequest, opts ...grpc.CallOption) (*DiscoverAddressesResponse, error)
	SubscribeToBlockNotifications(ctx context.Context, in *SubscribeToBlockNotificationsRequest, opts ...grpc.CallOption) (*SubscribeToBlockNotificationsResponse, error)
	FetchHeaders(ctx context.Context, in *FetchHeadersRequest, opts ...grpc.CallOption) (*FetchHeadersResponse, error)
}

type walletLoaderServiceClient struct {
	cc *grpc.ClientConn
}

func NewWalletLoaderServiceClient(cc *grpc.ClientConn) WalletLoaderServiceClient {
	return &walletLoaderServiceClient{cc}
}

func (c *walletLoaderServiceClient) WalletExists(ctx context.Context, in *WalletExistsRequest, opts ...grpc.CallOption) (*WalletExistsResponse, error) {
	out := new(WalletExistsResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletLoaderService/WalletExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletLoaderServiceClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error) {
	out := new(CreateWalletResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletLoaderService/CreateWallet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletLoaderServiceClient) OpenWallet(ctx context.Context, in *OpenWalletRequest, opts ...grpc.CallOption) (*OpenWalletResponse, error) {
	out := new(OpenWalletResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletLoaderService/OpenWallet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletLoaderServiceClient) CloseWallet(ctx context.Context, in *CloseWalletRequest, opts ...grpc.CallOption) (*CloseWalletResponse, error) {
	out := new(CloseWalletResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletLoaderService/CloseWallet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletLoaderServiceClient) StartConsensusRpc(ctx context.Context, in *StartConsensusRpcRequest, opts ...grpc.CallOption) (*StartConsensusRpcResponse, error) {
	out := new(StartConsensusRpcResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletLoaderService/StartConsensusRpc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletLoaderServiceClient) DiscoverAddresses(ctx context.Context, in *DiscoverAddressesRequest, opts ...grpc.CallOption) (*DiscoverAddressesResponse, error) {
	out := new(DiscoverAddressesResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletLoaderService/DiscoverAddresses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletLoaderServiceClient) SubscribeToBlockNotifications(ctx context.Context, in *SubscribeToBlockNotificationsRequest, opts ...grpc.CallOption) (*SubscribeToBlockNotificationsResponse, error) {
	out := new(SubscribeToBlockNotificationsResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletLoaderService/SubscribeToBlockNotifications", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletLoaderServiceClient) FetchHeaders(ctx context.Context, in *FetchHeadersRequest, opts ...grpc.CallOption) (*FetchHeadersResponse, error) {
	out := new(FetchHeadersResponse)
	err := grpc.Invoke(ctx, "/walletrpc.WalletLoaderService/FetchHeaders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WalletLoaderService service

type WalletLoaderServiceServer interface {
	WalletExists(context.Context, *WalletExistsRequest) (*WalletExistsResponse, error)
	CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error)
	OpenWallet(context.Context, *OpenWalletRequest) (*OpenWalletResponse, error)
	CloseWallet(context.Context, *CloseWalletRequest) (*CloseWalletResponse, error)
	StartConsensusRpc(context.Context, *StartConsensusRpcRequest) (*StartConsensusRpcResponse, error)
	DiscoverAddresses(context.Context, *DiscoverAddressesRequest) (*DiscoverAddressesResponse, error)
	SubscribeToBlockNotifications(context.Context, *SubscribeToBlockNotificationsRequest) (*SubscribeToBlockNotificationsResponse, error)
	FetchHeaders(context.Context, *FetchHeadersRequest) (*FetchHeadersResponse, error)
}

func RegisterWalletLoaderServiceServer(s *grpc.Server, srv WalletLoaderServiceServer) {
	s.RegisterService(&_WalletLoaderService_serviceDesc, srv)
}

func _WalletLoaderService_WalletExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletLoaderServiceServer).WalletExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletLoaderService/WalletExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletLoaderServiceServer).WalletExists(ctx, req.(*WalletExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletLoaderService_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletLoaderServiceServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletLoaderService/CreateWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletLoaderServiceServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletLoaderService_OpenWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletLoaderServiceServer).OpenWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletLoaderService/OpenWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletLoaderServiceServer).OpenWallet(ctx, req.(*OpenWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletLoaderService_CloseWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletLoaderServiceServer).CloseWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletLoaderService/CloseWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletLoaderServiceServer).CloseWallet(ctx, req.(*CloseWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletLoaderService_StartConsensusRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartConsensusRpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletLoaderServiceServer).StartConsensusRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletLoaderService/StartConsensusRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletLoaderServiceServer).StartConsensusRpc(ctx, req.(*StartConsensusRpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletLoaderService_DiscoverAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletLoaderServiceServer).DiscoverAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletLoaderService/DiscoverAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletLoaderServiceServer).DiscoverAddresses(ctx, req.(*DiscoverAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletLoaderService_SubscribeToBlockNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeToBlockNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletLoaderServiceServer).SubscribeToBlockNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletLoaderService/SubscribeToBlockNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletLoaderServiceServer).SubscribeToBlockNotifications(ctx, req.(*SubscribeToBlockNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletLoaderService_FetchHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletLoaderServiceServer).FetchHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.WalletLoaderService/FetchHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletLoaderServiceServer).FetchHeaders(ctx, req.(*FetchHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalletLoaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "walletrpc.WalletLoaderService",
	HandlerType: (*WalletLoaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WalletExists",
			Handler:    _WalletLoaderService_WalletExists_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _WalletLoaderService_CreateWallet_Handler,
		},
		{
			MethodName: "OpenWallet",
			Handler:    _WalletLoaderService_OpenWallet_Handler,
		},
		{
			MethodName: "CloseWallet",
			Handler:    _WalletLoaderService_CloseWallet_Handler,
		},
		{
			MethodName: "StartConsensusRpc",
			Handler:    _WalletLoaderService_StartConsensusRpc_Handler,
		},
		{
			MethodName: "DiscoverAddresses",
			Handler:    _WalletLoaderService_DiscoverAddresses_Handler,
		},
		{
			MethodName: "SubscribeToBlockNotifications",
			Handler:    _WalletLoaderService_SubscribeToBlockNotifications_Handler,
		},
		{
			MethodName: "FetchHeaders",
			Handler:    _WalletLoaderService_FetchHeaders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for TicketBuyerService service

type TicketBuyerServiceClient interface {
	StartAutoBuyer(ctx context.Context, in *StartAutoBuyerRequest, opts ...grpc.CallOption) (*StartAutoBuyerResponse, error)
	StopAutoBuyer(ctx context.Context, in *StopAutoBuyerRequest, opts ...grpc.CallOption) (*StopAutoBuyerResponse, error)
	TicketBuyerConfig(ctx context.Context, in *TicketBuyerConfigRequest, opts ...grpc.CallOption) (*TicketBuyerConfigResponse, error)
	SetAccount(ctx context.Context, in *SetAccountRequest, opts ...grpc.CallOption) (*SetAccountResponse, error)
	SetBalanceToMaintain(ctx context.Context, in *SetBalanceToMaintainRequest, opts ...grpc.CallOption) (*SetBalanceToMaintainResponse, error)
	SetMaxFee(ctx context.Context, in *SetMaxFeeRequest, opts ...grpc.CallOption) (*SetMaxFeeResponse, error)
	SetMaxPriceRelative(ctx context.Context, in *SetMaxPriceRelativeRequest, opts ...grpc.CallOption) (*SetMaxPriceRelativeResponse, error)
	SetMaxPriceAbsolute(ctx context.Context, in *SetMaxPriceAbsoluteRequest, opts ...grpc.CallOption) (*SetMaxPriceAbsoluteResponse, error)
	SetVotingAddress(ctx context.Context, in *SetVotingAddressRequest, opts ...grpc.CallOption) (*SetVotingAddressResponse, error)
	SetPoolAddress(ctx context.Context, in *SetPoolAddressRequest, opts ...grpc.CallOption) (*SetPoolAddressResponse, error)
	SetPoolFees(ctx context.Context, in *SetPoolFeesRequest, opts ...grpc.CallOption) (*SetPoolFeesResponse, error)
	SetMaxPerBlock(ctx context.Context, in *SetMaxPerBlockRequest, opts ...grpc.CallOption) (*SetMaxPerBlockResponse, error)
	SetNoSplitTransaction(ctx context.Context, in *SetNoSplitTransactionRequest, opts ...grpc.CallOption) (*SetNoSplitTransactionResponse, error)
}

type ticketBuyerServiceClient struct {
	cc *grpc.ClientConn
}

func NewTicketBuyerServiceClient(cc *grpc.ClientConn) TicketBuyerServiceClient {
	return &ticketBuyerServiceClient{cc}
}

func (c *ticketBuyerServiceClient) StartAutoBuyer(ctx context.Context, in *StartAutoBuyerRequest, opts ...grpc.CallOption) (*StartAutoBuyerResponse, error) {
	out := new(StartAutoBuyerResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/StartAutoBuyer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) StopAutoBuyer(ctx context.Context, in *StopAutoBuyerRequest, opts ...grpc.CallOption) (*StopAutoBuyerResponse, error) {
	out := new(StopAutoBuyerResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/StopAutoBuyer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) TicketBuyerConfig(ctx context.Context, in *TicketBuyerConfigRequest, opts ...grpc.CallOption) (*TicketBuyerConfigResponse, error) {
	out := new(TicketBuyerConfigResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/TicketBuyerConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetAccount(ctx context.Context, in *SetAccountRequest, opts ...grpc.CallOption) (*SetAccountResponse, error) {
	out := new(SetAccountResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetBalanceToMaintain(ctx context.Context, in *SetBalanceToMaintainRequest, opts ...grpc.CallOption) (*SetBalanceToMaintainResponse, error) {
	out := new(SetBalanceToMaintainResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetBalanceToMaintain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetMaxFee(ctx context.Context, in *SetMaxFeeRequest, opts ...grpc.CallOption) (*SetMaxFeeResponse, error) {
	out := new(SetMaxFeeResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetMaxFee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetMaxPriceRelative(ctx context.Context, in *SetMaxPriceRelativeRequest, opts ...grpc.CallOption) (*SetMaxPriceRelativeResponse, error) {
	out := new(SetMaxPriceRelativeResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetMaxPriceRelative", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetMaxPriceAbsolute(ctx context.Context, in *SetMaxPriceAbsoluteRequest, opts ...grpc.CallOption) (*SetMaxPriceAbsoluteResponse, error) {
	out := new(SetMaxPriceAbsoluteResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetMaxPriceAbsolute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetVotingAddress(ctx context.Context, in *SetVotingAddressRequest, opts ...grpc.CallOption) (*SetVotingAddressResponse, error) {
	out := new(SetVotingAddressResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetVotingAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetPoolAddress(ctx context.Context, in *SetPoolAddressRequest, opts ...grpc.CallOption) (*SetPoolAddressResponse, error) {
	out := new(SetPoolAddressResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetPoolAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetPoolFees(ctx context.Context, in *SetPoolFeesRequest, opts ...grpc.CallOption) (*SetPoolFeesResponse, error) {
	out := new(SetPoolFeesResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetPoolFees", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetMaxPerBlock(ctx context.Context, in *SetMaxPerBlockRequest, opts ...grpc.CallOption) (*SetMaxPerBlockResponse, error) {
	out := new(SetMaxPerBlockResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetMaxPerBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketBuyerServiceClient) SetNoSplitTransaction(ctx context.Context, in *SetNoSplitTransactionRequest, opts ...grpc.CallOption) (*SetNoSplitTransactionResponse, error) {
	out := new(SetNoSplitTransactionResponse)
	err := grpc.Invoke(ctx, "/walletrpc.TicketBuyerService/SetNoSplitTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TicketBuyerService service

type TicketBuyerServiceServer interface {
	StartAutoBuyer(context.Context, *StartAutoBuyerRequest) (*StartAutoBuyerResponse, error)
	StopAutoBuyer(context.Context, *StopAutoBuyerRequest) (*StopAutoBuyerResponse, error)
	TicketBuyerConfig(context.Context, *TicketBuyerConfigRequest) (*TicketBuyerConfigResponse, error)
	SetAccount(context.Context, *SetAccountRequest) (*SetAccountResponse, error)
	SetBalanceToMaintain(context.Context, *SetBalanceToMaintainRequest) (*SetBalanceToMaintainResponse, error)
	SetMaxFee(context.Context, *SetMaxFeeRequest) (*SetMaxFeeResponse, error)
	SetMaxPriceRelative(context.Context, *SetMaxPriceRelativeRequest) (*SetMaxPriceRelativeResponse, error)
	SetMaxPriceAbsolute(context.Context, *SetMaxPriceAbsoluteRequest) (*SetMaxPriceAbsoluteResponse, error)
	SetVotingAddress(context.Context, *SetVotingAddressRequest) (*SetVotingAddressResponse, error)
	SetPoolAddress(context.Context, *SetPoolAddressRequest) (*SetPoolAddressResponse, error)
	SetPoolFees(context.Context, *SetPoolFeesRequest) (*SetPoolFeesResponse, error)
	SetMaxPerBlock(context.Context, *SetMaxPerBlockRequest) (*SetMaxPerBlockResponse, error)
	SetNoSplitTransaction(context.Context, *SetNoSplitTransactionRequest) (*SetNoSplitTransactionResponse, error)
}

func RegisterTicketBuyerServiceServer(s *grpc.Server, srv TicketBuyerServiceServer) {
	s.RegisterService(&_TicketBuyerService_serviceDesc, srv)
}

func _TicketBuyerService_StartAutoBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartAutoBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).StartAutoBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/StartAutoBuyer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).StartAutoBuyer(ctx, req.(*StartAutoBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_StopAutoBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAutoBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).StopAutoBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/StopAutoBuyer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).StopAutoBuyer(ctx, req.(*StopAutoBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_TicketBuyerConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketBuyerConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).TicketBuyerConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/TicketBuyerConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).TicketBuyerConfig(ctx, req.(*TicketBuyerConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetAccount(ctx, req.(*SetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetBalanceToMaintain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBalanceToMaintainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetBalanceToMaintain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetBalanceToMaintain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetBalanceToMaintain(ctx, req.(*SetBalanceToMaintainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetMaxFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMaxFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetMaxFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetMaxFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetMaxFee(ctx, req.(*SetMaxFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetMaxPriceRelative_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMaxPriceRelativeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetMaxPriceRelative(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetMaxPriceRelative",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetMaxPriceRelative(ctx, req.(*SetMaxPriceRelativeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetMaxPriceAbsolute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMaxPriceAbsoluteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetMaxPriceAbsolute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetMaxPriceAbsolute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetMaxPriceAbsolute(ctx, req.(*SetMaxPriceAbsoluteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetVotingAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVotingAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetVotingAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetVotingAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetVotingAddress(ctx, req.(*SetVotingAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetPoolAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPoolAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetPoolAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetPoolAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetPoolAddress(ctx, req.(*SetPoolAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetPoolFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPoolFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetPoolFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetPoolFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetPoolFees(ctx, req.(*SetPoolFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetMaxPerBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMaxPerBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetMaxPerBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetMaxPerBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetMaxPerBlock(ctx, req.(*SetMaxPerBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketBuyerService_SetNoSplitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNoSplitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketBuyerServiceServer).SetNoSplitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.TicketBuyerService/SetNoSplitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketBuyerServiceServer).SetNoSplitTransaction(ctx, req.(*SetNoSplitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TicketBuyerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "walletrpc.TicketBuyerService",
	HandlerType: (*TicketBuyerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartAutoBuyer",
			Handler:    _TicketBuyerService_StartAutoBuyer_Handler,
		},
		{
			MethodName: "StopAutoBuyer",
			Handler:    _TicketBuyerService_StopAutoBuyer_Handler,
		},
		{
			MethodName: "TicketBuyerConfig",
			Handler:    _TicketBuyerService_TicketBuyerConfig_Handler,
		},
		{
			MethodName: "SetAccount",
			Handler:    _TicketBuyerService_SetAccount_Handler,
		},
		{
			MethodName: "SetBalanceToMaintain",
			Handler:    _TicketBuyerService_SetBalanceToMaintain_Handler,
		},
		{
			MethodName: "SetMaxFee",
			Handler:    _TicketBuyerService_SetMaxFee_Handler,
		},
		{
			MethodName: "SetMaxPriceRelative",
			Handler:    _TicketBuyerService_SetMaxPriceRelative_Handler,
		},
		{
			MethodName: "SetMaxPriceAbsolute",
			Handler:    _TicketBuyerService_SetMaxPriceAbsolute_Handler,
		},
		{
			MethodName: "SetVotingAddress",
			Handler:    _TicketBuyerService_SetVotingAddress_Handler,
		},
		{
			MethodName: "SetPoolAddress",
			Handler:    _TicketBuyerService_SetPoolAddress_Handler,
		},
		{
			MethodName: "SetPoolFees",
			Handler:    _TicketBuyerService_SetPoolFees_Handler,
		},
		{
			MethodName: "SetMaxPerBlock",
			Handler:    _TicketBuyerService_SetMaxPerBlock_Handler,
		},
		{
			MethodName: "SetNoSplitTransaction",
			Handler:    _TicketBuyerService_SetNoSplitTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for SeedService service

type SeedServiceClient interface {
	GenerateRandomSeed(ctx context.Context, in *GenerateRandomSeedRequest, opts ...grpc.CallOption) (*GenerateRandomSeedResponse, error)
	DecodeSeed(ctx context.Context, in *DecodeSeedRequest, opts ...grpc.CallOption) (*DecodeSeedResponse, error)
}

type seedServiceClient struct {
	cc *grpc.ClientConn
}

func NewSeedServiceClient(cc *grpc.ClientConn) SeedServiceClient {
	return &seedServiceClient{cc}
}

func (c *seedServiceClient) GenerateRandomSeed(ctx context.Context, in *GenerateRandomSeedRequest, opts ...grpc.CallOption) (*GenerateRandomSeedResponse, error) {
	out := new(GenerateRandomSeedResponse)
	err := grpc.Invoke(ctx, "/walletrpc.SeedService/GenerateRandomSeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seedServiceClient) DecodeSeed(ctx context.Context, in *DecodeSeedRequest, opts ...grpc.CallOption) (*DecodeSeedResponse, error) {
	out := new(DecodeSeedResponse)
	err := grpc.Invoke(ctx, "/walletrpc.SeedService/DecodeSeed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SeedService service

type SeedServiceServer interface {
	GenerateRandomSeed(context.Context, *GenerateRandomSeedRequest) (*GenerateRandomSeedResponse, error)
	DecodeSeed(context.Context, *DecodeSeedRequest) (*DecodeSeedResponse, error)
}

func RegisterSeedServiceServer(s *grpc.Server, srv SeedServiceServer) {
	s.RegisterService(&_SeedService_serviceDesc, srv)
}

func _SeedService_GenerateRandomSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRandomSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedServiceServer).GenerateRandomSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.SeedService/GenerateRandomSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedServiceServer).GenerateRandomSeed(ctx, req.(*GenerateRandomSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeedService_DecodeSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeedServiceServer).DecodeSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.SeedService/DecodeSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeedServiceServer).DecodeSeed(ctx, req.(*DecodeSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SeedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "walletrpc.SeedService",
	HandlerType: (*SeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateRandomSeed",
			Handler:    _SeedService_GenerateRandomSeed_Handler,
		},
		{
			MethodName: "DecodeSeed",
			Handler:    _SeedService_DecodeSeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for AgendaService service

type AgendaServiceClient interface {
	Agendas(ctx context.Context, in *AgendasRequest, opts ...grpc.CallOption) (*AgendasResponse, error)
}

type agendaServiceClient struct {
	cc *grpc.ClientConn
}

func NewAgendaServiceClient(cc *grpc.ClientConn) AgendaServiceClient {
	return &agendaServiceClient{cc}
}

func (c *agendaServiceClient) Agendas(ctx context.Context, in *AgendasRequest, opts ...grpc.CallOption) (*AgendasResponse, error) {
	out := new(AgendasResponse)
	err := grpc.Invoke(ctx, "/walletrpc.AgendaService/Agendas", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AgendaService service

type AgendaServiceServer interface {
	Agendas(context.Context, *AgendasRequest) (*AgendasResponse, error)
}

func RegisterAgendaServiceServer(s *grpc.Server, srv AgendaServiceServer) {
	s.RegisterService(&_AgendaService_serviceDesc, srv)
}

func _AgendaService_Agendas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgendasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgendaServiceServer).Agendas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.AgendaService/Agendas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgendaServiceServer).Agendas(ctx, req.(*AgendasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AgendaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "walletrpc.AgendaService",
	HandlerType: (*AgendaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Agendas",
			Handler:    _AgendaService_Agendas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for VotingService service

type VotingServiceClient interface {
	VoteChoices(ctx context.Context, in *VoteChoicesRequest, opts ...grpc.CallOption) (*VoteChoicesResponse, error)
	SetVoteChoices(ctx context.Context, in *SetVoteChoicesRequest, opts ...grpc.CallOption) (*SetVoteChoicesResponse, error)
}

type votingServiceClient struct {
	cc *grpc.ClientConn
}

func NewVotingServiceClient(cc *grpc.ClientConn) VotingServiceClient {
	return &votingServiceClient{cc}
}

func (c *votingServiceClient) VoteChoices(ctx context.Context, in *VoteChoicesRequest, opts ...grpc.CallOption) (*VoteChoicesResponse, error) {
	out := new(VoteChoicesResponse)
	err := grpc.Invoke(ctx, "/walletrpc.VotingService/VoteChoices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) SetVoteChoices(ctx context.Context, in *SetVoteChoicesRequest, opts ...grpc.CallOption) (*SetVoteChoicesResponse, error) {
	out := new(SetVoteChoicesResponse)
	err := grpc.Invoke(ctx, "/walletrpc.VotingService/SetVoteChoices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VotingService service

type VotingServiceServer interface {
	VoteChoices(context.Context, *VoteChoicesRequest) (*VoteChoicesResponse, error)
	SetVoteChoices(context.Context, *SetVoteChoicesRequest) (*SetVoteChoicesResponse, error)
}

func RegisterVotingServiceServer(s *grpc.Server, srv VotingServiceServer) {
	s.RegisterService(&_VotingService_serviceDesc, srv)
}

func _VotingService_VoteChoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteChoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).VoteChoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.VotingService/VoteChoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).VoteChoices(ctx, req.(*VoteChoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_SetVoteChoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVoteChoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).SetVoteChoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.VotingService/SetVoteChoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).SetVoteChoices(ctx, req.(*SetVoteChoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VotingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "walletrpc.VotingService",
	HandlerType: (*VotingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VoteChoices",
			Handler:    _VotingService_VoteChoices_Handler,
		},
		{
			MethodName: "SetVoteChoices",
			Handler:    _VotingService_SetVoteChoices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for MessageVerificationService service

type MessageVerificationServiceClient interface {
	VerifyMessage(ctx context.Context, in *VerifyMessageRequest, opts ...grpc.CallOption) (*VerifyMessageResponse, error)
}

type messageVerificationServiceClient struct {
	cc *grpc.ClientConn
}

func NewMessageVerificationServiceClient(cc *grpc.ClientConn) MessageVerificationServiceClient {
	return &messageVerificationServiceClient{cc}
}

func (c *messageVerificationServiceClient) VerifyMessage(ctx context.Context, in *VerifyMessageRequest, opts ...grpc.CallOption) (*VerifyMessageResponse, error) {
	out := new(VerifyMessageResponse)
	err := grpc.Invoke(ctx, "/walletrpc.MessageVerificationService/VerifyMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MessageVerificationService service

type MessageVerificationServiceServer interface {
	VerifyMessage(context.Context, *VerifyMessageRequest) (*VerifyMessageResponse, error)
}

func RegisterMessageVerificationServiceServer(s *grpc.Server, srv MessageVerificationServiceServer) {
	s.RegisterService(&_MessageVerificationService_serviceDesc, srv)
}

func _MessageVerificationService_VerifyMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageVerificationServiceServer).VerifyMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/walletrpc.MessageVerificationService/VerifyMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageVerificationServiceServer).VerifyMessage(ctx, req.(*VerifyMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageVerificationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "walletrpc.MessageVerificationService",
	HandlerType: (*MessageVerificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyMessage",
			Handler:    _MessageVerificationService_VerifyMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 6029 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x7c, 0x4b, 0x6f, 0x23, 0xd9,
	0x75, 0xf0, 0x94, 0xa8, 0x07, 0x79, 0x44, 0x52, 0xe4, 0xd5, 0x8b, 0x62, 0x77, 0x4f, 0x77, 0x57,
	0x4f, 0x4f, 0xb7, 0x3d, 0xd3, 0x72, 0x8f, 0x3c, 0xf6, 0xcc, 0x67, 0xcf, 0x37, 0x63, 0xb6, 0xa4,
	0xee, 0xa1, 0x5b, 0xa2, 0x98, 0xa2, 0xfa, 0x31, 0x9e, 0xc4, 0x85, 0x12, 0xeb, 0x4a, 0x2a, 0x37,
	0x59, 0xc5, 0xa9, 0x2a, 0xea, 0x31, 0x49, 0x00, 0x63, 0x80, 0x64, 0x13, 0x64, 0x91, 0x5d, 0x00,
	0xc3, 0x49, 0x80, 0x6c, 0x02, 0xe4, 0xfd, 0x40, 0x12, 0xc0, 0x2b, 0x67, 0x1b, 0x04, 0x41, 0x90,
	0xff, 0x10, 0x20, 0xab, 0x00, 0x59, 0x64, 0x1d, 0xdc, 0x57, 0xd5, 0xbd, 0xf5, 0xa0, 0xa4, 0xb6,
	0x57, 0x59, 0x89, 0x75, 0xee, 0xb9, 0xe7, 0xbe, 0xce, 0x39, 0xf7, 0xbc, 0xae, 0xa0, 0x64, 0x8d,
	0x9c, 0xf5, 0x91, 0xef, 0x85, 0x1e, 0x2a, 0x9d, 0x5a, 0x83, 0x01, 0x0e, 0xfd, 0x51, 0x5f, 0xaf,
	0x41, 0xf5, 0x39, 0xf6, 0x03, 0xc7, 0x73, 0x0d, 0xfc, 0xc5, 0x18, 0x07, 0xa1, 0xfe, 0x73, 0x0d,
	0x16, 0x22, 0x50, 0x30, 0xf2, 0xdc, 0x00, 0xa3, 0xbb, 0x50, 0x3d, 0x61, 0x20, 0x33, 0x08, 0x7d,
	0xc7, 0x3d, 0x6a, 0x68, 0xb7, 0xb4, 0xfb, 0x25, 0xa3, 0xc2, 0xa1, 0x3d, 0x0a, 0x44, 0x4b, 0x30,
	0x33, 0xb4, 0x7e, 0xe4, 0xf9, 0x8d, 0xa9, 0x5b, 0xda, 0xfd, 0x8a, 0xc1, 0x3e, 0x28, 0xd4, 0x71,
	0x3d, 0xbf, 0x51, 0xe0, 0x50, 0xf2, 0x41, 0xa0, 0x23, 0x2b, 0xec, 0x1f, 0x37, 0xa6, 0x19, 0x94,
	0x7e, 0xa0, 0x37, 0x01, 0x46, 0x3e, 0xf6, 0xf1, 0x00, 0x5b, 0x01, 0x6e, 0xcc, 0xd0, 0x41, 0x24,
	0x08, 0x99, 0xc8, 0xc1, 0xd8, 0x19, 0xd8, 0xe6, 0x10, 0x87, 0x96, 0x6d, 0x85, 0x56, 0x63, 0x96,
	0x4d, 0x84, 0x42, 0x77, 0x39, 0x50, 0xff, 0xd7, 0x19, 0x40, 0xfb, 0xbe, 0xe5, 0x06, 0x56, 0x3f,
	0x74, 0x3c, 0x77, 0x0b, 0x87, 0x96, 0x33, 0x08, 0x10, 0x82, 0xe9, 0x63, 0x2b, 0x38, 0xa6, 0x93,
	0x2f, 0x1b, 0xf4, 0x37, 0xba, 0x05, 0xf3, 0x61, 0x8c, 0x49, 0x67, 0x5e, 0x36, 0x64, 0x10, 0xfa,
	0x2e, 0xcc, 0xda, 0xf8, 0xc0, 0x09, 0x83, 0x46, 0xe1, 0x56, 0xe1, 0xfe, 0xfc, 0xc6, 0x9d, 0xf5,
	0x68, 0xfb, 0xd6, 0xd3, 0x83, 0xac, 0xb7, 0xdd, 0xd1, 0x38, 0x34, 0x78, 0x17, 0xf4, 0x31, 0xcc,
	0xf5, 0x7d, 0x6c, 0x93, 0xde, 0xd3, 0xb4, 0xf7, 0x5b, 0x93, 0x7b, 0xef, 0x8d, 0x43, 0xd2, 0x5d,
	0x74, 0x42, 0x35, 0x28, 0x1c, 0x62, 0xb6, 0x13, 0x05, 0x83, 0xfc, 0x44, 0xd7, 0xa1, 0x14, 0x3a,
	0x43, 0x1c, 0x84, 0xd6, 0x70, 0x44, 0x57, 0x5f, 0x30, 0x62, 0x00, 0x7a, 0x09, 0x35, 0x69, 0xee,
	0x66, 0x78, 0x3e, 0xc2, 0x8d, 0xb9, 0x5b, 0xda, 0xfd, 0xea, 0xc6, 0x83, 0xc9, 0x03, 0x4b, 0xa0,
	0xfd, 0xf3, 0x11, 0x36, 0x16, 0x42, 0x15, 0xd0, 0xfc, 0x02, 0x66, 0xe8, 0xd2, 0xc8, 0xc9, 0x39,
	0xae, 0x8d, 0xcf, 0xe8, 0x36, 0x56, 0x0c, 0xf6, 0x81, 0xbe, 0x06, 0xb5, 0x91, 0x8f, 0x4f, 0x1c,
	0x6f, 0x1c, 0x98, 0x56, 0xbf, 0xef, 0x8d, 0xdd, 0x90, 0xb3, 0xc1, 0x82, 0x80, 0xb7, 0x18, 0x18,
	0xdd, 0x83, 0x85, 0x18, 0x75, 0x48, 0x31, 0x0b, 0x74, 0x1d, 0xd5, 0x08, 0x93, 0x42, 0x9b, 0x7f,
	0xaa, 0xc1, 0x2c, 0xdb, 0x90, 0x9c, 0x41, 0x1b, 0x30, 0xa7, 0x8e, 0x25, 0x3e, 0x51, 0x13, 0x8a,
	0x8e, 0x1b, 0x62, 0xdf, 0xb5, 0x06, 0x94, 0x78, 0xd1, 0x88, 0xbe, 0xd1, 0x0a, 0xcc, 0xf2, 0x61,
	0xa7, 0xe9, 0xb0, 0xfc, 0x8b, 0x52, 0xb3, 0x6d, 0x1f, 0x07, 0x01, 0xe7, 0x3c, 0xf1, 0x89, 0xee,
	0x40, 0xc5, 0xa3, 0xf3, 0x30, 0x83, 0xbe, 0xef, 0x8c, 0x42, 0xba, 0xef, 0x65, 0xa3, 0xcc, 0x80,
	0x3d, 0x0a, 0xd3, 0x3f, 0x87, 0x85, 0xc4, 0x26, 0xa2, 0x79, 0x98, 0x33, 0xb6, 0x9f, 0x3c, 0xdb,
	0x69, 0x19, 0xb5, 0x37, 0x50, 0x19, 0x8a, 0x9b, 0x7b, 0xed, 0xce, 0xa3, 0x56, 0x6f, 0xbb, 0x36,
	0x8d, 0x16, 0x61, 0x61, 0xbf, 0xbd, 0xf9, 0x74, 0x7b, 0xdf, 0xec, 0x3e, 0x33, 0x36, 0x3f, 0x25,
	0x40, 0x0d, 0x15, 0x61, 0xfa, 0xf9, 0xde, 0xfe, 0x76, 0x6d, 0x0a, 0x55, 0x01, 0x8c, 0xed, 0xe7,
	0x7b, 0x9b, 0xad, 0xfd, 0xf6, 0x5e, 0xa7, 0x56, 0xd0, 0x7f, 0xa2, 0x41, 0xf9, 0xd1, 0xc0, 0xeb,
	0xbf, 0x9a, 0xc4, 0xcb, 0x2b, 0x30, 0x7b, 0x8c, 0x9d, 0xa3, 0x63, 0xb6, 0x1b, 0x33, 0x06, 0xff,
	0x52, 0x59, 0xa6, 0x90, 0x64, 0x99, 0x16, 0x94, 0xa5, 0xb3, 0x16, 0x7c, 0x7a, 0x63, 0x22, 0xbb,
	0x18, 0x4a, 0x17, 0x7d, 0x0f, 0xaa, 0xfc, 0x70, 0x1f, 0x59, 0x03, 0xcb, 0xed, 0x63, 0xf9, 0x64,
	0x34, 0xf5, 0x64, 0xee, 0x40, 0x25, 0xf4, 0x42, 0x6b, 0x60, 0x1e, 0x30, 0x54, 0x3a, 0xd7, 0x82,
	0x51, 0xa6, 0x40, 0xde, 0x5d, 0xaf, 0xc0, 0x7c, 0xd7, 0x71, 0x8f, 0x84, 0x4e, 0xaa, 0x42, 0x99,
	0x7d, 0x32, 0x7d, 0x44, 0xb4, 0x56, 0x07, 0x87, 0xa7, 0x9e, 0xff, 0x4a, 0x60, 0x7c, 0x08, 0x0b,
	0x11, 0x24, 0x56, 0x5a, 0x64, 0x7e, 0x27, 0xd8, 0x74, 0x59, 0x0b, 0x9f, 0x49, 0x85, 0x41, 0x39,
	0xba, 0xfe, 0xff, 0x60, 0x89, 0xcf, 0xbd, 0x33, 0x1e, 0x1e, 0x60, 0x9f, 0x53, 0x44, 0xb7, 0xa1,
	0xcc, 0xa7, 0x6c, 0xba, 0xd6, 0x10, 0x73, 0x8d, 0x37, 0xcf, 0x61, 0x1d, 0x6b, 0x88, 0xf5, 0x8f,
	0x61, 0x39, 0xd1, 0x55, 0x1e, 0x9a, 0xf7, 0xa5, 0x2d, 0xf1, 0xd0, 0x12, 0xba, 0x5e, 0x87, 0x05,
	0xde, 0x3f, 0x10, 0xeb, 0xf8, 0xc7, 0x02, 0xd4, 0x62, 0x18, 0x27, 0xf7, 0x09, 0x14, 0x79, 0xc7,
	0xa0, 0xa1, 0xa5, 0x74, 0x50, 0x12, 0x5d, 0x00, 0x8c, 0xa8, 0x13, 0x7a, 0x17, 0x50, 0x7f, 0xec,
	0xfb, 0xd8, 0x0d, 0xcd, 0x03, 0xc2, 0x44, 0x26, 0x65, 0x1d, 0xa6, 0xeb, 0x6a, 0xbc, 0x85, 0x72,
	0xd7, 0xa7, 0x84, 0x8d, 0x1e, 0xc2, 0x52, 0x02, 0x9b, 0x31, 0x55, 0x81, 0x32, 0x15, 0x52, 0xf0,
	0x69, 0x4b, 0xf3, 0xab, 0x29, 0x98, 0x13, 0xd2, 0x7d, 0xb9, 0xb5, 0xa7, 0xb6, 0x77, 0x2a, 0xb5,
	0xbd, 0x69, 0x4e, 0x29, 0xa4, 0x39, 0x85, 0x2c, 0x0d, 0x9f, 0x31, 0xc1, 0x36, 0x5f, 0xe1, 0x73,
	0xb3, 0x1f, 0x09, 0x76, 0xc5, 0xa8, 0x89, 0x96, 0xa7, 0xf8, 0x7c, 0x93, 0x4e, 0xee, 0x5d, 0x40,
	0x42, 0x0d, 0x48, 0xd8, 0x33, 0x0c, 0x5b, 0xb4, 0x28, 0xd8, 0xc3, 0x91, 0xe7, 0x87, 0xd8, 0x96,
	0xb0, 0x67, 0x39, 0x36, 0x6f, 0x11, 0xd8, 0xfa, 0x4b, 0x58, 0x32, 0x30, 0x59, 0x8b, 0xd8, 0x7f,
	0xce, 0x48, 0x97, 0xdc, 0x90, 0x35, 0x28, 0xba, 0xf8, 0x54, 0xde, 0x8c, 0x39, 0x17, 0x9f, 0x52,
	0x3e, 0x5b, 0x85, 0xe5, 0x04, 0x65, 0x2e, 0x07, 0x1b, 0x50, 0x31, 0x70, 0xd0, 0xb7, 0x5c, 0x89,
	0x69, 0x0f, 0xf0, 0x91, 0xe3, 0x8a, 0x23, 0xd3, 0xe8, 0x91, 0xcd, 0x53, 0x18, 0x3b, 0x2b, 0xfd,
	0xff, 0x43, 0x55, 0xf4, 0xe1, 0xec, 0xf5, 0x0e, 0xd4, 0x7d, 0x0a, 0x71, 0xb1, 0x6d, 0x86, 0xc7,
	0xbe, 0x37, 0x3e, 0x3a, 0xe6, 0x3d, 0x6b, 0x51, 0xc3, 0x3e, 0x83, 0xeb, 0x2f, 0x00, 0x75, 0xf0,
	0x59, 0x98, 0x58, 0x23, 0xb9, 0xb7, 0xad, 0x20, 0x18, 0x1d, 0xfb, 0xe4, 0xde, 0x66, 0x3a, 0x49,
	0x82, 0x5c, 0xe2, 0xb4, 0xf5, 0x8f, 0x60, 0x51, 0x21, 0x7c, 0x35, 0x51, 0xfa, 0x97, 0x29, 0x3e,
	0x2f, 0xa6, 0xb1, 0xc5, 0xbc, 0xf2, 0xd5, 0xd0, 0xb7, 0x61, 0xfa, 0x95, 0xe3, 0xda, 0x74, 0x26,
	0xd5, 0x0d, 0x5d, 0x92, 0xa7, 0x34, 0x99, 0xf5, 0xa7, 0x8e, 0x6b, 0x1b, 0x14, 0x1f, 0x3d, 0x06,
	0x38, 0xb2, 0x46, 0xe6, 0xc8, 0x1b, 0x38, 0xfd, 0x73, 0xca, 0x91, 0xd5, 0x8d, 0x7b, 0x93, 0x7b,
	0x3f, 0xb1, 0x46, 0x5d, 0x8a, 0x6e, 0x94, 0x8e, 0xc4, 0x4f, 0x7d, 0x03, 0xa6, 0x09, 0x55, 0xb4,
	0x04, 0xb5, 0x47, 0xed, 0xee, 0xc3, 0x87, 0xef, 0xbf, 0x6f, 0x6e, 0xbf, 0xdc, 0xdf, 0x36, 0x3a,
	0xad, 0x9d, 0xda, 0x1b, 0x32, 0xb4, 0xdd, 0xe1, 0x50, 0x4d, 0x77, 0xa0, 0x14, 0xd1, 0x42, 0x4d,
	0x58, 0x79, 0xd2, 0xea, 0x9a, 0xdd, 0xbd, 0x9d, 0xf6, 0xe6, 0x67, 0xe6, 0xb3, 0x4e, 0xaf, 0xbb,
	0xbd, 0xd9, 0x7e, 0xdc, 0xde, 0xde, 0x62, 0xdd, 0xa5, 0xb6, 0x6d, 0xc3, 0xd8, 0x33, 0x6a, 0x1a,
	0x5a, 0x86, 0xba, 0x04, 0x6d, 0x3f, 0xe9, 0xec, 0x19, 0xe4, 0xaa, 0x59, 0x84, 0x05, 0x09, 0xfc,
	0xc2, 0x68, 0x75, 0x6b, 0x05, 0xbd, 0xc3, 0x4f, 0x43, 0xac, 0x84, 0x9f, 0x86, 0x74, 0x45, 0x6a,
	0xea, 0x15, 0x79, 0x03, 0x60, 0x34, 0x3e, 0x18, 0x38, 0x7d, 0x22, 0x29, 0xfc, 0x7c, 0x4b, 0x0c,
	0xf2, 0x14, 0x9f, 0xeb, 0x7f, 0xa5, 0xc1, 0x6a, 0x9b, 0x4a, 0x4c, 0xd7, 0x77, 0x4e, 0xac, 0x10,
	0x3f, 0xc5, 0xe7, 0x97, 0x65, 0x9e, 0xfc, 0x5b, 0xfe, 0x6d, 0x62, 0x49, 0x50, 0x72, 0x54, 0x3e,
	0x4f, 0x9d, 0x43, 0x7a, 0x22, 0x25, 0xa3, 0x32, 0x8a, 0x46, 0x79, 0xe1, 0x1c, 0x92, 0x8b, 0x91,
	0x31, 0x32, 0x55, 0x0c, 0x45, 0x83, 0x7f, 0xa1, 0x6b, 0x50, 0x22, 0x7f, 0xcd, 0x43, 0xdf, 0x1b,
	0x52, 0x2d, 0x30, 0x63, 0x14, 0x09, 0xe0, 0xb1, 0xef, 0x0d, 0xf5, 0x26, 0x34, 0xd2, 0x33, 0xe6,
	0x82, 0xf7, 0xd7, 0x1a, 0x2c, 0xb2, 0x46, 0x76, 0xf9, 0x5f, 0x76, 0x29, 0x2b, 0x30, 0xcb, 0x2d,
	0x08, 0xa6, 0x7c, 0xf9, 0x97, 0x34, 0xc1, 0x42, 0xfe, 0x04, 0xa7, 0xd5, 0x09, 0xa2, 0x07, 0x80,
	0x7c, 0xfc, 0xc5, 0xd8, 0xf1, 0xb1, 0xe9, 0x63, 0x1b, 0xe3, 0xa1, 0x75, 0x30, 0x60, 0xa6, 0x62,
	0xd1, 0xa8, 0xf3, 0x16, 0x23, 0x6a, 0xd0, 0x3f, 0x83, 0x25, 0x75, 0xca, 0xfc, 0x4c, 0x6f, 0x43,
	0x79, 0xb4, 0x11, 0x1c, 0x9b, 0xea, 0xc1, 0xce, 0x13, 0x18, 0x3f, 0x7e, 0xb2, 0x2c, 0x69, 0x84,
	0x29, 0x3a, 0x82, 0x04, 0xd1, 0x5d, 0xa8, 0x72, 0x7d, 0x7c, 0x45, 0xa5, 0xf7, 0x2d, 0x58, 0xe1,
	0x13, 0xb5, 0xcd, 0xbe, 0xe7, 0x1e, 0x3a, 0xfe, 0xd0, 0x62, 0x56, 0x08, 0xb3, 0x60, 0x96, 0x45,
	0xeb, 0xa6, 0xdc, 0xa8, 0xff, 0xf1, 0x14, 0x2c, 0x44, 0x03, 0xf2, 0x65, 0x2c, 0xc1, 0x0c, 0xbd,
	0x18, 0xe8, 0x40, 0x05, 0x83, 0x7d, 0x10, 0xd3, 0x27, 0x18, 0x61, 0xd7, 0x8e, 0x26, 0x5e, 0x30,
	0x62, 0x00, 0xb1, 0x44, 0x9d, 0xe1, 0xd0, 0x0a, 0xc7, 0x74, 0x0b, 0x4f, 0x2d, 0xdf, 0x16, 0x96,
	0xa8, 0x00, 0x1b, 0x14, 0x8a, 0xbe, 0x03, 0x6b, 0x11, 0x62, 0x10, 0x5a, 0xaf, 0xb0, 0x79, 0x84,
	0x5d, 0xec, 0xd3, 0xe9, 0x70, 0x2b, 0x72, 0x55, 0x20, 0xf4, 0x48, 0xfb, 0x93, 0xa8, 0x19, 0x7d,
	0x1d, 0xea, 0xe4, 0xaa, 0xc4, 0xb6, 0x79, 0x70, 0x6e, 0x86, 0x4e, 0xff, 0x15, 0x0e, 0x03, 0x6e,
	0xd0, 0x2f, 0xb0, 0x86, 0x47, 0xe7, 0xfb, 0x0c, 0x4c, 0xac, 0xe8, 0x13, 0x2f, 0x74, 0xdc, 0x23,
	0xd3, 0x1a, 0x87, 0xc7, 0x9e, 0xef, 0x84, 0xe7, 0xdc, 0xc6, 0x5f, 0x60, 0xf0, 0x96, 0x00, 0x13,
	0xc7, 0x65, 0xec, 0xf2, 0x3d, 0xc3, 0x36, 0x35, 0xf2, 0x0b, 0x86, 0x0c, 0xd2, 0x1f, 0xc1, 0xf2,
	0x13, 0x1c, 0x4a, 0xc6, 0x9b, 0x38, 0x9c, 0xaf, 0xa9, 0x4e, 0x82, 0x64, 0x47, 0xca, 0x56, 0x3f,
	0xb1, 0x05, 0xf4, 0xcf, 0x60, 0x25, 0x49, 0x23, 0x32, 0x4a, 0x14, 0xc7, 0x89, 0xf4, 0xbf, 0xd0,
	0x6a, 0x94, 0x7b, 0xe8, 0xbf, 0x3f, 0x95, 0xa4, 0x1d, 0xa9, 0xed, 0x75, 0x58, 0x0c, 0x42, 0xcb,
	0xa7, 0x1b, 0x21, 0x19, 0x2c, 0x6c, 0x8e, 0x75, 0xd1, 0x14, 0x5b, 0x2c, 0x1b, 0xb0, 0x9c, 0xc4,
	0x8f, 0xed, 0xe0, 0xba, 0xb1, 0xa8, 0xf6, 0x60, 0x46, 0xf1, 0xd7, 0xa1, 0x8e, 0x5d, 0x3b, 0x31,
	0x42, 0x81, 0xed, 0x02, 0x6b, 0x88, 0xe9, 0xaf, 0xc3, 0xa2, 0x8a, 0xcb, 0xa8, 0x33, 0x81, 0xac,
	0xcb, 0xd8, 0x8c, 0xf6, 0xc7, 0x70, 0x6d, 0xe8, 0xb8, 0xce, 0x70, 0x3c, 0x34, 0x7d, 0xdc, 0x27,
	0x86, 0x94, 0x62, 0x61, 0x33, 0x4d, 0xb3, 0xc6, 0x51, 0x0c, 0x8a, 0x21, 0x6f, 0x83, 0xfe, 0xb7,
	0x1a, 0xac, 0xa6, 0xb6, 0x86, 0xef, 0xfb, 0x63, 0x40, 0x43, 0x87, 0xde, 0xd4, 0x32, 0x49, 0xb6,
	0xfd, 0xab, 0xd2, 0xf6, 0xcb, 0xde, 0x82, 0x51, 0xa7, 0x5d, 0x64, 0x7a, 0xa8, 0x0b, 0x4b, 0x63,
	0x37, 0x83, 0xd2, 0xd4, 0x65, 0xcc, 0xff, 0x45, 0xde, 0x55, 0x99, 0xf5, 0xbf, 0x6b, 0x50, 0x27,
	0xb3, 0x66, 0xbc, 0xfc, 0x7f, 0xe4, 0x2c, 0xf5, 0x3f, 0x2f, 0x00, 0x92, 0x57, 0xc5, 0x8f, 0x61,
	0x13, 0x66, 0x99, 0x2c, 0xf3, 0xad, 0x7f, 0x47, 0xda, 0xb0, 0x34, 0xfa, 0x3a, 0xfb, 0x16, 0xdb,
	0xc7, 0xbb, 0x36, 0xff, 0x6d, 0x0a, 0x2a, 0x4a, 0x0b, 0xfa, 0x56, 0x82, 0xec, 0x05, 0xe7, 0xc0,
	0x91, 0xd1, 0x07, 0x30, 0x47, 0xb5, 0x1a, 0x66, 0xb1, 0x97, 0x0b, 0xfb, 0x09, 0x6c, 0xf4, 0x6b,
	0x50, 0x61, 0x24, 0x88, 0x5a, 0x0b, 0xc7, 0x01, 0xb7, 0x68, 0x3e, 0xbc, 0xc2, 0x6a, 0xf8, 0x57,
	0x8f, 0xf6, 0x37, 0xca, 0xa1, 0xf4, 0xa5, 0x7f, 0x01, 0x65, 0xb9, 0x95, 0x38, 0xc4, 0xcf, 0x3a,
	0x4f, 0x3b, 0x7b, 0x2f, 0x3a, 0xb5, 0x37, 0xd8, 0xc7, 0x6e, 0xbb, 0xb3, 0xbd, 0x55, 0xd3, 0x88,
	0x77, 0xdc, 0xde, 0xdd, 0x6d, 0xed, 0x3f, 0xa3, 0x36, 0x49, 0x11, 0xa6, 0x77, 0xda, 0xcf, 0xb7,
	0x6b, 0x05, 0x54, 0x82, 0x19, 0xe2, 0x12, 0x6f, 0xd5, 0xa6, 0x11, 0xc0, 0xec, 0x6e, 0xbb, 0xd7,
	0xdb, 0xde, 0xaa, 0xcd, 0x90, 0xbe, 0xdb, 0x2f, 0xbb, 0x6d, 0x63, 0x7b, 0xab, 0x36, 0xcb, 0xdc,
	0xec, 0xe7, 0x7b, 0x4f, 0xb7, 0xb7, 0x6a, 0x73, 0xfa, 0x12, 0x20, 0x36, 0x64, 0xd7, 0x77, 0xa2,
	0xfb, 0x48, 0xef, 0xc2, 0xa2, 0x02, 0x8d, 0xef, 0x3e, 0xbe, 0xfc, 0x11, 0x81, 0xf3, 0xbb, 0x63,
	0x3e, 0x8c, 0x51, 0xf3, 0x9c, 0x6a, 0x1d, 0x41, 0x8d, 0x6a, 0xfa, 0xb6, 0x7b, 0xe8, 0x89, 0x51,
	0xfe, 0x61, 0x0a, 0xea, 0x12, 0x90, 0x0f, 0x72, 0x0d, 0x4a, 0x23, 0xcf, 0x1b, 0x98, 0x81, 0xf3,
	0x25, 0xe6, 0xd7, 0x60, 0x91, 0x00, 0x7a, 0xce, 0x97, 0x98, 0x98, 0x30, 0xd6, 0x60, 0x60, 0x0e,
	0xf1, 0x90, 0xe2, 0x84, 0xce, 0x19, 0x37, 0x72, 0x2a, 0xd6, 0x60, 0xb0, 0xcb, 0xa0, 0xfb, 0xce,
	0x19, 0xc1, 0xf3, 0x4e, 0x5d, 0x05, 0x8f, 0xc5, 0xd3, 0x2a, 0xde, 0xa9, 0x2b, 0xe1, 0x35, 0xa1,
	0x28, 0x2e, 0x22, 0xee, 0x05, 0x45, 0xdf, 0x08, 0xc1, 0xf4, 0xc0, 0x39, 0xc1, 0xdc, 0xdf, 0xa1,
	0xbf, 0xc9, 0xb5, 0x79, 0xe2, 0x85, 0xd8, 0xe6, 0x6e, 0x0d, 0xfb, 0x20, 0x8b, 0x1e, 0x3a, 0x41,
	0xc0, 0xef, 0x95, 0x8a, 0xc1, 0xbf, 0x88, 0x29, 0xe6, 0xe3, 0x13, 0xef, 0x15, 0xb6, 0x1b, 0x45,
	0x66, 0x8a, 0xf1, 0x4f, 0xd2, 0x82, 0xcf, 0x46, 0xe4, 0xaa, 0x6e, 0x94, 0x58, 0x0b, 0xff, 0x8c,
	0xdd, 0xb8, 0x60, 0x7c, 0x10, 0x38, 0xf6, 0x79, 0x03, 0x24, 0x37, 0xae, 0xc7, 0x60, 0xfa, 0x3e,
	0xd4, 0xa8, 0xd0, 0x49, 0xbb, 0x49, 0x4c, 0xca, 0x94, 0xc2, 0x28, 0x1d, 0x44, 0x82, 0x4c, 0x7c,
	0x9d, 0xa4, 0x7e, 0x20, 0xbe, 0x8e, 0x24, 0xbb, 0xff, 0xa9, 0x41, 0x5d, 0x22, 0xcb, 0xcf, 0xe3,
	0x17, 0xa6, 0x8b, 0xde, 0x82, 0x8a, 0x6a, 0xad, 0x30, 0xd7, 0x58, 0x05, 0xaa, 0x61, 0x97, 0xe9,
	0x64, 0xd8, 0x45, 0x1a, 0xc6, 0x22, 0x72, 0x3b, 0xc3, 0x22, 0x8f, 0x7c, 0x18, 0x02, 0x22, 0x8e,
	0x19, 0x33, 0x36, 0x1c, 0xf7, 0xc4, 0x1a, 0x38, 0xb6, 0x25, 0xce, 0xa9, 0x68, 0xd4, 0x02, 0xc6,
	0x66, 0x11, 0x5c, 0xff, 0xb9, 0x06, 0xab, 0x9b, 0xc7, 0x96, 0x7b, 0x84, 0xbb, 0x91, 0xbd, 0x29,
	0x76, 0xf2, 0x43, 0x28, 0x10, 0xab, 0x5c, 0xa3, 0xb2, 0xfd, 0xb6, 0x24, 0xdb, 0x39, 0x1d, 0xd6,
	0x89, 0xad, 0x4b, 0xba, 0x10, 0x3b, 0xce, 0x1b, 0xd8, 0xa6, 0x64, 0xd4, 0x32, 0xc3, 0xb5, 0xe2,
	0x0d, 0xec, 0xb8, 0x1b, 0x41, 0x23, 0xce, 0xab, 0x84, 0xc6, 0xb4, 0x6f, 0xc5, 0xc5, 0xa7, 0x31,
	0x9a, 0xfe, 0x26, 0x14, 0x9e, 0xe2, 0x73, 0x22, 0xaf, 0x5d, 0xa3, 0xfd, 0xbc, 0xb5, 0xbf, 0x5d,
	0x7b, 0x83, 0x48, 0x75, 0xf7, 0xd9, 0xa3, 0x9d, 0xf6, 0x66, 0x4d, 0x23, 0x26, 0x77, 0x7a, 0x46,
	0xdc, 0xe4, 0xfe, 0xf1, 0x14, 0xac, 0x3c, 0x1e, 0xbb, 0x76, 0x86, 0x3d, 0x33, 0x39, 0xd8, 0x64,
	0xf9, 0x47, 0x38, 0x14, 0x81, 0x46, 0x11, 0x6c, 0xa2, 0x40, 0x16, 0x66, 0x9c, 0x60, 0x84, 0x16,
	0x26, 0x18, 0xa1, 0xe8, 0x23, 0x68, 0x3a, 0x6e, 0x7f, 0x30, 0xb6, 0xb1, 0x19, 0xd9, 0x86, 0x7d,
	0xcf, 0x71, 0x0f, 0xac, 0x00, 0x07, 0xdc, 0xd1, 0x68, 0x70, 0x8c, 0x36, 0x47, 0xd8, 0x14, 0xed,
	0xe4, 0x9a, 0x13, 0xbd, 0xfb, 0x74, 0xc9, 0x22, 0xb4, 0xc8, 0xec, 0xf7, 0x45, 0xde, 0xc8, 0xb6,
	0x83, 0x47, 0x18, 0xff, 0xbe, 0x00, 0xab, 0xa9, 0x2d, 0xe0, 0x4c, 0xfd, 0xab, 0x50, 0x0b, 0xf0,
	0x00, 0xf7, 0x43, 0x6c, 0x9b, 0x2c, 0x2c, 0x29, 0x62, 0x45, 0xef, 0x49, 0xe7, 0x9d, 0xd3, 0x7b,
	0xbd, 0xcb, 0x03, 0xaf, 0x3c, 0xfc, 0xbc, 0x20, 0x48, 0xb1, 0xef, 0x80, 0xea, 0x49, 0x2a, 0xc3,
	0xca, 0x36, 0xce, 0x53, 0x18, 0xdf, 0xc5, 0xfb, 0x50, 0xe3, 0x0b, 0x19, 0xbd, 0x12, 0x6b, 0x61,
	0x4c, 0x50, 0x65, 0xf0, 0xee, 0x2b, 0xb6, 0x8c, 0xe6, 0x7f, 0x69, 0x50, 0x55, 0x07, 0xbc, 0x82,
	0x45, 0x4a, 0xa6, 0xc2, 0x63, 0xb1, 0x2c, 0x20, 0xcc, 0xb4, 0xe5, 0x3c, 0x83, 0xb5, 0x69, 0x58,
	0x38, 0x0e, 0xf0, 0x16, 0x94, 0x00, 0x2f, 0x51, 0xc4, 0xd1, 0xdc, 0xa6, 0x29, 0xf9, 0xe2, 0x88,
	0xcf, 0x8a, 0xd0, 0x25, 0xb6, 0x9a, 0x73, 0x82, 0x4d, 0x22, 0xa4, 0xdc, 0x42, 0x9f, 0xe7, 0xb0,
	0x7d, 0x87, 0x05, 0xa4, 0x88, 0x23, 0x16, 0x9d, 0x32, 0x97, 0xc5, 0x32, 0x01, 0x8a, 0x93, 0x25,
	0x4a, 0x36, 0xf4, 0x31, 0x8b, 0xba, 0xcf, 0x18, 0xf4, 0xb7, 0xfe, 0xe3, 0x59, 0xb8, 0xb6, 0xe9,
	0xb9, 0x41, 0xe8, 0x8f, 0xfb, 0x59, 0x06, 0xf9, 0x5d, 0xa8, 0x06, 0xde, 0xd8, 0xef, 0x63, 0x53,
	0xe5, 0xe3, 0x0a, 0x83, 0x8a, 0xd0, 0xda, 0xeb, 0x79, 0x4b, 0xe8, 0x3a, 0xc0, 0x21, 0xc6, 0xe6,
	0x08, 0xfb, 0xe6, 0xab, 0x03, 0xce, 0xd3, 0xc5, 0x43, 0x8c, 0xbb, 0xd8, 0x7f, 0x7a, 0x80, 0x7e,
	0x13, 0x9a, 0x22, 0xb6, 0x4d, 0x0f, 0x9d, 0xec, 0xbf, 0x35, 0x38, 0x22, 0x4e, 0xc6, 0x31, 0xf3,
	0x39, 0xab, 0x1b, 0x9f, 0xc8, 0x2a, 0x23, 0x7f, 0x1d, 0x3c, 0x7b, 0xd1, 0x13, 0x74, 0x5a, 0x82,
	0x8c, 0xd1, 0xf0, 0x72, 0x5a, 0xd0, 0xe7, 0x80, 0x5c, 0xcf, 0x15, 0x32, 0x20, 0x38, 0x77, 0x86,
	0x72, 0xee, 0x83, 0x2b, 0x0d, 0x6b, 0xd4, 0x5c, 0xcf, 0x65, 0xf2, 0x22, 0xd8, 0xf6, 0x08, 0x10,
	0x27, 0x6c, 0xe3, 0x20, 0x74, 0x5c, 0xe6, 0xaf, 0xcd, 0x52, 0x0b, 0xe9, 0xc3, 0x2b, 0x11, 0xdf,
	0x8a, 0xfb, 0x1b, 0x75, 0x46, 0x53, 0x02, 0x35, 0x07, 0x50, 0x4f, 0xe1, 0x4d, 0x08, 0x96, 0xe4,
	0x85, 0x01, 0x08, 0x1f, 0xd0, 0x5f, 0x26, 0x4f, 0xac, 0x89, 0x3b, 0x9e, 0x41, 0x79, 0x5a, 0xae,
	0xf9, 0x1b, 0x51, 0x5a, 0xe4, 0x07, 0x30, 0x2f, 0xaf, 0x4c, 0xfb, 0x05, 0x57, 0x26, 0x13, 0x93,
	0xa4, 0x68, 0x4a, 0x96, 0x22, 0xfd, 0x7d, 0x68, 0xe4, 0x9d, 0x33, 0x5a, 0x80, 0x79, 0x35, 0x12,
	0x35, 0x07, 0x85, 0xd6, 0xce, 0x4e, 0x4d, 0xd3, 0xff, 0x47, 0x83, 0xeb, 0xd9, 0x93, 0xe1, 0x0a,
	0xec, 0x3d, 0xe2, 0x8f, 0x04, 0xce, 0x51, 0xc2, 0x21, 0xe1, 0x6a, 0x60, 0x51, 0xb4, 0x49, 0x5d,
	0xd1, 0x27, 0x70, 0x9d, 0x69, 0xa5, 0x28, 0x9d, 0xc4, 0x39, 0x59, 0x99, 0xf7, 0x1a, 0xc5, 0x51,
	0x15, 0x0e, 0xd7, 0x59, 0xeb, 0xb0, 0xc8, 0x08, 0xa8, 0xfd, 0x98, 0xd6, 0xa8, 0xd3, 0x26, 0x05,
	0x7f, 0x03, 0x96, 0xc9, 0x06, 0x0d, 0xc9, 0x85, 0x6b, 0xf2, 0xb9, 0x52, 0xab, 0x8e, 0x59, 0x5a,
	0x8b, 0x51, 0x63, 0x8f, 0xb6, 0x11, 0x03, 0x4f, 0xff, 0x9d, 0x02, 0xac, 0x90, 0xcf, 0x0c, 0xb1,
	0xbf, 0x28, 0x5a, 0xf4, 0x2d, 0x58, 0x09, 0xb0, 0xef, 0x58, 0x03, 0xe7, 0xcb, 0xc4, 0xa6, 0x30,
	0xb6, 0x59, 0x8e, 0x5b, 0xe5, 0x6d, 0xb9, 0x03, 0x15, 0xc7, 0x8d, 0x14, 0x24, 0x66, 0x79, 0xcb,
	0x8a, 0x51, 0xa6, 0xc0, 0x36, 0x83, 0x21, 0x0b, 0x90, 0x65, 0xdb, 0x0e, 0xe9, 0x40, 0x4c, 0x33,
	0xca, 0x5f, 0x22, 0xf7, 0xb3, 0x21, 0x31, 0x50, 0xf6, 0xd4, 0xd7, 0x5b, 0x51, 0x5f, 0x1e, 0x4d,
	0xaa, 0x5b, 0x09, 0x48, 0xd0, 0xfc, 0x3d, 0x0d, 0x6a, 0x49, 0xbc, 0x5f, 0xb2, 0xa6, 0x17, 0xca,
	0xb6, 0x10, 0x2b, 0xdb, 0x89, 0x5a, 0x5e, 0xff, 0x02, 0x56, 0x53, 0x2b, 0xe2, 0x0c, 0x78, 0x2b,
	0x1d, 0xd0, 0x48, 0x64, 0x82, 0xdf, 0x87, 0x95, 0x88, 0x45, 0xd5, 0x1d, 0x9e, 0xa2, 0x3b, 0x1c,
	0x31, 0x70, 0x5b, 0xda, 0x69, 0xe2, 0x40, 0xae, 0x6c, 0xfa, 0xd8, 0x0a, 0x31, 0x19, 0x99, 0x47,
	0x95, 0x2e, 0x1f, 0xf9, 0xe4, 0x1a, 0x64, 0x4a, 0xd5, 0x20, 0xf9, 0xac, 0x51, 0x98, 0xc4, 0x1a,
	0x37, 0x61, 0x5e, 0x9a, 0x38, 0x67, 0x5b, 0x88, 0x19, 0x03, 0x7d, 0x1f, 0x4a, 0xe4, 0x48, 0x58,
	0xe2, 0x78, 0x26, 0x95, 0x38, 0xce, 0x5e, 0x07, 0x61, 0x12, 0x72, 0x62, 0x34, 0x71, 0x5c, 0x3c,
	0xe6, 0xbf, 0xd0, 0xbb, 0x80, 0x22, 0xc1, 0x8c, 0x4f, 0x84, 0xa5, 0x4e, 0xa3, 0x64, 0xb1, 0xb0,
	0x0a, 0xf4, 0xdf, 0xd6, 0x60, 0x5e, 0xa2, 0x43, 0x54, 0x49, 0xaf, 0xfd, 0xe4, 0xd3, 0x56, 0xef,
	0x53, 0x73, 0x6f, 0x87, 0xa8, 0x12, 0x09, 0x40, 0x55, 0x0a, 0xaa, 0x41, 0x59, 0x00, 0x3a, 0x7b,
	0x1d, 0xe2, 0x36, 0x22, 0xa8, 0x0a, 0x48, 0xaf, 0xdd, 0x79, 0xb2, 0x43, 0x1c, 0xc8, 0x25, 0xa8,
	0x49, 0xdd, 0x9e, 0xb7, 0x76, 0x9e, 0x6d, 0xd7, 0xa6, 0xd1, 0x1a, 0x2c, 0x45, 0xd0, 0xce, 0x67,
	0x7b, 0x9d, 0xed, 0xcd, 0x56, 0xa7, 0xdb, 0xfa, 0xac, 0xf6, 0x63, 0x4d, 0x7f, 0x0e, 0xab, 0xa9,
	0x65, 0x72, 0x16, 0xb9, 0x0e, 0xa5, 0x40, 0x00, 0x85, 0xe3, 0x10, 0x01, 0x32, 0x42, 0xe0, 0x65,
	0x39, 0x04, 0xfe, 0x7d, 0x58, 0xeb, 0x92, 0x8f, 0xe0, 0x38, 0x43, 0x15, 0x3c, 0x00, 0x94, 0xab,
	0xfb, 0xea, 0x29, 0xcd, 0xa7, 0x3f, 0x81, 0x66, 0x16, 0x2d, 0x3e, 0xcd, 0x2b, 0xc4, 0xf7, 0xfe,
	0xa6, 0x00, 0x2b, 0xdd, 0xb1, 0xdf, 0x3f, 0xb6, 0x02, 0x9c, 0x08, 0xdc, 0xbc, 0x7e, 0x58, 0xfe,
	0x26, 0xcc, 0xd3, 0xf8, 0x82, 0x39, 0x70, 0x86, 0x8e, 0x50, 0xa7, 0x40, 0x41, 0x3b, 0x04, 0x32,
	0xc1, 0x90, 0x61, 0x1c, 0x99, 0x63, 0xc8, 0xdc, 0x85, 0x2a, 0xf7, 0xd6, 0xd5, 0x3c, 0x3d, 0x0f,
	0x61, 0x88, 0x68, 0xf5, 0x4d, 0x98, 0x77, 0xc7, 0xc3, 0x28, 0xd4, 0xca, 0x1c, 0x5b, 0x70, 0xc7,
	0x43, 0x11, 0x65, 0xbd, 0x0d, 0x65, 0xea, 0x44, 0x0b, 0x2a, 0x73, 0x3c, 0xe2, 0xed, 0x79, 0x03,
	0x41, 0x43, 0xf8, 0xec, 0x87, 0x18, 0x07, 0xd4, 0xd5, 0xd5, 0x98, 0xcf, 0xfe, 0x18, 0x63, 0x7a,
	0x7d, 0x53, 0xe7, 0xf6, 0x9c, 0xbb, 0xba, 0xfc, 0x0b, 0x2d, 0xc3, 0x6c, 0x78, 0x46, 0xba, 0x70,
	0x17, 0x77, 0x26, 0x3c, 0x7b, 0x8c, 0x29, 0x5f, 0xf0, 0x69, 0x93, 0xa6, 0x79, 0xe1, 0x08, 0x12,
	0x08, 0x69, 0x7e, 0x08, 0x4b, 0xae, 0x67, 0x06, 0xa3, 0x81, 0xa3, 0x84, 0x09, 0x1b, 0x65, 0x6a,
	0x5c, 0x22, 0xd7, 0xeb, 0x91, 0x26, 0xf9, 0xf4, 0x3f, 0x86, 0xd5, 0xd4, 0x99, 0xf1, 0xa3, 0xbf,
	0x13, 0xc5, 0x73, 0xc8, 0xa9, 0x63, 0xe6, 0x03, 0x94, 0x45, 0x54, 0xe6, 0x53, 0x0a, 0xd3, 0xbf,
	0x0d, 0x4b, 0x06, 0x75, 0xdb, 0xaf, 0x76, 0xe2, 0x2c, 0x0f, 0xa9, 0xf4, 0xe3, 0xbe, 0xd9, 0x9b,
	0x70, 0x7d, 0xc7, 0xb3, 0xec, 0x16, 0x4d, 0xac, 0x6f, 0x59, 0xa1, 0xf5, 0xd8, 0x19, 0x84, 0xd8,
	0x8f, 0xb2, 0xda, 0x37, 0xe1, 0x46, 0x4e, 0x3b, 0x27, 0x70, 0x0c, 0x88, 0x48, 0xdb, 0x2e, 0x0e,
	0x02, 0xeb, 0x08, 0xcb, 0x7e, 0x5d, 0xb6, 0x01, 0xd5, 0x80, 0xb9, 0x21, 0xc3, 0x15, 0x8a, 0x91,
	0x7f, 0x26, 0xd6, 0x50, 0x48, 0xad, 0xe1, 0x9b, 0xb0, 0xa8, 0x8c, 0x74, 0x19, 0xc9, 0xd6, 0x6f,
	0xc3, 0x4d, 0x69, 0xff, 0x3b, 0x5e, 0xe8, 0x1c, 0x3a, 0x7d, 0x4b, 0x0e, 0x59, 0xeb, 0x3f, 0x9d,
	0x82, 0x5b, 0xf9, 0x38, 0x7c, 0x94, 0xef, 0xc1, 0x82, 0x15, 0x86, 0x56, 0xff, 0x18, 0xdb, 0x2c,
	0xfa, 0x28, 0x7c, 0xb4, 0xdc, 0xc0, 0x6d, 0x55, 0xe0, 0x53, 0x68, 0x80, 0xee, 0xc1, 0x82, 0x8d,
	0x55, 0x0a, 0x53, 0xf4, 0x84, 0xab, 0x02, 0xcc, 0x11, 0xf3, 0xc2, 0xbb, 0x85, 0xd7, 0x0d, 0xef,
	0x12, 0x7f, 0x37, 0x83, 0xa2, 0xe0, 0xb3, 0x69, 0x3a, 0x8b, 0x46, 0xba, 0x23, 0xe7, 0xb9, 0x1b,
	0x70, 0x4d, 0xd4, 0x4a, 0x64, 0x6d, 0xdf, 0x7f, 0x6b, 0x70, 0x3d, 0xbb, 0xfd, 0x4a, 0x79, 0xe0,
	0xcb, 0x94, 0x15, 0x64, 0x57, 0x0c, 0x14, 0xae, 0x54, 0x31, 0x30, 0x7d, 0xa5, 0x8a, 0x81, 0x99,
	0x9c, 0x8a, 0x81, 0x1f, 0xc2, 0x2d, 0x59, 0xc1, 0x65, 0x6d, 0x0c, 0x51, 0x44, 0xe1, 0x99, 0x2a,
	0xcc, 0xc5, 0xf0, 0x8c, 0x6d, 0x2a, 0xd1, 0x2c, 0x41, 0xe8, 0x8d, 0x4c, 0xeb, 0x30, 0xe4, 0x91,
	0xdf, 0x19, 0xa3, 0x44, 0x20, 0x2d, 0x02, 0xd0, 0xff, 0x62, 0x0a, 0x6e, 0x4f, 0x18, 0x80, 0xef,
	0xec, 0xab, 0x64, 0x30, 0x8b, 0xb1, 0xe4, 0xb6, 0xea, 0x45, 0x4c, 0x26, 0x22, 0x33, 0x91, 0xa2,
	0xb3, 0x13, 0x31, 0xb1, 0xe6, 0x4f, 0x34, 0x68, 0xe4, 0xe1, 0xa2, 0x55, 0x98, 0xe3, 0x6b, 0xe5,
	0x22, 0x38, 0xcb, 0x56, 0x9a, 0x8e, 0xb7, 0x4d, 0x65, 0xc5, 0xdb, 0xd4, 0xb8, 0x5e, 0xe1, 0xa2,
	0xb8, 0xde, 0x74, 0x3a, 0x5e, 0xf8, 0x5b, 0x1a, 0x2c, 0xb2, 0xbb, 0xff, 0x05, 0x5d, 0xbb, 0x38,
	0x84, 0x77, 0xa0, 0xce, 0x6f, 0xf6, 0x94, 0x7e, 0xac, 0xb1, 0x06, 0x29, 0x16, 0xf6, 0x80, 0x98,
	0x3d, 0x2c, 0x29, 0x9d, 0x0a, 0x9b, 0xd5, 0x79, 0x8b, 0x84, 0x8e, 0x60, 0x3a, 0xc0, 0xd8, 0xe6,
	0xf3, 0xa5, 0xbf, 0xf5, 0x15, 0x58, 0x52, 0xa7, 0xc1, 0xd5, 0xe4, 0xf7, 0xa0, 0xbe, 0x37, 0xc2,
	0xee, 0xeb, 0x4f, 0x4e, 0x5f, 0x02, 0x24, 0x53, 0xe0, 0x74, 0x97, 0x00, 0x6d, 0x0e, 0xbc, 0x40,
	0x5d, 0xb5, 0xbe, 0x0c, 0x8b, 0x0a, 0x94, 0x23, 0x2f, 0xc3, 0x22, 0x83, 0x6c, 0x9f, 0x39, 0x41,
	0x5c, 0xb9, 0xb4, 0x0e, 0x4b, 0x2a, 0x98, 0xb3, 0x17, 0xbd, 0x2c, 0x09, 0x84, 0xce, 0xa9, 0x68,
	0xf0, 0x2f, 0xfd, 0xa7, 0x1a, 0x34, 0x7a, 0xa1, 0xe5, 0x87, 0xc4, 0x2b, 0xc4, 0x6e, 0x30, 0x0e,
	0x8c, 0x51, 0x5f, 0xac, 0xe9, 0x1e, 0x2c, 0xf0, 0xa2, 0xad, 0x44, 0x5a, 0xba, 0xca, 0xc1, 0xe2,
	0x9e, 0x6e, 0x42, 0x71, 0x1c, 0x10, 0x19, 0x8c, 0x64, 0x3d, 0xfa, 0x26, 0x6d, 0x64, 0x47, 0x4e,
	0x3d, 0x5f, 0xec, 0x6e, 0xf4, 0x4d, 0x8c, 0xfd, 0x3e, 0xf6, 0x39, 0x27, 0x63, 0xee, 0x26, 0xc8,
	0x20, 0xfd, 0x1a, 0xac, 0x65, 0x4c, 0x8f, 0xef, 0xc1, 0x09, 0x34, 0xb6, 0x9c, 0xa0, 0xef, 0x9d,
	0x60, 0x9f, 0xcf, 0x04, 0x07, 0xd2, 0x79, 0xd8, 0xbc, 0xcd, 0x94, 0xca, 0xb6, 0x68, 0xd4, 0x56,
	0x34, 0x88, 0x9a, 0xad, 0x2b, 0x32, 0x0b, 0x99, 0x54, 0xc6, 0xb8, 0x7c, 0x52, 0x6f, 0xc3, 0x5b,
	0xbd, 0xf1, 0x01, 0x31, 0xb3, 0x0f, 0xf0, 0xbe, 0x47, 0xef, 0x81, 0x4c, 0x5d, 0x7b, 0x0f, 0xee,
	0x5e, 0x80, 0x17, 0x9f, 0xf4, 0x63, 0x1c, 0xf6, 0x8f, 0x59, 0x38, 0x3a, 0xea, 0xff, 0x27, 0x53,
	0xb0, 0xa4, 0xc2, 0xf9, 0x51, 0x6f, 0xc0, 0xf2, 0x21, 0x81, 0x63, 0x9b, 0x07, 0xb5, 0x03, 0x53,
	0x8e, 0x66, 0x2d, 0xf2, 0x46, 0xde, 0x8d, 0x69, 0xcc, 0x6f, 0xc0, 0xd2, 0xa1, 0xe3, 0x07, 0xa1,
	0xe9, 0xe2, 0xd3, 0x74, 0x71, 0x5a, 0x9d, 0xb6, 0x75, 0xf0, 0x69, 0x9c, 0xbf, 0xfb, 0x26, 0xac,
	0xa4, 0x3a, 0xc8, 0xf5, 0x69, 0x8b, 0x6a, 0x17, 0x16, 0xb0, 0xff, 0x10, 0xd6, 0x86, 0x96, 0x43,
	0xc3, 0x4c, 0x8e, 0x6b, 0x86, 0xce, 0x48, 0x1e, 0x8a, 0x1d, 0xfe, 0x32, 0x41, 0xd8, 0x24, 0xed,
	0xfb, 0xce, 0x28, 0x1e, 0xee, 0x23, 0xb8, 0x96, 0xdd, 0x93, 0x8d, 0xc9, 0x52, 0xb9, 0xab, 0xe9,
	0xbe, 0x4c, 0xa1, 0x7c, 0x04, 0x6b, 0xbc, 0x12, 0x00, 0x1b, 0x96, 0x6b, 0x7b, 0xc3, 0x1e, 0xc6,
	0xb6, 0x60, 0x14, 0x62, 0x26, 0x63, 0x6c, 0x9b, 0x03, 0xec, 0x1e, 0x85, 0xc7, 0x7c, 0x93, 0x80,
	0x80, 0x76, 0x28, 0x44, 0xff, 0x75, 0x68, 0x66, 0xf5, 0x8e, 0xd3, 0x18, 0xb4, 0xfb, 0xc1, 0x79,
	0x88, 0x83, 0xc8, 0x66, 0xc1, 0xd8, 0x7e, 0x44, 0x00, 0x68, 0x0d, 0x8a, 0xb4, 0xf9, 0x98, 0x7b,
	0xce, 0x25, 0x63, 0x8e, 0x7c, 0x7f, 0x8a, 0xcf, 0x88, 0x91, 0x48, 0x9b, 0x86, 0x2e, 0x1e, 0x7a,
	0xae, 0xd3, 0xe7, 0x45, 0x33, 0x65, 0x02, 0xdc, 0xe5, 0x30, 0x7d, 0x03, 0xea, 0x5b, 0xb8, 0xef,
	0xd9, 0x58, 0x9e, 0xf2, 0x0d, 0x00, 0x22, 0x5e, 0xcc, 0xfb, 0xe5, 0x22, 0x59, 0x22, 0x10, 0xea,
	0xf1, 0xea, 0x1f, 0x00, 0x92, 0xfb, 0xc4, 0x49, 0x36, 0x9b, 0x42, 0x6d, 0x93, 0x6a, 0x3a, 0xee,
	0x59, 0x73, 0x18, 0x41, 0xd5, 0x7f, 0xb7, 0x00, 0xcb, 0x54, 0xda, 0x5a, 0xe3, 0xd0, 0x7b, 0x34,
	0x3e, 0x8f, 0xcb, 0x30, 0x5f, 0xdf, 0x0b, 0x59, 0x87, 0x45, 0x5e, 0x38, 0x68, 0x86, 0x9e, 0x49,
	0x4e, 0x28, 0xb4, 0x1c, 0x57, 0x04, 0x77, 0x78, 0xd3, 0xbe, 0xb7, 0xcb, 0x1b, 0xd0, 0x1d, 0xa8,
	0x0e, 0x2d, 0x6a, 0xbe, 0x8b, 0x50, 0x29, 0xcb, 0xd9, 0xcc, 0x0f, 0x2d, 0x62, 0xc6, 0xb3, 0x68,
	0xe9, 0xbb, 0x80, 0x08, 0x12, 0xcd, 0x16, 0x9a, 0x3e, 0x1e, 0x58, 0xa1, 0x48, 0xa8, 0x69, 0x46,
	0x6d, 0x68, 0x9d, 0xf1, 0xf4, 0x22, 0x83, 0xab, 0xd8, 0xd6, 0x41, 0xe0, 0x0d, 0xc6, 0x21, 0xe6,
	0x05, 0x1d, 0x11, 0x76, 0x8b, 0xc3, 0x69, 0x95, 0x3d, 0x2f, 0xfe, 0x50, 0x1c, 0x93, 0x0a, 0x2f,
	0xfd, 0xe0, 0x2a, 0x2f, 0xe9, 0xbd, 0x14, 0x2f, 0xf0, 0x5e, 0x4a, 0x09, 0xef, 0x45, 0x87, 0x0a,
	0x9d, 0x14, 0xf6, 0x19, 0x2b, 0x73, 0x67, 0x85, 0x2c, 0xb3, 0x8b, 0x7d, 0xca, 0xbd, 0x7a, 0x03,
	0x56, 0x92, 0xc7, 0xc1, 0x75, 0xc2, 0x0a, 0x2c, 0xf5, 0x88, 0x81, 0x91, 0x38, 0x27, 0xe2, 0x1b,
	0x24, 0xe0, 0xbc, 0x43, 0x13, 0x1a, 0xcc, 0x5d, 0xa0, 0x60, 0x7a, 0xe1, 0x47, 0x75, 0xbd, 0xff,
	0x34, 0x0b, 0x6b, 0x19, 0x8d, 0x52, 0xb1, 0x59, 0x76, 0x5a, 0xe7, 0x2d, 0xa8, 0x5a, 0x27, 0x47,
	0x7c, 0x5f, 0x87, 0x9e, 0x2d, 0x74, 0x7f, 0xd9, 0x3a, 0x39, 0xa2, 0x7b, 0xba, 0xeb, 0xd9, 0x98,
	0x30, 0x40, 0x84, 0xf5, 0xfc, 0x45, 0xab, 0x6b, 0xda, 0x78, 0x10, 0x5a, 0x82, 0x01, 0x04, 0x2a,
	0x69, 0xd9, 0x22, 0x0d, 0x79, 0x0c, 0x33, 0x9d, 0xc7, 0x30, 0x3a, 0x54, 0x98, 0x09, 0x4e, 0xd0,
	0xad, 0x93, 0x23, 0x91, 0x32, 0x60, 0xc0, 0x7d, 0xaf, 0x75, 0x72, 0x84, 0xde, 0x83, 0x65, 0xdb,
	0x73, 0x43, 0xf3, 0xd4, 0x72, 0x42, 0xf3, 0xd0, 0xf3, 0x15, 0xaf, 0xb4, 0x68, 0x20, 0xd2, 0xf8,
	0xc2, 0x72, 0xc2, 0xc7, 0x9e, 0x2f, 0x79, 0xa7, 0xcc, 0x9f, 0xe4, 0xf3, 0xe5, 0x95, 0x3d, 0x0c,
	0xc6, 0x66, 0x7a, 0x83, 0x45, 0xf4, 0x59, 0x76, 0x80, 0x33, 0x40, 0xe9, 0x10, 0xe3, 0x1e, 0x05,
	0x10, 0xb6, 0x23, 0xcd, 0x3c, 0xf3, 0x15, 0xf4, 0xad, 0x81, 0xe3, 0x1e, 0x71, 0x3e, 0xa8, 0x1d,
	0x62, 0xbc, 0x4f, 0x1b, 0x7a, 0x0c, 0x4e, 0xac, 0xae, 0xa1, 0xe3, 0x4a, 0x6e, 0xeb, 0xec, 0xd0,
	0x71, 0x89, 0x63, 0x4a, 0x1a, 0x98, 0x40, 0x50, 0x5f, 0x94, 0x34, 0x50, 0x49, 0x48, 0x73, 0x50,
	0x25, 0xc5, 0x41, 0x39, 0xac, 0x5f, 0xcd, 0x61, 0xfd, 0x6c, 0xb1, 0x5a, 0xc8, 0x11, 0xab, 0xb7,
	0x98, 0xa4, 0x3a, 0x51, 0x3a, 0xbc, 0x51, 0x67, 0x69, 0xbd, 0xa1, 0x75, 0xd6, 0x16, 0xc9, 0xf0,
	0x94, 0x9c, 0xa0, 0x0b, 0xe4, 0x64, 0x31, 0x21, 0x27, 0xdf, 0x86, 0xd5, 0x60, 0xe4, 0x63, 0xcb,
	0x36, 0x45, 0x89, 0x00, 0xf7, 0xb9, 0x83, 0xc6, 0x12, 0x3d, 0xbc, 0x65, 0xd6, 0xcc, 0xeb, 0x0a,
	0x44, 0x63, 0x86, 0x18, 0x2f, 0x67, 0x89, 0x71, 0x1c, 0x2c, 0x58, 0x91, 0x83, 0x05, 0x79, 0xd1,
	0x80, 0xd5, 0xdc, 0x68, 0xc0, 0x03, 0xa8, 0xf7, 0x70, 0xb2, 0x20, 0x37, 0x57, 0x76, 0x88, 0xad,
	0x27, 0xa3, 0x73, 0x29, 0xdd, 0x85, 0x6b, 0x3d, 0x2c, 0xaa, 0xf7, 0x63, 0x1e, 0x97, 0x8a, 0x78,
	0xb2, 0x44, 0x43, 0xcb, 0x11, 0x0d, 0xfd, 0x4d, 0xb8, 0x9e, 0x4d, 0x8e, 0x0f, 0xf7, 0x01, 0xd4,
	0x7a, 0x38, 0xdc, 0xa5, 0xec, 0x24, 0xc6, 0x48, 0xeb, 0x5f, 0x2d, 0xa5, 0x7f, 0xf5, 0x45, 0xba,
	0x58, 0xd1, 0x91, 0x53, 0xfb, 0x3e, 0x34, 0x19, 0x50, 0x61, 0x13, 0x41, 0x37, 0x9b, 0xb7, 0xb4,
	0x6c, 0xde, 0x22, 0x7e, 0x6a, 0x26, 0xad, 0xcc, 0xa1, 0x04, 0xff, 0x66, 0x0e, 0x15, 0x31, 0xbd,
	0x96, 0xcd, 0xf4, 0x89, 0xa1, 0x62, 0x5a, 0x91, 0xb1, 0xbf, 0xda, 0xc3, 0xe1, 0x73, 0x99, 0x69,
	0xa4, 0x7c, 0x61, 0x82, 0xc5, 0xb4, 0x0c, 0x16, 0x23, 0xaa, 0x37, 0x4d, 0x81, 0x53, 0xef, 0xd2,
	0x13, 0xea, 0xa4, 0xd8, 0x49, 0x0c, 0x91, 0xc7, 0x87, 0x5a, 0x2e, 0x1f, 0xde, 0x84, 0x1b, 0x39,
	0x14, 0xf9, 0x90, 0xdf, 0x81, 0xe5, 0x1e, 0x0e, 0xbb, 0xb1, 0xfc, 0x49, 0x55, 0xeb, 0x8a, 0xa4,
	0x6a, 0x29, 0x49, 0xa5, 0x17, 0x52, 0xa2, 0x2f, 0xa7, 0xfa, 0x1e, 0xe5, 0xe7, 0x2e, 0x97, 0x5a,
	0xc9, 0x6d, 0x8e, 0x25, 0x5b, 0x53, 0x25, 0x9b, 0xd8, 0xb5, 0x4a, 0x17, 0x4e, 0xe9, 0xbb, 0x74,
	0x7e, 0xbb, 0xb1, 0x12, 0x13, 0xc4, 0x52, 0xfa, 0x4e, 0xcb, 0xbe, 0x31, 0x13, 0x9d, 0xe3, 0xc7,
	0x2a, 0xad, 0x23, 0xec, 0xda, 0x56, 0x64, 0x40, 0xff, 0xac, 0x00, 0x0b, 0x11, 0x28, 0xbe, 0xec,
	0x44, 0xce, 0x8f, 0x0b, 0x2c, 0xff, 0x44, 0xdf, 0x85, 0x39, 0x8b, 0x21, 0xf3, 0xda, 0xbc, 0xdb,
	0xf2, 0xe3, 0x0f, 0x95, 0x0c, 0xff, 0x36, 0x44, 0x8f, 0xe6, 0x3f, 0x6b, 0x30, 0xcb, 0x60, 0xa8,
	0x0a, 0x53, 0x8e, 0xcd, 0xf7, 0x76, 0xca, 0xa1, 0x2e, 0x90, 0x8d, 0x59, 0x50, 0x5e, 0xa4, 0x94,
	0x4a, 0x86, 0x0c, 0x22, 0xae, 0xe9, 0xd0, 0x0a, 0x5e, 0xf1, 0xd8, 0x08, 0xfd, 0x4d, 0x66, 0xd3,
	0x3f, 0xf6, 0x9c, 0x3e, 0x16, 0xc9, 0xa2, 0x49, 0xb3, 0xd9, 0xa4, 0x98, 0x86, 0xe8, 0xc1, 0xe2,
	0x15, 0x96, 0x1f, 0xca, 0x19, 0xf6, 0x12, 0x85, 0xd0, 0xfc, 0xfa, 0x4d, 0x60, 0xb7, 0x1c, 0xcf,
	0xc0, 0x33, 0x3b, 0x09, 0x18, 0x88, 0x20, 0x34, 0xbf, 0xd2, 0x60, 0x96, 0xd1, 0x7c, 0xbd, 0xd5,
	0xf0, 0x57, 0x7c, 0x74, 0x35, 0xf4, 0x79, 0xde, 0x0d, 0x00, 0x27, 0x20, 0x92, 0x1a, 0xdd, 0xf4,
	0x45, 0xa3, 0xe4, 0x04, 0x2d, 0x06, 0x40, 0x8b, 0x30, 0xe3, 0x04, 0xa6, 0xeb, 0xf1, 0xa2, 0x8c,
	0x69, 0x27, 0xe8, 0x78, 0x44, 0x81, 0x3e, 0xf7, 0x42, 0xcc, 0xe6, 0x11, 0x9d, 0xe9, 0x5f, 0x4e,
	0xc1, 0xa2, 0x02, 0xbe, 0xf0, 0x5c, 0x3f, 0x89, 0x77, 0x92, 0x9d, 0xeb, 0x5d, 0x69, 0x27, 0x33,
	0x48, 0xa5, 0x76, 0xb3, 0x09, 0xc5, 0x13, 0x2f, 0xc4, 0xd2, 0xa2, 0xa2, 0xef, 0xe6, 0x1f, 0xc5,
	0x3b, 0x75, 0x0d, 0x4a, 0x8c, 0x1b, 0xcc, 0x68, 0xc3, 0x8a, 0x0c, 0xd0, 0xb6, 0x89, 0xff, 0xc9,
	0x1b, 0xd3, 0xbb, 0x57, 0x67, 0x2d, 0x5b, 0xd2, 0x1e, 0x5e, 0x83, 0x12, 0x1b, 0x9d, 0xd0, 0x62,
	0x5e, 0x43, 0x91, 0x01, 0x18, 0x2d, 0xde, 0x28, 0xd3, 0x9a, 0x66, 0xb4, 0x58, 0x8b, 0x44, 0x4b,
	0xff, 0x03, 0x8d, 0xca, 0x5b, 0x7a, 0x2f, 0x51, 0x2b, 0xde, 0x19, 0x16, 0x8b, 0x92, 0x1f, 0x58,
	0x64, 0x76, 0x49, 0xee, 0x4d, 0xf3, 0xd1, 0xe5, 0x96, 0xaf, 0xac, 0x67, 0x4a, 0x5d, 0x8f, 0xfe,
	0x3e, 0x15, 0xe9, 0xac, 0x43, 0x95, 0x77, 0x5e, 0x53, 0x77, 0x5e, 0x3f, 0x86, 0xa5, 0xe7, 0xd8,
	0x77, 0x0e, 0xcf, 0x7f, 0x09, 0xc1, 0x6c, 0x25, 0x2a, 0x5d, 0x48, 0x46, 0xa5, 0x1f, 0xc0, 0x72,
	0x62, 0xa4, 0xb8, 0x14, 0x9e, 0xd6, 0x85, 0x71, 0x65, 0xcd, 0x3e, 0x36, 0x8c, 0xe8, 0xa9, 0x6f,
	0x0f, 0xfb, 0x27, 0x64, 0x6b, 0xbe, 0x07, 0x73, 0x1c, 0x82, 0xd6, 0x64, 0xde, 0x53, 0x1e, 0x04,
	0x37, 0x9b, 0x59, 0x4d, 0x6c, 0xa4, 0x8d, 0x3f, 0x5c, 0x82, 0x0a, 0x8b, 0xfa, 0x08, 0x9a, 0x1f,
	0xc0, 0x74, 0x97, 0x58, 0x95, 0x2b, 0x52, 0x2f, 0xe9, 0x29, 0x5f, 0x73, 0x35, 0x05, 0x8f, 0x62,
	0xe3, 0x73, 0xfc, 0x49, 0x9e, 0x32, 0x19, 0xf5, 0x9d, 0x9f, 0x32, 0x99, 0xe4, 0x83, 0x3f, 0x03,
	0x2a, 0xca, 0x73, 0x3c, 0x74, 0x33, 0xfd, 0x4a, 0x4e, 0x79, 0xe3, 0xd7, 0xbc, 0x95, 0x8f, 0x10,
	0x95, 0xf9, 0x16, 0xa3, 0x58, 0x4d, 0x33, 0xf3, 0xd1, 0x1d, 0xa3, 0x74, 0x6d, 0xc2, 0x83, 0x3c,
	0xb2, 0x34, 0xf1, 0x5c, 0x4d, 0x5e, 0x9a, 0xfa, 0x64, 0x42, 0x59, 0x5a, 0xf2, 0x71, 0xc3, 0x33,
	0xa8, 0xaa, 0xf5, 0xe0, 0xe8, 0x56, 0xa2, 0x42, 0x37, 0x75, 0x83, 0x37, 0x6f, 0x4f, 0xc0, 0xe0,
	0x64, 0x7f, 0x00, 0x0b, 0x89, 0x32, 0x73, 0x94, 0xdf, 0x2b, 0x5a, 0xab, 0x3e, 0x09, 0x85, 0x51,
	0x7e, 0xa8, 0xa1, 0xa7, 0x00, 0x71, 0xe5, 0x30, 0xba, 0x9e, 0x53, 0x50, 0xcc, 0x28, 0xde, 0x98,
	0x58, 0x6e, 0xfc, 0x50, 0x43, 0x3b, 0x30, 0x2f, 0x95, 0xef, 0x22, 0x25, 0x7d, 0x91, 0x2a, 0xf6,
	0x6d, 0xbe, 0x99, 0xd7, 0x1c, 0x95, 0xd0, 0x97, 0xa2, 0x2a, 0x5d, 0x24, 0x9f, 0x5c, 0xb2, 0xa0,
	0xb7, 0x79, 0x3d, 0xbb, 0x31, 0xa6, 0x13, 0x55, 0x97, 0x2a, 0x74, 0x92, 0xa5, 0xac, 0x0a, 0x9d,
	0x74, 0x41, 0xea, 0x58, 0x89, 0x89, 0x2b, 0xb1, 0x38, 0xf4, 0xf5, 0xec, 0x4c, 0x4d, 0x56, 0x60,
	0xaf, 0xf9, 0xce, 0xa5, 0x70, 0xa3, 0x4d, 0x75, 0xe2, 0x97, 0xaf, 0xca, 0x90, 0x6f, 0x67, 0x48,
	0x45, 0xd6, 0x70, 0xf7, 0x2e, 0xc4, 0x8b, 0x86, 0xfa, 0x12, 0xd6, 0x72, 0x73, 0x08, 0xe8, 0x9d,
	0xcb, 0x65, 0x1a, 0xd8, 0xa0, 0xef, 0x5e, 0x25, 0x2d, 0x71, 0x5f, 0x7b, 0xa8, 0xa1, 0xcf, 0xa1,
	0x96, 0x2c, 0x2a, 0x45, 0xfa, 0xc5, 0x35, 0xb0, 0xcd, 0x3b, 0x13, 0x71, 0x62, 0x9d, 0xa3, 0x3c,
	0xcd, 0x54, 0x74, 0x4e, 0xd6, 0x73, 0x50, 0x45, 0xe7, 0x64, 0xbe, 0xea, 0x44, 0x9f, 0xc0, 0x2c,
	0x7b, 0xa1, 0x89, 0x1a, 0x0a, 0xae, 0xf4, 0xd0, 0xb3, 0xb9, 0x96, 0xd1, 0x22, 0x4b, 0x8b, 0xf4,
	0x94, 0x52, 0x91, 0x96, 0xf4, 0xdb, 0x4d, 0x45, 0x5a, 0xb2, 0x5e, 0x60, 0x0a, 0x6a, 0xe2, 0xa1,
	0xdf, 0xc4, 0xc7, 0x8e, 0x69, 0x6a, 0x89, 0x17, 0x84, 0x9f, 0x43, 0x2d, 0xf9, 0xaa, 0x4e, 0x39,
	0x8d, 0x9c, 0x47, 0x82, 0xca, 0x69, 0xe4, 0x3d, 0xcb, 0x43, 0x7b, 0x50, 0x96, 0x9f, 0xb8, 0xa1,
	0x37, 0x53, 0x9d, 0x94, 0xe7, 0x7a, 0xcd, 0x9b, 0xb9, 0xed, 0x9c, 0xe0, 0x4b, 0x58, 0x48, 0x94,
	0xcc, 0x2a, 0x0a, 0x32, 0xbb, 0x1e, 0x59, 0x51, 0x90, 0x79, 0xf5, 0xba, 0x47, 0xb0, 0x94, 0x55,
	0x0e, 0xa7, 0x08, 0xdf, 0x84, 0xe2, 0x3d, 0x45, 0xf8, 0x26, 0xd6, 0xd5, 0xbd, 0x84, 0x85, 0x44,
	0xc5, 0x93, 0xb2, 0x84, 0xec, 0xfa, 0x2e, 0x65, 0x09, 0x79, 0x05, 0x53, 0x2f, 0x61, 0x21, 0x51,
	0x28, 0xa3, 0x50, 0xce, 0xae, 0x15, 0x52, 0x28, 0xe7, 0xd5, 0xd9, 0x58, 0x80, 0xd2, 0xe5, 0x2d,
	0x48, 0xfe, 0xd7, 0x19, 0xb9, 0x95, 0x34, 0xcd, 0xbb, 0x17, 0x60, 0xc5, 0x93, 0x4f, 0xd4, 0x50,
	0x28, 0x93, 0xcf, 0xae, 0x89, 0x51, 0x26, 0x9f, 0x57, 0x82, 0x41, 0x55, 0x82, 0x54, 0x25, 0x91,
	0x50, 0x09, 0xe9, 0xba, 0x8b, 0x84, 0x4a, 0xc8, 0x28, 0xb0, 0x40, 0x3f, 0x82, 0xe5, 0xcc, 0x02,
	0x0a, 0x24, 0xb3, 0xc1, 0xa4, 0x12, 0x8c, 0xe6, 0xfd, 0x8b, 0x11, 0x63, 0x79, 0x97, 0x2a, 0x24,
	0x14, 0x79, 0x4f, 0xd7, 0x68, 0x28, 0xf2, 0x9e, 0x51, 0x58, 0xb1, 0xf1, 0x1f, 0x33, 0x22, 0x5d,
	0x48, 0x46, 0xc5, 0xbe, 0xb0, 0x13, 0xf7, 0xa0, 0x2c, 0xa7, 0x0b, 0x15, 0x51, 0xcd, 0x48, 0x2f,
	0x2a, 0xa2, 0x9a, 0x99, 0x67, 0xdc, 0x83, 0xb2, 0x9c, 0x33, 0x55, 0x08, 0x66, 0xe4, 0x74, 0x15,
	0x82, 0x59, 0xc9, 0x56, 0xd4, 0x06, 0x88, 0x53, 0xa5, 0x8a, 0x01, 0x93, 0xca, 0xc1, 0x2a, 0x06,
	0x4c, 0x3a, 0xbf, 0x4a, 0xb6, 0x54, 0xca, 0xa4, 0x2a, 0x5b, 0x9a, 0xce, 0xbb, 0x2a, 0x5b, 0x9a,
	0x91, 0x80, 0x45, 0x3f, 0xa4, 0x8f, 0x8c, 0xd4, 0xcc, 0x24, 0xba, 0xa3, 0x5a, 0x2a, 0x99, 0x69,
	0xd5, 0xe6, 0x5b, 0x93, 0x91, 0x62, 0xfa, 0xa9, 0x24, 0xa3, 0x42, 0x3f, 0x2f, 0xf5, 0xa9, 0xd0,
	0xcf, 0xcd, 0x53, 0xa2, 0xaf, 0x34, 0xb8, 0x31, 0x31, 0x01, 0x89, 0xbe, 0x21, 0xcf, 0xf3, 0x12,
	0x29, 0xcd, 0xe6, 0xc3, 0xcb, 0x77, 0x88, 0xd9, 0x45, 0xce, 0x61, 0x2a, 0xec, 0x92, 0x91, 0xf4,
	0x54, 0xd8, 0x25, 0x2b, 0xf9, 0xb9, 0xf1, 0x67, 0x25, 0xf1, 0xf0, 0x8c, 0xe6, 0x32, 0x04, 0x9f,
	0x3f, 0x83, 0xaa, 0x9a, 0x49, 0x51, 0x2c, 0xf7, 0xcc, 0x9c, 0x97, 0x62, 0xb9, 0x67, 0xa7, 0x61,
	0x88, 0x92, 0x51, 0xd2, 0x2d, 0x8a, 0x92, 0xc9, 0x4a, 0xd0, 0x34, 0x6f, 0xe5, 0x23, 0xc4, 0xe7,
	0x9e, 0x4a, 0xc6, 0x28, 0xe7, 0x9e, 0x97, 0xc7, 0x51, 0xce, 0x3d, 0x3f, 0x9f, 0xd3, 0x06, 0x88,
	0x23, 0xcf, 0x8a, 0x40, 0xa5, 0xe2, 0xd7, 0x8a, 0x40, 0xa5, 0xc3, 0xd5, 0xe4, 0xf6, 0xcc, 0x8a,
	0x2f, 0x2b, 0xb7, 0xe7, 0x84, 0x78, 0x76, 0xf3, 0xde, 0x85, 0x78, 0x92, 0xab, 0x20, 0xe2, 0xcd,
	0xaa, 0xab, 0x90, 0x08, 0x5f, 0x37, 0xaf, 0x67, 0x37, 0x72, 0x3a, 0x36, 0x0d, 0x39, 0x26, 0xc3,
	0xca, 0xe8, 0x6e, 0xaa, 0x53, 0x56, 0x08, 0xbb, 0xf9, 0xf6, 0x45, 0x68, 0x99, 0xa3, 0xc4, 0x89,
	0xc5, 0xec, 0xee, 0x89, 0xe8, 0x75, 0xde, 0x28, 0xc9, 0xc0, 0x34, 0x31, 0xe1, 0x92, 0x61, 0x65,
	0xc5, 0x84, 0xcb, 0x89, 0x5a, 0x2b, 0x26, 0x5c, 0x5e, 0x5c, 0x9a, 0xca, 0x8b, 0x12, 0xe8, 0x55,
	0xe5, 0x25, 0x2b, 0x7e, 0xac, 0xca, 0x4b, 0x66, 0x94, 0x98, 0x5e, 0x6a, 0x71, 0xc8, 0x17, 0xdd,
	0x48, 0xf7, 0x90, 0xa2, 0xc7, 0xea, 0xa5, 0x96, 0x8e, 0x14, 0xf3, 0x49, 0x4a, 0xc1, 0xde, 0xe4,
	0x24, 0xd3, 0x41, 0xe4, 0xe4, 0x24, 0x33, 0x22, 0xc5, 0xe4, 0x96, 0xcf, 0x8c, 0xa0, 0xa3, 0x04,
	0xbb, 0xe6, 0x46, 0xed, 0x95, 0x5b, 0x7e, 0x62, 0x30, 0x7e, 0xe3, 0x67, 0x1a, 0xd9, 0x11, 0x6c,
	0x0b, 0x3d, 0x65, 0x01, 0x4a, 0xd7, 0x1a, 0x28, 0x26, 0x57, 0x6e, 0x21, 0x83, 0x62, 0x72, 0x4d,
	0x28, 0x58, 0x68, 0x03, 0xc4, 0xd5, 0x01, 0x8a, 0xfc, 0xa7, 0x0a, 0x0d, 0x14, 0xf9, 0x4f, 0x97,
	0x14, 0x6c, 0xfc, 0x0a, 0x54, 0x58, 0xac, 0x59, 0x0a, 0x65, 0xf1, 0xe0, 0xb3, 0x12, 0x62, 0x51,
	0x03, 0xef, 0x4a, 0x88, 0x25, 0x11, 0xab, 0xde, 0xf8, 0x3b, 0x0d, 0x2a, 0x8c, 0x25, 0x05, 0xcd,
	0x1d, 0x98, 0x97, 0x82, 0x7f, 0x0a, 0xcf, 0xa4, 0x23, 0x90, 0x0a, 0xcf, 0x64, 0xc5, 0x0c, 0x19,
	0xcf, 0xc8, 0x04, 0x6f, 0x5d, 0x14, 0xd5, 0x4c, 0xf2, 0x4c, 0x06, 0xd9, 0x8d, 0x11, 0x34, 0xb9,
	0xc9, 0x45, 0x63, 0x81, 0xfc, 0x9e, 0x13, 0x4b, 0x30, 0xa0, 0xa2, 0x84, 0x08, 0x95, 0x6b, 0x22,
	0x2b, 0x4c, 0xa9, 0x5c, 0x13, 0x99, 0xd1, 0xc5, 0x83, 0x59, 0xfa, 0x4f, 0x04, 0xbf, 0xf9, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x6e, 0xed, 0xb7, 0x11, 0x51, 0x50, 0x00, 0x00,
}
